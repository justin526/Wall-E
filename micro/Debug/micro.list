
micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007590  08007590  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007590  08007590  00017590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007598  08007598  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800759c  0800759c  0001759c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080075a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  20000070  08007610  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  08007610  00020a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013725  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002588  00000000  00000000  000337c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00035d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00036bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bae  00000000  00000000  00037948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e38  00000000  00000000  0005b4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dde5a  00000000  00000000  0006d32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b188  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004448  00000000  00000000  0014b1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080070dc 	.word	0x080070dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080070dc 	.word	0x080070dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b96e 	b.w	8000f50 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468c      	mov	ip, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8083 	bne.w	8000da2 <__udivmoddi4+0x116>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d947      	bls.n	8000d32 <__udivmoddi4+0xa6>
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b142      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	f1c2 0020 	rsb	r0, r2, #32
 8000cac:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	4097      	lsls	r7, r2
 8000cb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc4:	fa1f fe87 	uxth.w	lr, r7
 8000cc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 8119 	bcs.w	8000f14 <__udivmoddi4+0x288>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8116 	bls.w	8000f14 <__udivmoddi4+0x288>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	f080 8105 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f240 8102 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xaa>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d150      	bne.n	8000de0 <__udivmoddi4+0x154>
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	2601      	movs	r6, #1
 8000d4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb08 f30c 	mul.w	r3, r8, ip
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0xe2>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f200 80e9 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1ac9      	subs	r1, r1, r3
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x10c>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x10a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80d9 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e7bf      	b.n	8000d22 <__udivmoddi4+0x96>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x12e>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <__udivmoddi4+0x282>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x1cc>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0x140>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80b8 	bhi.w	8000f3c <__udivmoddi4+0x2b0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0103 	sbc.w	r1, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0a8      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000dda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f603 	lsr.w	r6, r0, r3
 8000de8:	4097      	lsls	r7, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	4330      	orrs	r0, r6
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f108 	mul.w	r1, r6, r8
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x19c>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e1a:	f080 808d 	bcs.w	8000f38 <__udivmoddi4+0x2ac>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 808a 	bls.w	8000f38 <__udivmoddi4+0x2ac>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	443b      	add	r3, r7
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b281      	uxth	r1, r0
 8000e2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb00 f308 	mul.w	r3, r0, r8
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x1c4>
 8000e40:	1879      	adds	r1, r7, r1
 8000e42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e46:	d273      	bcs.n	8000f30 <__udivmoddi4+0x2a4>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d971      	bls.n	8000f30 <__udivmoddi4+0x2a4>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4439      	add	r1, r7
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e56:	e778      	b.n	8000d4a <__udivmoddi4+0xbe>
 8000e58:	f1c6 0c20 	rsb	ip, r6, #32
 8000e5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e64:	431c      	orrs	r4, r3
 8000e66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e76:	431f      	orrs	r7, r3
 8000e78:	0c3b      	lsrs	r3, r7, #16
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fa1f f884 	uxth.w	r8, r4
 8000e82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	fa02 f206 	lsl.w	r2, r2, r6
 8000e94:	fa00 f306 	lsl.w	r3, r0, r6
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x220>
 8000e9a:	1861      	adds	r1, r4, r1
 8000e9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea0:	d248      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea2:	458a      	cmp	sl, r1
 8000ea4:	d946      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4421      	add	r1, r4
 8000eac:	eba1 010a 	sub.w	r1, r1, sl
 8000eb0:	b2bf      	uxth	r7, r7
 8000eb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ebe:	fb00 f808 	mul.w	r8, r0, r8
 8000ec2:	45b8      	cmp	r8, r7
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x24a>
 8000ec6:	19e7      	adds	r7, r4, r7
 8000ec8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ecc:	d22e      	bcs.n	8000f2c <__udivmoddi4+0x2a0>
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d92c      	bls.n	8000f2c <__udivmoddi4+0x2a0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4427      	add	r7, r4
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	eba7 0708 	sub.w	r7, r7, r8
 8000ede:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee2:	454f      	cmp	r7, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	d31a      	bcc.n	8000f20 <__udivmoddi4+0x294>
 8000eea:	d017      	beq.n	8000f1c <__udivmoddi4+0x290>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x27a>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	ea4c 0202 	orr.w	r2, ip, r2
 8000f00:	40f7      	lsrs	r7, r6
 8000f02:	e9c5 2700 	strd	r2, r7, [r5]
 8000f06:	2600      	movs	r6, #0
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e70b      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fd      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f1c:	4543      	cmp	r3, r8
 8000f1e:	d2e5      	bcs.n	8000eec <__udivmoddi4+0x260>
 8000f20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f24:	eb69 0104 	sbc.w	r1, r9, r4
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7df      	b.n	8000eec <__udivmoddi4+0x260>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e7d2      	b.n	8000ed6 <__udivmoddi4+0x24a>
 8000f30:	4660      	mov	r0, ip
 8000f32:	e78d      	b.n	8000e50 <__udivmoddi4+0x1c4>
 8000f34:	4681      	mov	r9, r0
 8000f36:	e7b9      	b.n	8000eac <__udivmoddi4+0x220>
 8000f38:	4666      	mov	r6, ip
 8000f3a:	e775      	b.n	8000e28 <__udivmoddi4+0x19c>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14a>
 8000f40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f44:	4439      	add	r1, r7
 8000f46:	e713      	b.n	8000d70 <__udivmoddi4+0xe4>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	443c      	add	r4, r7
 8000f4c:	e724      	b.n	8000d98 <__udivmoddi4+0x10c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	resetTime = 10;
 8000f58:	4b30      	ldr	r3, [pc, #192]	; (800101c <main+0xc8>)
 8000f5a:	220a      	movs	r2, #10
 8000f5c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f001 fead 	bl	8002cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f86f 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 fab3 	bl	80014d0 <MX_GPIO_Init>
  MX_UART5_Init();
 8000f6a:	f000 fa33 	bl	80013d4 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000f6e:	f000 fa85 	bl	800147c <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8000f72:	f000 f8c7 	bl	8001104 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000f76:	f000 fa57 	bl	8001428 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f7a:	f000 f915 	bl	80011a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f7e:	f000 f977 	bl	8001270 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f82:	f000 f9d9 	bl	8001338 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 8000f86:	4b26      	ldr	r3, [pc, #152]	; (8001020 <main+0xcc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <main+0xcc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0220 	orr.w	r2, r2, #32
 8000f94:	60da      	str	r2, [r3, #12]
  ESP_RESET();
 8000f96:	f000 fc29 	bl	80017ec <ESP_RESET>
  HAL_Delay(1000);
 8000f9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9e:	f001 feff 	bl	8002da0 <HAL_Delay>
  HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000fa2:	4820      	ldr	r0, [pc, #128]	; (8001024 <main+0xd0>)
 8000fa4:	f7ff f934 	bl	8000210 <strlen>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb0:	491c      	ldr	r1, [pc, #112]	; (8001024 <main+0xd0>)
 8000fb2:	481d      	ldr	r0, [pc, #116]	; (8001028 <main+0xd4>)
 8000fb4:	f004 fbe3 	bl	800577e <HAL_UART_Transmit>
  ESP_Clear_Buffer();
 8000fb8:	f000 fd9a 	bl	8001af0 <ESP_Clear_Buffer>
  ESP_Nodemcu_Init();
 8000fbc:	f000 fc44 	bl	8001848 <ESP_Nodemcu_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 8000fc0:	481a      	ldr	r0, [pc, #104]	; (800102c <main+0xd8>)
 8000fc2:	f003 fba3 	bl	800470c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4819      	ldr	r0, [pc, #100]	; (8001030 <main+0xdc>)
 8000fca:	f003 fc5f 	bl	800488c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4817      	ldr	r0, [pc, #92]	; (8001030 <main+0xdc>)
 8000fd2:	f003 fc5b 	bl	800488c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4816      	ldr	r0, [pc, #88]	; (8001034 <main+0xe0>)
 8000fda:	f003 fc57 	bl	800488c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fde:	2104      	movs	r1, #4
 8000fe0:	4814      	ldr	r0, [pc, #80]	; (8001034 <main+0xe0>)
 8000fe2:	f003 fc53 	bl	800488c <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <main+0xe4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <main+0xe4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <main+0xe4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <main+0xe4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(messageHandlerFlag)
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <main+0xe8>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <main+0xc2>
	{
	  messageHandlerFlag = 0;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <main+0xe8>)
 8001008:	2200      	movs	r2, #0
 800100a:	801a      	strh	r2, [r3, #0]
	  netTimeout = 0;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <main+0xec>)
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]
	  messageHandler();
 8001012:	f000 fddd 	bl	8001bd0 <messageHandler>
	}
	BMS_update();
 8001016:	f000 faf3 	bl	8001600 <BMS_update>
	  if(messageHandlerFlag)
 800101a:	e7f0      	b.n	8000ffe <main+0xaa>
 800101c:	20000138 	.word	0x20000138
 8001020:	200000f4 	.word	0x200000f4
 8001024:	20000258 	.word	0x20000258
 8001028:	20000214 	.word	0x20000214
 800102c:	200000ac 	.word	0x200000ac
 8001030:	20000a2c 	.word	0x20000a2c
 8001034:	20000140 	.word	0x20000140
 8001038:	40010000 	.word	0x40010000
 800103c:	20000090 	.word	0x20000090
 8001040:	20000092 	.word	0x20000092

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	; 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2234      	movs	r2, #52	; 0x34
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f005 fb7e 	bl	8006754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <SystemClock_Config+0xb8>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <SystemClock_Config+0xb8>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <SystemClock_Config+0xb8>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <SystemClock_Config+0xbc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <SystemClock_Config+0xbc>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <SystemClock_Config+0xbc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ac:	2310      	movs	r3, #16
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f839 	bl	8004130 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010c4:	f000 fb8c 	bl	80017e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fdae 	bl	8003c44 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010ee:	f000 fb77 	bl	80017e0 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3750      	adds	r7, #80	; 0x50
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_ADC3_Init+0x98>)
 8001118:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <MX_ADC3_Init+0x9c>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_ADC3_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_ADC3_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_ADC3_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_ADC3_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_ADC3_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_ADC3_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_ADC3_Init+0x98>)
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <MX_ADC3_Init+0xa0>)
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_ADC3_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_ADC3_Init+0x98>)
 8001150:	2201      	movs	r2, #1
 8001152:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_ADC3_Init+0x98>)
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_ADC3_Init+0x98>)
 800115e:	2201      	movs	r2, #1
 8001160:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001162:	480e      	ldr	r0, [pc, #56]	; (800119c <MX_ADC3_Init+0x98>)
 8001164:	f001 fe40 	bl	8002de8 <HAL_ADC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 fb37 	bl	80017e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001172:	2305      	movs	r3, #5
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_ADC3_Init+0x98>)
 8001184:	f001 ffde 	bl	8003144 <HAL_ADC_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800118e:	f000 fb27 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001cc 	.word	0x200001cc
 80011a0:	40012200 	.word	0x40012200
 80011a4:	0f000001 	.word	0x0f000001

080011a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <MX_TIM2_Init+0xc4>)
 80011cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <MX_TIM2_Init+0xc4>)
 80011d4:	220f      	movs	r2, #15
 80011d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <MX_TIM2_Init+0xc4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <MX_TIM2_Init+0xc4>)
 80011e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80011e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_TIM2_Init+0xc4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_TIM2_Init+0xc4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011f2:	481e      	ldr	r0, [pc, #120]	; (800126c <MX_TIM2_Init+0xc4>)
 80011f4:	f003 fafa 	bl	80047ec <HAL_TIM_PWM_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011fe:	f000 faef 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	4619      	mov	r1, r3
 8001210:	4816      	ldr	r0, [pc, #88]	; (800126c <MX_TIM2_Init+0xc4>)
 8001212:	f004 f9d7 	bl	80055c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800121c:	f000 fae0 	bl	80017e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001220:	2360      	movs	r3, #96	; 0x60
 8001222:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM2_Init+0xc4>)
 8001238:	f003 fcf8 	bl	8004c2c <HAL_TIM_PWM_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001242:	f000 facd 	bl	80017e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2204      	movs	r2, #4
 800124a:	4619      	mov	r1, r3
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <MX_TIM2_Init+0xc4>)
 800124e:	f003 fced 	bl	8004c2c <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001258:	f000 fac2 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <MX_TIM2_Init+0xc4>)
 800125e:	f001 fabf 	bl	80027e0 <HAL_TIM_MspPostInit>

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000a2c 	.word	0x20000a2c

08001270 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	615a      	str	r2, [r3, #20]
 8001290:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <MX_TIM3_Init+0xc0>)
 8001294:	4a27      	ldr	r2, [pc, #156]	; (8001334 <MX_TIM3_Init+0xc4>)
 8001296:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <MX_TIM3_Init+0xc0>)
 800129a:	220f      	movs	r2, #15
 800129c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80012aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b8:	481d      	ldr	r0, [pc, #116]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012ba:	f003 fa97 	bl	80047ec <HAL_TIM_PWM_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012c4:	f000 fa8c 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4619      	mov	r1, r3
 80012d6:	4816      	ldr	r0, [pc, #88]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012d8:	f004 f974 	bl	80055c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012e2:	f000 fa7d 	bl	80017e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e6:	2360      	movs	r3, #96	; 0x60
 80012e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012fe:	f003 fc95 	bl	8004c2c <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001308:	f000 fa6a 	bl	80017e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2204      	movs	r2, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <MX_TIM3_Init+0xc0>)
 8001314:	f003 fc8a 	bl	8004c2c <HAL_TIM_PWM_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800131e:	f000 fa5f 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001322:	4803      	ldr	r0, [pc, #12]	; (8001330 <MX_TIM3_Init+0xc0>)
 8001324:	f001 fa5c 	bl	80027e0 <HAL_TIM_MspPostInit>

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000140 	.word	0x20000140
 8001334:	40000400 	.word	0x40000400

08001338 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_TIM4_Init+0x94>)
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <MX_TIM4_Init+0x98>)
 8001358:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600-1;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_TIM4_Init+0x94>)
 800135c:	f240 623f 	movw	r2, #1599	; 0x63f
 8001360:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_TIM4_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_TIM4_Init+0x94>)
 800136a:	f242 720f 	movw	r2, #9999	; 0x270f
 800136e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_TIM4_Init+0x94>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_TIM4_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800137c:	4813      	ldr	r0, [pc, #76]	; (80013cc <MX_TIM4_Init+0x94>)
 800137e:	f003 f975 	bl	800466c <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001388:	f000 fa2a 	bl	80017e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_TIM4_Init+0x94>)
 800139a:	f003 fd09 	bl	8004db0 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80013a4:	f000 fa1c 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM4_Init+0x94>)
 80013b6:	f004 f905 	bl	80055c4 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80013c0:	f000 fa0e 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200000ac 	.word	0x200000ac
 80013d0:	40000800 	.word	0x40000800

080013d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_UART5_Init+0x4c>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_UART5_Init+0x50>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_UART5_Init+0x4c>)
 80013e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_UART5_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_UART5_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_UART5_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_UART5_Init+0x4c>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_UART5_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_UART5_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_UART5_Init+0x4c>)
 800140c:	f004 f96a 	bl	80056e4 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001416:	f000 f9e3 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000188 	.word	0x20000188
 8001424:	40005000 	.word	0x40005000

08001428 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_USART1_UART_Init+0x4c>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <MX_USART1_UART_Init+0x50>)
 8001430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <MX_USART1_UART_Init+0x4c>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_USART1_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_USART1_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_USART1_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_USART1_UART_Init+0x4c>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_USART1_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_USART1_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_USART1_UART_Init+0x4c>)
 8001460:	f004 f940 	bl	80056e4 <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800146a:	f000 f9b9 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000214 	.word	0x20000214
 8001478:	40011000 	.word	0x40011000

0800147c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_USART3_UART_Init+0x4c>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_USART3_UART_Init+0x50>)
 8001484:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_USART3_UART_Init+0x4c>)
 8001488:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800148c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_USART3_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_USART3_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_USART3_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_USART3_UART_Init+0x4c>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_USART3_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_USART3_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART3_UART_Init+0x4c>)
 80014b4:	f004 f916 	bl	80056e4 <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014be:	f000 f98f 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000f4 	.word	0x200000f4
 80014cc:	40004800 	.word	0x40004800

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <MX_GPIO_Init+0x11c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a3f      	ldr	r2, [pc, #252]	; (80015ec <MX_GPIO_Init+0x11c>)
 80014f0:	f043 0310 	orr.w	r3, r3, #16
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <MX_GPIO_Init+0x11c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <MX_GPIO_Init+0x11c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a38      	ldr	r2, [pc, #224]	; (80015ec <MX_GPIO_Init+0x11c>)
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <MX_GPIO_Init+0x11c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b32      	ldr	r3, [pc, #200]	; (80015ec <MX_GPIO_Init+0x11c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a31      	ldr	r2, [pc, #196]	; (80015ec <MX_GPIO_Init+0x11c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <MX_GPIO_Init+0x11c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <MX_GPIO_Init+0x11c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a2a      	ldr	r2, [pc, #168]	; (80015ec <MX_GPIO_Init+0x11c>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <MX_GPIO_Init+0x11c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <MX_GPIO_Init+0x11c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a23      	ldr	r2, [pc, #140]	; (80015ec <MX_GPIO_Init+0x11c>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <MX_GPIO_Init+0x11c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001572:	2200      	movs	r2, #0
 8001574:	217c      	movs	r1, #124	; 0x7c
 8001576:	481e      	ldr	r0, [pc, #120]	; (80015f0 <MX_GPIO_Init+0x120>)
 8001578:	f002 fb4a 	bl	8003c10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	2120      	movs	r1, #32
 8001580:	481c      	ldr	r0, [pc, #112]	; (80015f4 <MX_GPIO_Init+0x124>)
 8001582:	f002 fb45 	bl	8003c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	2140      	movs	r1, #64	; 0x40
 800158a:	481b      	ldr	r0, [pc, #108]	; (80015f8 <MX_GPIO_Init+0x128>)
 800158c:	f002 fb40 	bl	8003c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001590:	237c      	movs	r3, #124	; 0x7c
 8001592:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4812      	ldr	r0, [pc, #72]	; (80015f0 <MX_GPIO_Init+0x120>)
 80015a8:	f002 f99e 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015ac:	2320      	movs	r3, #32
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	480c      	ldr	r0, [pc, #48]	; (80015f4 <MX_GPIO_Init+0x124>)
 80015c4:	f002 f990 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c8:	2340      	movs	r3, #64	; 0x40
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <MX_GPIO_Init+0x128>)
 80015e0:	f002 f982 	bl	80038e8 <HAL_GPIO_Init>

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40020000 	.word	0x40020000
 80015fc:	00000000 	.word	0x00000000

08001600 <BMS_update>:

/* USER CODE BEGIN 4 */
void BMS_update(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
    float raw;
    if(HAL_ADC_Start(&hadc3) == HAL_OK) {
 8001606:	486e      	ldr	r0, [pc, #440]	; (80017c0 <BMS_update+0x1c0>)
 8001608:	f001 fc32 	bl	8002e70 <HAL_ADC_Start>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <BMS_update+0x32>
        if (HAL_ADC_PollForConversion(&hadc3, 1000000) == HAL_OK)
 8001612:	496c      	ldr	r1, [pc, #432]	; (80017c4 <BMS_update+0x1c4>)
 8001614:	486a      	ldr	r0, [pc, #424]	; (80017c0 <BMS_update+0x1c0>)
 8001616:	f001 fcfd 	bl	8003014 <HAL_ADC_PollForConversion>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <BMS_update+0x32>
        {
            raw = HAL_ADC_GetValue(&hadc3);
 8001620:	4867      	ldr	r0, [pc, #412]	; (80017c0 <BMS_update+0x1c0>)
 8001622:	f001 fd82 	bl	800312a <HAL_ADC_GetValue>
 8001626:	ee07 0a90 	vmov	s15, r0
 800162a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162e:	edc7 7a01 	vstr	s15, [r7, #4]
        }
    }
    float Vbatt2 = (raw / 4096.0) * 3.35345006 * 6;
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7fe ffa8 	bl	8000588 <__aeabi_f2d>
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <BMS_update+0x1c8>)
 800163e:	f7ff f925 	bl	800088c <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a353      	add	r3, pc, #332	; (adr r3, 8001798 <BMS_update+0x198>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe fff2 	bl	8000638 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b5a      	ldr	r3, [pc, #360]	; (80017cc <BMS_update+0x1cc>)
 8001662:	f7fe ffe9 	bl	8000638 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff faa5 	bl	8000bbc <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	603b      	str	r3, [r7, #0]
    percent = (int)(((Vbatt2-12) / 3.0) * 100);
 8001676:	edd7 7a00 	vldr	s15, [r7]
 800167a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800167e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001682:	ee17 0a90 	vmov	r0, s15
 8001686:	f7fe ff7f 	bl	8000588 <__aeabi_f2d>
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <BMS_update+0x1d0>)
 8001690:	f7ff f8fc 	bl	800088c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <BMS_update+0x1d4>)
 80016a2:	f7fe ffc9 	bl	8000638 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fa5d 	bl	8000b6c <__aeabi_d2iz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <BMS_update+0x1d8>)
 80016b6:	6013      	str	r3, [r2, #0]
    //12.4, 12.8, 13.2, 13.6, 14
    if (Vbatt2 > 14)
 80016b8:	edd7 7a00 	vldr	s15, [r7]
 80016bc:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80016c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c8:	dd05      	ble.n	80016d6 <BMS_update+0xd6>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 1);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2104      	movs	r1, #4
 80016ce:	4843      	ldr	r0, [pc, #268]	; (80017dc <BMS_update+0x1dc>)
 80016d0:	f002 fa9e 	bl	8003c10 <HAL_GPIO_WritePin>
 80016d4:	e004      	b.n	80016e0 <BMS_update+0xe0>
    else
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2104      	movs	r1, #4
 80016da:	4840      	ldr	r0, [pc, #256]	; (80017dc <BMS_update+0x1dc>)
 80016dc:	f002 fa98 	bl	8003c10 <HAL_GPIO_WritePin>

    if (Vbatt2 > 13.6)
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f7fe ff51 	bl	8000588 <__aeabi_f2d>
 80016e6:	a32e      	add	r3, pc, #184	; (adr r3, 80017a0 <BMS_update+0x1a0>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff fa34 	bl	8000b58 <__aeabi_dcmpgt>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <BMS_update+0x102>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2108      	movs	r1, #8
 80016fa:	4838      	ldr	r0, [pc, #224]	; (80017dc <BMS_update+0x1dc>)
 80016fc:	f002 fa88 	bl	8003c10 <HAL_GPIO_WritePin>
 8001700:	e004      	b.n	800170c <BMS_update+0x10c>
    else
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2108      	movs	r1, #8
 8001706:	4835      	ldr	r0, [pc, #212]	; (80017dc <BMS_update+0x1dc>)
 8001708:	f002 fa82 	bl	8003c10 <HAL_GPIO_WritePin>

    if (Vbatt2 > 13.2)
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f7fe ff3b 	bl	8000588 <__aeabi_f2d>
 8001712:	a325      	add	r3, pc, #148	; (adr r3, 80017a8 <BMS_update+0x1a8>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7ff fa1e 	bl	8000b58 <__aeabi_dcmpgt>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <BMS_update+0x12e>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
 8001722:	2201      	movs	r2, #1
 8001724:	2110      	movs	r1, #16
 8001726:	482d      	ldr	r0, [pc, #180]	; (80017dc <BMS_update+0x1dc>)
 8001728:	f002 fa72 	bl	8003c10 <HAL_GPIO_WritePin>
 800172c:	e004      	b.n	8001738 <BMS_update+0x138>
    else
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2110      	movs	r1, #16
 8001732:	482a      	ldr	r0, [pc, #168]	; (80017dc <BMS_update+0x1dc>)
 8001734:	f002 fa6c 	bl	8003c10 <HAL_GPIO_WritePin>

    if (Vbatt2 > 12.8)
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f7fe ff25 	bl	8000588 <__aeabi_f2d>
 800173e:	a31c      	add	r3, pc, #112	; (adr r3, 80017b0 <BMS_update+0x1b0>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff fa08 	bl	8000b58 <__aeabi_dcmpgt>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <BMS_update+0x15a>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 1);
 800174e:	2201      	movs	r2, #1
 8001750:	2120      	movs	r1, #32
 8001752:	4822      	ldr	r0, [pc, #136]	; (80017dc <BMS_update+0x1dc>)
 8001754:	f002 fa5c 	bl	8003c10 <HAL_GPIO_WritePin>
 8001758:	e004      	b.n	8001764 <BMS_update+0x164>
    else
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2120      	movs	r1, #32
 800175e:	481f      	ldr	r0, [pc, #124]	; (80017dc <BMS_update+0x1dc>)
 8001760:	f002 fa56 	bl	8003c10 <HAL_GPIO_WritePin>

    if (Vbatt2 > 12.4)
 8001764:	6838      	ldr	r0, [r7, #0]
 8001766:	f7fe ff0f 	bl	8000588 <__aeabi_f2d>
 800176a:	a313      	add	r3, pc, #76	; (adr r3, 80017b8 <BMS_update+0x1b8>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7ff f9f2 	bl	8000b58 <__aeabi_dcmpgt>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <BMS_update+0x186>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);
 800177a:	2201      	movs	r2, #1
 800177c:	2140      	movs	r1, #64	; 0x40
 800177e:	4817      	ldr	r0, [pc, #92]	; (80017dc <BMS_update+0x1dc>)
 8001780:	f002 fa46 	bl	8003c10 <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 0);
}
 8001784:	e004      	b.n	8001790 <BMS_update+0x190>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2140      	movs	r1, #64	; 0x40
 800178a:	4814      	ldr	r0, [pc, #80]	; (80017dc <BMS_update+0x1dc>)
 800178c:	f002 fa40 	bl	8003c10 <HAL_GPIO_WritePin>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	a003c100 	.word	0xa003c100
 800179c:	400ad3dd 	.word	0x400ad3dd
 80017a0:	33333333 	.word	0x33333333
 80017a4:	402b3333 	.word	0x402b3333
 80017a8:	66666666 	.word	0x66666666
 80017ac:	402a6666 	.word	0x402a6666
 80017b0:	9999999a 	.word	0x9999999a
 80017b4:	40299999 	.word	0x40299999
 80017b8:	cccccccd 	.word	0xcccccccd
 80017bc:	4028cccc 	.word	0x4028cccc
 80017c0:	200001cc 	.word	0x200001cc
 80017c4:	000f4240 	.word	0x000f4240
 80017c8:	40b00000 	.word	0x40b00000
 80017cc:	40180000 	.word	0x40180000
 80017d0:	40080000 	.word	0x40080000
 80017d4:	40590000 	.word	0x40590000
 80017d8:	2000013c 	.word	0x2000013c
 80017dc:	40021000 	.word	0x40021000

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <Error_Handler+0x8>
	...

080017ec <ESP_RESET>:
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
	__enable_irq();
}

void ESP_RESET()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	resetTime = 6;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <ESP_RESET+0x48>)
 80017f2:	2206      	movs	r2, #6
 80017f4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2120      	movs	r1, #32
 80017fa:	480f      	ldr	r0, [pc, #60]	; (8001838 <ESP_RESET+0x4c>)
 80017fc:	f002 fa08 	bl	8003c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2140      	movs	r1, #64	; 0x40
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <ESP_RESET+0x50>)
 8001806:	f002 fa03 	bl	8003c10 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 800180a:	201e      	movs	r0, #30
 800180c:	f001 fac8 	bl	8002da0 <HAL_Delay>
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	2120      	movs	r1, #32
 8001814:	4808      	ldr	r0, [pc, #32]	; (8001838 <ESP_RESET+0x4c>)
 8001816:	f002 f9fb 	bl	8003c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2140      	movs	r1, #64	; 0x40
 800181e:	4807      	ldr	r0, [pc, #28]	; (800183c <ESP_RESET+0x50>)
 8001820:	f002 f9f6 	bl	8003c10 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(pc_uart, "ESP Reset\r\n", strlen( "ESP Reset\r\n"), 100);
 8001824:	2364      	movs	r3, #100	; 0x64
 8001826:	220b      	movs	r2, #11
 8001828:	4905      	ldr	r1, [pc, #20]	; (8001840 <ESP_RESET+0x54>)
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <ESP_RESET+0x58>)
 800182c:	f003 ffa7 	bl	800577e <HAL_UART_Transmit>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000138 	.word	0x20000138
 8001838:	40021400 	.word	0x40021400
 800183c:	40020000 	.word	0x40020000
 8001840:	080070f4 	.word	0x080070f4
 8001844:	20000214 	.word	0x20000214

08001848 <ESP_Nodemcu_Init>:

void ESP_Nodemcu_Init()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
	int wait_time = 1000;
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	607b      	str	r3, [r7, #4]
	ESP_RESET();
 8001854:	f7ff ffca 	bl	80017ec <ESP_RESET>
	HAL_Delay(wait_time * 1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4618      	mov	r0, r3
 800185c:	f001 faa0 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8001860:	4894      	ldr	r0, [pc, #592]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001862:	f7fe fcd5 	bl	8000210 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	4991      	ldr	r1, [pc, #580]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001870:	4891      	ldr	r0, [pc, #580]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 8001872:	f003 ff84 	bl	800577e <HAL_UART_Transmit>
//	HAL_UART_Transmit(pc_uart, "Test\r\n", strlen( "Test\r\n"), 100);
	ESP_Clear_Buffer();
 8001876:	f000 f93b 	bl	8001af0 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"wifi.setmode(wifi.STATION)\r\n", strlen("wifi.setmode(wifi.STATION)\r\n"), 100);
 800187a:	2364      	movs	r3, #100	; 0x64
 800187c:	221c      	movs	r2, #28
 800187e:	498f      	ldr	r1, [pc, #572]	; (8001abc <ESP_Nodemcu_Init+0x274>)
 8001880:	488f      	ldr	r0, [pc, #572]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 8001882:	f003 ff7c 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fa89 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 800188e:	4889      	ldr	r0, [pc, #548]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001890:	f7fe fcbe 	bl	8000210 <strlen>
 8001894:	4603      	mov	r3, r0
 8001896:	b29a      	uxth	r2, r3
 8001898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189c:	4985      	ldr	r1, [pc, #532]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 800189e:	4886      	ldr	r0, [pc, #536]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 80018a0:	f003 ff6d 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 80018a4:	f000 f924 	bl	8001af0 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"wifi.sta.config(\"MichelCel\", \"michel123\")\r\n", strlen("wifi.sta.config(\"MichelCel\", \"michel123\")\r\n"), 100);
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	222b      	movs	r2, #43	; 0x2b
 80018ac:	4985      	ldr	r1, [pc, #532]	; (8001ac4 <ESP_Nodemcu_Init+0x27c>)
 80018ae:	4884      	ldr	r0, [pc, #528]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 80018b0:	f003 ff65 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fa72 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 80018bc:	487d      	ldr	r0, [pc, #500]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 80018be:	f7fe fca7 	bl	8000210 <strlen>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ca:	497a      	ldr	r1, [pc, #488]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 80018cc:	487a      	ldr	r0, [pc, #488]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 80018ce:	f003 ff56 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 80018d2:	f000 f90d 	bl	8001af0 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"wifi.sta.connect()\r\n", strlen("wifi.sta.connect()\r\n"), 100);
 80018d6:	2364      	movs	r3, #100	; 0x64
 80018d8:	2214      	movs	r2, #20
 80018da:	497b      	ldr	r1, [pc, #492]	; (8001ac8 <ESP_Nodemcu_Init+0x280>)
 80018dc:	4878      	ldr	r0, [pc, #480]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 80018de:	f003 ff4e 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time * 2);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fa5a 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 80018ec:	4871      	ldr	r0, [pc, #452]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 80018ee:	f7fe fc8f 	bl	8000210 <strlen>
 80018f2:	4603      	mov	r3, r0
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	496e      	ldr	r1, [pc, #440]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 80018fc:	486e      	ldr	r0, [pc, #440]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 80018fe:	f003 ff3e 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8001902:	f000 f8f5 	bl	8001af0 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "bat = 100\r\n", strlen("bat = 100\r\n"), 1000);
 8001906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190a:	220b      	movs	r2, #11
 800190c:	496f      	ldr	r1, [pc, #444]	; (8001acc <ESP_Nodemcu_Init+0x284>)
 800190e:	486c      	ldr	r0, [pc, #432]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 8001910:	f003 ff35 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4618      	mov	r0, r3
 8001918:	f001 fa42 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 800191c:	4865      	ldr	r0, [pc, #404]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 800191e:	f7fe fc77 	bl	8000210 <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	b29a      	uxth	r2, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	4962      	ldr	r1, [pc, #392]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 800192c:	4862      	ldr	r0, [pc, #392]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 800192e:	f003 ff26 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8001932:	f000 f8dd 	bl	8001af0 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"srv = net.createServer(net.TCP)\r\n", strlen("srv = net.createServer(net.TCP)\r\n"), 100);
 8001936:	2364      	movs	r3, #100	; 0x64
 8001938:	2221      	movs	r2, #33	; 0x21
 800193a:	4965      	ldr	r1, [pc, #404]	; (8001ad0 <ESP_Nodemcu_Init+0x288>)
 800193c:	4860      	ldr	r0, [pc, #384]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 800193e:	f003 ff1e 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	f001 fa2b 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 800194a:	485a      	ldr	r0, [pc, #360]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 800194c:	f7fe fc60 	bl	8000210 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001958:	4956      	ldr	r1, [pc, #344]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 800195a:	4857      	ldr	r0, [pc, #348]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 800195c:	f003 ff0f 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8001960:	f000 f8c6 	bl	8001af0 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "srv:listen(80, function(conn)\r\n", strlen("srv:listen(80, function(conn)\r\n"), 100);
 8001964:	2364      	movs	r3, #100	; 0x64
 8001966:	221f      	movs	r2, #31
 8001968:	495a      	ldr	r1, [pc, #360]	; (8001ad4 <ESP_Nodemcu_Init+0x28c>)
 800196a:	4855      	ldr	r0, [pc, #340]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 800196c:	f003 ff07 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fa14 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8001978:	484e      	ldr	r0, [pc, #312]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 800197a:	f7fe fc49 	bl	8000210 <strlen>
 800197e:	4603      	mov	r3, r0
 8001980:	b29a      	uxth	r2, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	494b      	ldr	r1, [pc, #300]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001988:	484b      	ldr	r0, [pc, #300]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 800198a:	f003 fef8 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 800198e:	f000 f8af 	bl	8001af0 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "conn:on(\"receive\", function(sck, payload)\r\n", strlen("conn:on(\"receive\", function(sck, payload)\r\n"), 100);
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	222b      	movs	r2, #43	; 0x2b
 8001996:	4950      	ldr	r1, [pc, #320]	; (8001ad8 <ESP_Nodemcu_Init+0x290>)
 8001998:	4849      	ldr	r0, [pc, #292]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 800199a:	f003 fef0 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 f9fd 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 80019a6:	4843      	ldr	r0, [pc, #268]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 80019a8:	f7fe fc32 	bl	8000210 <strlen>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b4:	493f      	ldr	r1, [pc, #252]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 80019b6:	4840      	ldr	r0, [pc, #256]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 80019b8:	f003 fee1 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 80019bc:	f000 f898 	bl	8001af0 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "print(payload)\r\n", strlen("print(payload)\r\n"), 100);
 80019c0:	2364      	movs	r3, #100	; 0x64
 80019c2:	2210      	movs	r2, #16
 80019c4:	4945      	ldr	r1, [pc, #276]	; (8001adc <ESP_Nodemcu_Init+0x294>)
 80019c6:	483e      	ldr	r0, [pc, #248]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 80019c8:	f003 fed9 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 f9e6 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 80019d4:	4837      	ldr	r0, [pc, #220]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 80019d6:	f7fe fc1b 	bl	8000210 <strlen>
 80019da:	4603      	mov	r3, r0
 80019dc:	b29a      	uxth	r2, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	4934      	ldr	r1, [pc, #208]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 80019e4:	4834      	ldr	r0, [pc, #208]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 80019e6:	f003 feca 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 80019ea:	f000 f881 	bl	8001af0 <ESP_Clear_Buffer>
//	HAL_UART_Transmit(wifi_uart, "if string.find(payload, \"GET\") ~= nil then\r\n", strlen("if string.find(payload, \"GET\") ~= nil then\r\n"), 100);
//	HAL_Delay(wait_time);
//	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
//	ESP_Clear_Buffer();
	HAL_UART_Transmit(wifi_uart, "sck:send(\"HTTP/1.0 200 OK\\r\\n\Content-Type: text/html\\r\\n\\r\\nBattery: \" .. bat .. \"%\")\r\n", strlen("sck:send(\"HTTP/1.0 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\nBattery: \" .. bat .. \"%\")\r\n"), 100);
 80019ee:	2364      	movs	r3, #100	; 0x64
 80019f0:	2257      	movs	r2, #87	; 0x57
 80019f2:	493b      	ldr	r1, [pc, #236]	; (8001ae0 <ESP_Nodemcu_Init+0x298>)
 80019f4:	4832      	ldr	r0, [pc, #200]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 80019f6:	f003 fec2 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 f9cf 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8001a02:	482c      	ldr	r0, [pc, #176]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001a04:	f7fe fc04 	bl	8000210 <strlen>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a10:	4928      	ldr	r1, [pc, #160]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001a12:	4829      	ldr	r0, [pc, #164]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 8001a14:	f003 feb3 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8001a18:	f000 f86a 	bl	8001af0 <ESP_Clear_Buffer>
//	ESP_Clear_Buffer();
//	HAL_UART_Transmit(wifi_uart, "end\r\n", strlen("end\r\n"), 100);
//	HAL_Delay(wait_time);
//	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
//	ESP_Clear_Buffer();
	HAL_UART_Transmit(wifi_uart, "end)\r\n", strlen("end)\r\n"), 100);
 8001a1c:	2364      	movs	r3, #100	; 0x64
 8001a1e:	2206      	movs	r2, #6
 8001a20:	4930      	ldr	r1, [pc, #192]	; (8001ae4 <ESP_Nodemcu_Init+0x29c>)
 8001a22:	4827      	ldr	r0, [pc, #156]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 8001a24:	f003 feab 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 f9b8 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8001a30:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001a32:	f7fe fbed 	bl	8000210 <strlen>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	491d      	ldr	r1, [pc, #116]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001a40:	481d      	ldr	r0, [pc, #116]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 8001a42:	f003 fe9c 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8001a46:	f000 f853 	bl	8001af0 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "conn:on(\"sent\", function(sck) sck:close() end)\r\n", strlen("conn:on(\"sent\", function(sck) sck:close() end)\r\n"), 100);
 8001a4a:	2364      	movs	r3, #100	; 0x64
 8001a4c:	2230      	movs	r2, #48	; 0x30
 8001a4e:	4926      	ldr	r1, [pc, #152]	; (8001ae8 <ESP_Nodemcu_Init+0x2a0>)
 8001a50:	481b      	ldr	r0, [pc, #108]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 8001a52:	f003 fe94 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 f9a1 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8001a5e:	4815      	ldr	r0, [pc, #84]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001a60:	f7fe fbd6 	bl	8000210 <strlen>
 8001a64:	4603      	mov	r3, r0
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6c:	4911      	ldr	r1, [pc, #68]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001a6e:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 8001a70:	f003 fe85 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8001a74:	f000 f83c 	bl	8001af0 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "end)\r\n", strlen("end)\r\n"), 100);
 8001a78:	2364      	movs	r3, #100	; 0x64
 8001a7a:	2206      	movs	r2, #6
 8001a7c:	4919      	ldr	r1, [pc, #100]	; (8001ae4 <ESP_Nodemcu_Init+0x29c>)
 8001a7e:	4810      	ldr	r0, [pc, #64]	; (8001ac0 <ESP_Nodemcu_Init+0x278>)
 8001a80:	f003 fe7d 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 f98a 	bl	8002da0 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8001a8c:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001a8e:	f7fe fbbf 	bl	8000210 <strlen>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	4906      	ldr	r1, [pc, #24]	; (8001ab4 <ESP_Nodemcu_Init+0x26c>)
 8001a9c:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <ESP_Nodemcu_Init+0x270>)
 8001a9e:	f003 fe6e 	bl	800577e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8001aa2:	f000 f825 	bl	8001af0 <ESP_Clear_Buffer>
	resetTime = 5;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <ESP_Nodemcu_Init+0x2a4>)
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	601a      	str	r2, [r3, #0]
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000258 	.word	0x20000258
 8001ab8:	20000214 	.word	0x20000214
 8001abc:	08007100 	.word	0x08007100
 8001ac0:	200000f4 	.word	0x200000f4
 8001ac4:	08007120 	.word	0x08007120
 8001ac8:	0800714c 	.word	0x0800714c
 8001acc:	08007164 	.word	0x08007164
 8001ad0:	08007170 	.word	0x08007170
 8001ad4:	08007194 	.word	0x08007194
 8001ad8:	080071b4 	.word	0x080071b4
 8001adc:	080071e0 	.word	0x080071e0
 8001ae0:	080071f4 	.word	0x080071f4
 8001ae4:	0800724c 	.word	0x0800724c
 8001ae8:	08007254 	.word	0x08007254
 8001aec:	20000138 	.word	0x20000138

08001af0 <ESP_Clear_Buffer>:
//	HAL_Delay(2000);
	resetTime = 2;
}

void ESP_Clear_Buffer()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	memset(buffer, 0, 2000);
 8001af4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001af8:	2100      	movs	r1, #0
 8001afa:	4804      	ldr	r0, [pc, #16]	; (8001b0c <ESP_Clear_Buffer+0x1c>)
 8001afc:	f004 fe2a 	bl	8006754 <memset>
	buffer_index = 0;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <ESP_Clear_Buffer+0x20>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	801a      	strh	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000258 	.word	0x20000258
 8001b10:	2000008c 	.word	0x2000008c

08001b14 <string_compare>:
	if(percent > 100.0f)
		percent = 100.0f;
}

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
	 uint16_t comVAR=0, i;
 8001b22:	2300      	movs	r3, #0
 8001b24:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	82bb      	strh	r3, [r7, #20]
 8001b2a:	e012      	b.n	8001b52 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8001b2c:	8abb      	ldrh	r3, [r7, #20]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	8abb      	ldrh	r3, [r7, #20]
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	440b      	add	r3, r1
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d103      	bne.n	8001b48 <string_compare+0x34>
	   	  		  comVAR++;
 8001b40:	8afb      	ldrh	r3, [r7, #22]
 8001b42:	3301      	adds	r3, #1
 8001b44:	82fb      	strh	r3, [r7, #22]
 8001b46:	e001      	b.n	8001b4c <string_compare+0x38>
	   	  	  else comVAR=0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 8001b4c:	8abb      	ldrh	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	82bb      	strh	r3, [r7, #20]
 8001b52:	8aba      	ldrh	r2, [r7, #20]
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d3e8      	bcc.n	8001b2c <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8001b5a:	8afa      	ldrh	r2, [r7, #22]
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d101      	bne.n	8001b66 <string_compare+0x52>
		 	return 1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <string_compare+0x54>
	 else 	return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <string_contains>:

int string_contains(char bufferArray[], char searchedString[], uint16_t length)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	80fb      	strh	r3, [r7, #6]
	uint8_t result=0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	757b      	strb	r3, [r7, #21]
	for(uint16_t i=0; i<length; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	82fb      	strh	r3, [r7, #22]
 8001b8a:	e016      	b.n	8001bba <string_contains+0x46>
	{
		result = string_compare(&bufferArray[i], &searchedString[0], strlen(searchedString));
 8001b8c:	8afb      	ldrh	r3, [r7, #22]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	18d4      	adds	r4, r2, r3
 8001b92:	68b8      	ldr	r0, [r7, #8]
 8001b94:	f7fe fb3c 	bl	8000210 <strlen>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f7ff ffb7 	bl	8001b14 <string_compare>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	757b      	strb	r3, [r7, #21]
		if(result == 1)
 8001baa:	7d7b      	ldrb	r3, [r7, #21]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <string_contains+0x40>
			return i;
 8001bb0:	8afb      	ldrh	r3, [r7, #22]
 8001bb2:	e008      	b.n	8001bc6 <string_contains+0x52>
	for(uint16_t i=0; i<length; i++)
 8001bb4:	8afb      	ldrh	r3, [r7, #22]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	82fb      	strh	r3, [r7, #22]
 8001bba:	8afa      	ldrh	r2, [r7, #22]
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3e4      	bcc.n	8001b8c <string_contains+0x18>
	}
	return -1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
	...

08001bd0 <messageHandler>:
		return (int) buffer[position-1] -48;
	return 0;
}

void messageHandler()
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
	__HAL_UART_DISABLE_IT(wifi_uart, UART_IT_RXNE);
 8001bd6:	4bb8      	ldr	r3, [pc, #736]	; (8001eb8 <messageHandler+0x2e8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	4bb6      	ldr	r3, [pc, #728]	; (8001eb8 <messageHandler+0x2e8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0220 	bic.w	r2, r2, #32
 8001be4:	60da      	str	r2, [r3, #12]
	int position = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
	handle = 1;
 8001bea:	4bb4      	ldr	r3, [pc, #720]	; (8001ebc <messageHandler+0x2ec>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8001bf0:	48b3      	ldr	r0, [pc, #716]	; (8001ec0 <messageHandler+0x2f0>)
 8001bf2:	f7fe fb0d 	bl	8000210 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	49b0      	ldr	r1, [pc, #704]	; (8001ec0 <messageHandler+0x2f0>)
 8001c00:	48b0      	ldr	r0, [pc, #704]	; (8001ec4 <messageHandler+0x2f4>)
 8001c02:	f003 fdbc 	bl	800577e <HAL_UART_Transmit>
	char string3[20];
//	calculateBattery();
	float value = percent;
 8001c06:	4bb0      	ldr	r3, [pc, #704]	; (8001ec8 <messageHandler+0x2f8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	edc7 7a06 	vstr	s15, [r7, #24]
//	sprintf(string3, "bat = %d\r\n", (int)percent);
	sprintf(string3, "bat = %d\r\n", percent);
 8001c16:	4bac      	ldr	r3, [pc, #688]	; (8001ec8 <messageHandler+0x2f8>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	49ab      	ldr	r1, [pc, #684]	; (8001ecc <messageHandler+0x2fc>)
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f004 fda0 	bl	8006764 <siprintf>
	HAL_UART_Transmit(wifi_uart, string3, strlen(string3), 1000);
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe faf2 	bl	8000210 <strlen>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	1d39      	adds	r1, r7, #4
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	48a0      	ldr	r0, [pc, #640]	; (8001eb8 <messageHandler+0x2e8>)
 8001c38:	f003 fda1 	bl	800577e <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2104      	movs	r1, #4
 8001c40:	48a3      	ldr	r0, [pc, #652]	; (8001ed0 <messageHandler+0x300>)
 8001c42:	f001 ffe5 	bl	8003c10 <HAL_GPIO_WritePin>
	if((position = string_contains((char*)buffer, "SP", buffer_index))!= -1)
 8001c46:	4ba3      	ldr	r3, [pc, #652]	; (8001ed4 <messageHandler+0x304>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	49a2      	ldr	r1, [pc, #648]	; (8001ed8 <messageHandler+0x308>)
 8001c4e:	489c      	ldr	r0, [pc, #624]	; (8001ec0 <messageHandler+0x2f0>)
 8001c50:	f7ff ff90 	bl	8001b74 <string_contains>
 8001c54:	61f8      	str	r0, [r7, #28]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d01d      	beq.n	8001c9a <messageHandler+0xca>
	{
//		if (Vbatt2 > 14)
//        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 1);

		controlArm();
 8001c5e:	f000 fb1f 	bl	80022a0 <controlArm>
		resetServos();
 8001c62:	f000 fc7b 	bl	800255c <resetServos>
//
		speed = atoi((char*)&buffer[position + 2]);
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3302      	adds	r3, #2
 8001c6a:	4a95      	ldr	r2, [pc, #596]	; (8001ec0 <messageHandler+0x2f0>)
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fd42 	bl	80066f8 <atoi>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b98      	ldr	r3, [pc, #608]	; (8001edc <messageHandler+0x30c>)
 8001c7a:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = 0;
 8001c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c80:	2200      	movs	r2, #0
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8001c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c88:	2200      	movs	r2, #0
 8001c8a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 0;
 8001c8c:	4b94      	ldr	r3, [pc, #592]	; (8001ee0 <messageHandler+0x310>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8001c92:	4b93      	ldr	r3, [pc, #588]	; (8001ee0 <messageHandler+0x310>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
 8001c98:	e2dd      	b.n	8002256 <messageHandler+0x686>
	}
	else if((position = string_contains((char*)buffer, "F-", buffer_index)) != -1)
 8001c9a:	4b8e      	ldr	r3, [pc, #568]	; (8001ed4 <messageHandler+0x304>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4990      	ldr	r1, [pc, #576]	; (8001ee4 <messageHandler+0x314>)
 8001ca2:	4887      	ldr	r0, [pc, #540]	; (8001ec0 <messageHandler+0x2f0>)
 8001ca4:	f7ff ff66 	bl	8001b74 <string_contains>
 8001ca8:	61f8      	str	r0, [r7, #28]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d04b      	beq.n	8001d4a <messageHandler+0x17a>
	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
		speed = atoi((char*)&buffer[position + 2]);
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	4a82      	ldr	r2, [pc, #520]	; (8001ec0 <messageHandler+0x2f0>)
 8001cb8:	4413      	add	r3, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f004 fd1c 	bl	80066f8 <atoi>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b85      	ldr	r3, [pc, #532]	; (8001edc <messageHandler+0x30c>)
 8001cc6:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = motor_ratio(speed);
 8001cc8:	4b84      	ldr	r3, [pc, #528]	; (8001edc <messageHandler+0x30c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc49 	bl	8000564 <__aeabi_i2d>
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b84      	ldr	r3, [pc, #528]	; (8001ee8 <messageHandler+0x318>)
 8001cd8:	f7fe fdd8 	bl	800088c <__aeabi_ddiv>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	a372      	add	r3, pc, #456	; (adr r3, 8001eb0 <messageHandler+0x2e0>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f7fe fca5 	bl	8000638 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe ff39 	bl	8000b6c <__aeabi_d2iz>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d00:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8001d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d06:	2200      	movs	r2, #0
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = motor_ratio(speed);
 8001d0a:	4b74      	ldr	r3, [pc, #464]	; (8001edc <messageHandler+0x30c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc28 	bl	8000564 <__aeabi_i2d>
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b73      	ldr	r3, [pc, #460]	; (8001ee8 <messageHandler+0x318>)
 8001d1a:	f7fe fdb7 	bl	800088c <__aeabi_ddiv>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	a362      	add	r3, pc, #392	; (adr r3, 8001eb0 <messageHandler+0x2e0>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe fc84 	bl	8000638 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe ff18 	bl	8000b6c <__aeabi_d2iz>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <messageHandler+0x310>)
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8001d42:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <messageHandler+0x310>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38
 8001d48:	e285      	b.n	8002256 <messageHandler+0x686>
//		memset(outputString, 0, 100);
//		sprintf(outputString, "Battery: %d%%\n", motor_ratio(speed));
//		HAL_UART_Transmit(pc_uart, (uint8_t*)outputString, strlen(outputString), 100);
	}else if((position = string_contains((char*)buffer, "B-", buffer_index)) != -1)
 8001d4a:	4b62      	ldr	r3, [pc, #392]	; (8001ed4 <messageHandler+0x304>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4966      	ldr	r1, [pc, #408]	; (8001eec <messageHandler+0x31c>)
 8001d52:	485b      	ldr	r0, [pc, #364]	; (8001ec0 <messageHandler+0x2f0>)
 8001d54:	f7ff ff0e 	bl	8001b74 <string_contains>
 8001d58:	61f8      	str	r0, [r7, #28]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d04b      	beq.n	8001dfa <messageHandler+0x22a>
	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
		speed = atoi((char*)&buffer[position + 2]);
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3302      	adds	r3, #2
 8001d66:	4a56      	ldr	r2, [pc, #344]	; (8001ec0 <messageHandler+0x2f0>)
 8001d68:	4413      	add	r3, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 fcc4 	bl	80066f8 <atoi>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <messageHandler+0x30c>)
 8001d76:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = 0;
 8001d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = motor_ratio(speed);
 8001d80:	4b56      	ldr	r3, [pc, #344]	; (8001edc <messageHandler+0x30c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbed 	bl	8000564 <__aeabi_i2d>
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <messageHandler+0x318>)
 8001d90:	f7fe fd7c 	bl	800088c <__aeabi_ddiv>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	a344      	add	r3, pc, #272	; (adr r3, 8001eb0 <messageHandler+0x2e0>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	f7fe fc49 	bl	8000638 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe fedd 	bl	8000b6c <__aeabi_d2iz>
 8001db2:	4602      	mov	r2, r0
 8001db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 0;
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <messageHandler+0x310>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = motor_ratio(speed);
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <messageHandler+0x30c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fbcd 	bl	8000564 <__aeabi_i2d>
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <messageHandler+0x318>)
 8001dd0:	f7fe fd5c 	bl	800088c <__aeabi_ddiv>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	a334      	add	r3, pc, #208	; (adr r3, 8001eb0 <messageHandler+0x2e0>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fc29 	bl	8000638 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe febd 	bl	8000b6c <__aeabi_d2iz>
 8001df2:	4602      	mov	r2, r0
 8001df4:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <messageHandler+0x310>)
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38
 8001df8:	e22d      	b.n	8002256 <messageHandler+0x686>
	}else if((position = string_contains((char*)buffer, "-R", buffer_index)) != -1)
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <messageHandler+0x304>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	493b      	ldr	r1, [pc, #236]	; (8001ef0 <messageHandler+0x320>)
 8001e02:	482f      	ldr	r0, [pc, #188]	; (8001ec0 <messageHandler+0x2f0>)
 8001e04:	f7ff feb6 	bl	8001b74 <string_contains>
 8001e08:	61f8      	str	r0, [r7, #28]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d070      	beq.n	8001ef4 <messageHandler+0x324>
	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
		speed = atoi((char*)&buffer[position + 2]);
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3302      	adds	r3, #2
 8001e16:	4a2a      	ldr	r2, [pc, #168]	; (8001ec0 <messageHandler+0x2f0>)
 8001e18:	4413      	add	r3, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 fc6c 	bl	80066f8 <atoi>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <messageHandler+0x30c>)
 8001e26:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = motor_ratio(speed);
 8001e28:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <messageHandler+0x30c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb99 	bl	8000564 <__aeabi_i2d>
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <messageHandler+0x318>)
 8001e38:	f7fe fd28 	bl	800088c <__aeabi_ddiv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	a31a      	add	r3, pc, #104	; (adr r3, 8001eb0 <messageHandler+0x2e0>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fbf5 	bl	8000638 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe89 	bl	8000b6c <__aeabi_d2iz>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e60:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8001e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e66:	2200      	movs	r2, #0
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 0;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <messageHandler+0x310>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = motor_ratio(speed);
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <messageHandler+0x30c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb75 	bl	8000564 <__aeabi_i2d>
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <messageHandler+0x318>)
 8001e80:	f7fe fd04 	bl	800088c <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	a308      	add	r3, pc, #32	; (adr r3, 8001eb0 <messageHandler+0x2e0>)
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f7fe fbd1 	bl	8000638 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7fe fe65 	bl	8000b6c <__aeabi_d2iz>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <messageHandler+0x310>)
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ea8:	e1d5      	b.n	8002256 <messageHandler+0x686>
 8001eaa:	bf00      	nop
 8001eac:	f3af 8000 	nop.w
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	40b38800 	.word	0x40b38800
 8001eb8:	200000f4 	.word	0x200000f4
 8001ebc:	2000009c 	.word	0x2000009c
 8001ec0:	20000258 	.word	0x20000258
 8001ec4:	20000214 	.word	0x20000214
 8001ec8:	2000013c 	.word	0x2000013c
 8001ecc:	08007318 	.word	0x08007318
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	2000008c 	.word	0x2000008c
 8001ed8:	08007324 	.word	0x08007324
 8001edc:	20000094 	.word	0x20000094
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	08007328 	.word	0x08007328
 8001ee8:	40590000 	.word	0x40590000
 8001eec:	0800732c 	.word	0x0800732c
 8001ef0:	08007330 	.word	0x08007330
	}else if((position = string_contains((char*)buffer, "-L", buffer_index)) != -1)
 8001ef4:	4bac      	ldr	r3, [pc, #688]	; (80021a8 <messageHandler+0x5d8>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	49ac      	ldr	r1, [pc, #688]	; (80021ac <messageHandler+0x5dc>)
 8001efc:	48ac      	ldr	r0, [pc, #688]	; (80021b0 <messageHandler+0x5e0>)
 8001efe:	f7ff fe39 	bl	8001b74 <string_contains>
 8001f02:	61f8      	str	r0, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0a:	d04b      	beq.n	8001fa4 <messageHandler+0x3d4>
	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
		speed = atoi((char*)&buffer[position + 2]);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	3302      	adds	r3, #2
 8001f10:	4aa7      	ldr	r2, [pc, #668]	; (80021b0 <messageHandler+0x5e0>)
 8001f12:	4413      	add	r3, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 fbef 	bl	80066f8 <atoi>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4ba5      	ldr	r3, [pc, #660]	; (80021b4 <messageHandler+0x5e4>)
 8001f20:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = 0;
 8001f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f26:	2200      	movs	r2, #0
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = motor_ratio(speed);
 8001f2a:	4ba2      	ldr	r3, [pc, #648]	; (80021b4 <messageHandler+0x5e4>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb18 	bl	8000564 <__aeabi_i2d>
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	4b9f      	ldr	r3, [pc, #636]	; (80021b8 <messageHandler+0x5e8>)
 8001f3a:	f7fe fca7 	bl	800088c <__aeabi_ddiv>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	a396      	add	r3, pc, #600	; (adr r3, 80021a0 <messageHandler+0x5d0>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fb74 	bl	8000638 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fe08 	bl	8000b6c <__aeabi_d2iz>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f62:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = motor_ratio(speed);
 8001f64:	4b93      	ldr	r3, [pc, #588]	; (80021b4 <messageHandler+0x5e4>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fafb 	bl	8000564 <__aeabi_i2d>
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	4b91      	ldr	r3, [pc, #580]	; (80021b8 <messageHandler+0x5e8>)
 8001f74:	f7fe fc8a 	bl	800088c <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	a387      	add	r3, pc, #540	; (adr r3, 80021a0 <messageHandler+0x5d0>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	f7fe fb57 	bl	8000638 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7fe fdeb 	bl	8000b6c <__aeabi_d2iz>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b88      	ldr	r3, [pc, #544]	; (80021bc <messageHandler+0x5ec>)
 8001f9a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8001f9c:	4b87      	ldr	r3, [pc, #540]	; (80021bc <messageHandler+0x5ec>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa2:	e158      	b.n	8002256 <messageHandler+0x686>
	}else if((position = string_contains((char*)buffer, "FR", buffer_index)) != -1)
 8001fa4:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <messageHandler+0x5d8>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4985      	ldr	r1, [pc, #532]	; (80021c0 <messageHandler+0x5f0>)
 8001fac:	4880      	ldr	r0, [pc, #512]	; (80021b0 <messageHandler+0x5e0>)
 8001fae:	f7ff fde1 	bl	8001b74 <string_contains>
 8001fb2:	61f8      	str	r0, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fba:	d032      	beq.n	8002022 <messageHandler+0x452>
	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
		speed = atoi((char*)&buffer[position + 2]);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	4a7b      	ldr	r2, [pc, #492]	; (80021b0 <messageHandler+0x5e0>)
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f004 fb97 	bl	80066f8 <atoi>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b79      	ldr	r3, [pc, #484]	; (80021b4 <messageHandler+0x5e4>)
 8001fd0:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = motor_ratio(speed);
 8001fd2:	4b78      	ldr	r3, [pc, #480]	; (80021b4 <messageHandler+0x5e4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fac4 	bl	8000564 <__aeabi_i2d>
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4b75      	ldr	r3, [pc, #468]	; (80021b8 <messageHandler+0x5e8>)
 8001fe2:	f7fe fc53 	bl	800088c <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	a36c      	add	r3, pc, #432	; (adr r3, 80021a0 <messageHandler+0x5d0>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fb20 	bl	8000638 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fdb4 	bl	8000b6c <__aeabi_d2iz>
 8002004:	4602      	mov	r2, r0
 8002006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800200a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 800200c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002010:	2200      	movs	r2, #0
 8002012:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 0;
 8002014:	4b69      	ldr	r3, [pc, #420]	; (80021bc <messageHandler+0x5ec>)
 8002016:	2200      	movs	r2, #0
 8002018:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 800201a:	4b68      	ldr	r3, [pc, #416]	; (80021bc <messageHandler+0x5ec>)
 800201c:	2200      	movs	r2, #0
 800201e:	639a      	str	r2, [r3, #56]	; 0x38
 8002020:	e119      	b.n	8002256 <messageHandler+0x686>
	}else if((position = string_contains((char*)buffer, "FL", buffer_index)) != -1)
 8002022:	4b61      	ldr	r3, [pc, #388]	; (80021a8 <messageHandler+0x5d8>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	4966      	ldr	r1, [pc, #408]	; (80021c4 <messageHandler+0x5f4>)
 800202a:	4861      	ldr	r0, [pc, #388]	; (80021b0 <messageHandler+0x5e0>)
 800202c:	f7ff fda2 	bl	8001b74 <string_contains>
 8002030:	61f8      	str	r0, [r7, #28]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d032      	beq.n	80020a0 <messageHandler+0x4d0>
	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
		speed = atoi((char*)&buffer[position + 2]);
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3302      	adds	r3, #2
 800203e:	4a5c      	ldr	r2, [pc, #368]	; (80021b0 <messageHandler+0x5e0>)
 8002040:	4413      	add	r3, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f004 fb58 	bl	80066f8 <atoi>
 8002048:	4603      	mov	r3, r0
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <messageHandler+0x5e4>)
 800204e:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = 0;
 8002050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002054:	2200      	movs	r2, #0
 8002056:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8002058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800205c:	2200      	movs	r2, #0
 800205e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = motor_ratio(speed);
 8002060:	4b54      	ldr	r3, [pc, #336]	; (80021b4 <messageHandler+0x5e4>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa7d 	bl	8000564 <__aeabi_i2d>
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4b52      	ldr	r3, [pc, #328]	; (80021b8 <messageHandler+0x5e8>)
 8002070:	f7fe fc0c 	bl	800088c <__aeabi_ddiv>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	a348      	add	r3, pc, #288	; (adr r3, 80021a0 <messageHandler+0x5d0>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fad9 	bl	8000638 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	f7fe fd6d 	bl	8000b6c <__aeabi_d2iz>
 8002092:	4602      	mov	r2, r0
 8002094:	4b49      	ldr	r3, [pc, #292]	; (80021bc <messageHandler+0x5ec>)
 8002096:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8002098:	4b48      	ldr	r3, [pc, #288]	; (80021bc <messageHandler+0x5ec>)
 800209a:	2200      	movs	r2, #0
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
 800209e:	e0da      	b.n	8002256 <messageHandler+0x686>
	}else if((position = string_contains((char*)buffer, "BR", buffer_index)) != -1)
 80020a0:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <messageHandler+0x5d8>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4948      	ldr	r1, [pc, #288]	; (80021c8 <messageHandler+0x5f8>)
 80020a8:	4841      	ldr	r0, [pc, #260]	; (80021b0 <messageHandler+0x5e0>)
 80020aa:	f7ff fd63 	bl	8001b74 <string_contains>
 80020ae:	61f8      	str	r0, [r7, #28]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b6:	d032      	beq.n	800211e <messageHandler+0x54e>
	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
		speed = atoi((char*)&buffer[position + 2]);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3302      	adds	r3, #2
 80020bc:	4a3c      	ldr	r2, [pc, #240]	; (80021b0 <messageHandler+0x5e0>)
 80020be:	4413      	add	r3, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 fb19 	bl	80066f8 <atoi>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <messageHandler+0x5e4>)
 80020cc:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = 0;
 80020ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d2:	2200      	movs	r2, #0
 80020d4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = motor_ratio(speed);
 80020d6:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <messageHandler+0x5e4>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fa42 	bl	8000564 <__aeabi_i2d>
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <messageHandler+0x5e8>)
 80020e6:	f7fe fbd1 	bl	800088c <__aeabi_ddiv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	a32b      	add	r3, pc, #172	; (adr r3, 80021a0 <messageHandler+0x5d0>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	f7fe fa9e 	bl	8000638 <__aeabi_dmul>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	f7fe fd32 	bl	8000b6c <__aeabi_d2iz>
 8002108:	4602      	mov	r2, r0
 800210a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800210e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 0;
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <messageHandler+0x5ec>)
 8002112:	2200      	movs	r2, #0
 8002114:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <messageHandler+0x5ec>)
 8002118:	2200      	movs	r2, #0
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
 800211c:	e09b      	b.n	8002256 <messageHandler+0x686>
	}else if((position = string_contains((char*)buffer, "BL", buffer_index)) != -1)
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <messageHandler+0x5d8>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4929      	ldr	r1, [pc, #164]	; (80021cc <messageHandler+0x5fc>)
 8002126:	4822      	ldr	r0, [pc, #136]	; (80021b0 <messageHandler+0x5e0>)
 8002128:	f7ff fd24 	bl	8001b74 <string_contains>
 800212c:	61f8      	str	r0, [r7, #28]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d04c      	beq.n	80021d0 <messageHandler+0x600>
	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
		speed = atoi((char*)&buffer[position + 2]);
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3302      	adds	r3, #2
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <messageHandler+0x5e0>)
 800213c:	4413      	add	r3, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f004 fada 	bl	80066f8 <atoi>
 8002144:	4603      	mov	r3, r0
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <messageHandler+0x5e4>)
 800214a:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = 0;
 800214c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002150:	2200      	movs	r2, #0
 8002152:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8002154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002158:	2200      	movs	r2, #0
 800215a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 0;
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <messageHandler+0x5ec>)
 800215e:	2200      	movs	r2, #0
 8002160:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = motor_ratio(speed);
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <messageHandler+0x5e4>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f9fc 	bl	8000564 <__aeabi_i2d>
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <messageHandler+0x5e8>)
 8002172:	f7fe fb8b 	bl	800088c <__aeabi_ddiv>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	a308      	add	r3, pc, #32	; (adr r3, 80021a0 <messageHandler+0x5d0>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	f7fe fa58 	bl	8000638 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fcec 	bl	8000b6c <__aeabi_d2iz>
 8002194:	4602      	mov	r2, r0
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <messageHandler+0x5ec>)
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
 800219a:	e05c      	b.n	8002256 <messageHandler+0x686>
 800219c:	f3af 8000 	nop.w
 80021a0:	00000000 	.word	0x00000000
 80021a4:	40b38800 	.word	0x40b38800
 80021a8:	2000008c 	.word	0x2000008c
 80021ac:	08007334 	.word	0x08007334
 80021b0:	20000258 	.word	0x20000258
 80021b4:	20000094 	.word	0x20000094
 80021b8:	40590000 	.word	0x40590000
 80021bc:	40000400 	.word	0x40000400
 80021c0:	08007338 	.word	0x08007338
 80021c4:	0800733c 	.word	0x0800733c
 80021c8:	08007340 	.word	0x08007340
 80021cc:	08007344 	.word	0x08007344
	}else if((position = string_contains((char*)buffer, "--", buffer_index)) != -1)
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <messageHandler+0x6a8>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4929      	ldr	r1, [pc, #164]	; (800227c <messageHandler+0x6ac>)
 80021d8:	4829      	ldr	r0, [pc, #164]	; (8002280 <messageHandler+0x6b0>)
 80021da:	f7ff fccb 	bl	8001b74 <string_contains>
 80021de:	61f8      	str	r0, [r7, #28]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d019      	beq.n	800221c <messageHandler+0x64c>
//		HAL_UART_Transmit(pc_uart, "Test\r\n", strlen("Test\r\n"), 1000);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
		speed = atoi((char*)&buffer[position + 3]);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	3303      	adds	r3, #3
 80021ec:	4a24      	ldr	r2, [pc, #144]	; (8002280 <messageHandler+0x6b0>)
 80021ee:	4413      	add	r3, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 fa81 	bl	80066f8 <atoi>
 80021f6:	4603      	mov	r3, r0
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <messageHandler+0x6b4>)
 80021fc:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = 0;
 80021fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002202:	2200      	movs	r2, #0
 8002204:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8002206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800220a:	2200      	movs	r2, #0
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 0;
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <messageHandler+0x6b8>)
 8002210:	2200      	movs	r2, #0
 8002212:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <messageHandler+0x6b8>)
 8002216:	2200      	movs	r2, #0
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
 800221a:	e01c      	b.n	8002256 <messageHandler+0x686>
	}else if(string_contains((char*)buffer, "+CWJAP:", buffer_index) != -1
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <messageHandler+0x6a8>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	491a      	ldr	r1, [pc, #104]	; (800228c <messageHandler+0x6bc>)
 8002224:	4816      	ldr	r0, [pc, #88]	; (8002280 <messageHandler+0x6b0>)
 8002226:	f7ff fca5 	bl	8001b74 <string_contains>
 800222a:	4603      	mov	r3, r0
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d011      	beq.n	8002256 <messageHandler+0x686>
			&& (string_contains((char*)buffer, "FAIL", buffer_index) != -1
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <messageHandler+0x6a8>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	4915      	ldr	r1, [pc, #84]	; (8002290 <messageHandler+0x6c0>)
 800223a:	4811      	ldr	r0, [pc, #68]	; (8002280 <messageHandler+0x6b0>)
 800223c:	f7ff fc9a 	bl	8001b74 <string_contains>
 8002240:	4603      	mov	r3, r0
 8002242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002246:	d106      	bne.n	8002256 <messageHandler+0x686>
			|| string_contains((char*)buffer, "DISCONNECT", buffer_index) != -1))
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <messageHandler+0x6a8>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4911      	ldr	r1, [pc, #68]	; (8002294 <messageHandler+0x6c4>)
 8002250:	480b      	ldr	r0, [pc, #44]	; (8002280 <messageHandler+0x6b0>)
 8002252:	f7ff fc8f 	bl	8001b74 <string_contains>
	{
		//Change your WiFi SSID credentials below
//		HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWJAP=\"MichelCel\",\"michel123\"\r\n", strlen("AT+CWJAP=\"MichelCel\",\"michel123\"\r\n"), 100);
	}
	handle = 0;
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <messageHandler+0x6c8>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

	ESP_Clear_Buffer();
 800225c:	f7ff fc48 	bl	8001af0 <ESP_Clear_Buffer>
	__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <messageHandler+0x6cc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <messageHandler+0x6cc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0220 	orr.w	r2, r2, #32
 800226e:	60da      	str	r2, [r3, #12]
}
 8002270:	bf00      	nop
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000008c 	.word	0x2000008c
 800227c:	08007348 	.word	0x08007348
 8002280:	20000258 	.word	0x20000258
 8002284:	20000094 	.word	0x20000094
 8002288:	40000400 	.word	0x40000400
 800228c:	0800734c 	.word	0x0800734c
 8002290:	08007354 	.word	0x08007354
 8002294:	0800735c 	.word	0x0800735c
 8002298:	2000009c 	.word	0x2000009c
 800229c:	200000f4 	.word	0x200000f4

080022a0 <controlArm>:
	HAL_UART_Transmit(wifi_uart, (uint8_t*)cipclose, strlen(cipclose), 100);
//	HAL_UART_Transmit(pc_uart, (uint8_t*)outputString, strlen(outputString), 100);
}

void controlArm()
{
 80022a0:	b5b0      	push	{r4, r5, r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	466b      	mov	r3, sp
 80022a8:	461d      	mov	r5, r3
	uint8_t length = 5;
 80022aa:	2305      	movs	r3, #5
 80022ac:	74fb      	strb	r3, [r7, #19]
	  uint8_t servos[length];
 80022ae:	7cfc      	ldrb	r4, [r7, #19]
 80022b0:	4623      	mov	r3, r4
 80022b2:	3b01      	subs	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	b2e0      	uxtb	r0, r4
 80022b8:	f04f 0100 	mov.w	r1, #0
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	00cb      	lsls	r3, r1, #3
 80022c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022ca:	00c2      	lsls	r2, r0, #3
 80022cc:	b2e0      	uxtb	r0, r4
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	00cb      	lsls	r3, r1, #3
 80022dc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022e0:	00c2      	lsls	r2, r0, #3
 80022e2:	4623      	mov	r3, r4
 80022e4:	3307      	adds	r3, #7
 80022e6:	08db      	lsrs	r3, r3, #3
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	ebad 0d03 	sub.w	sp, sp, r3
 80022ee:	466b      	mov	r3, sp
 80022f0:	3300      	adds	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
	  uint32_t angles[length];
 80022f4:	7cfc      	ldrb	r4, [r7, #19]
 80022f6:	4623      	mov	r3, r4
 80022f8:	3b01      	subs	r3, #1
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	b2e0      	uxtb	r0, r4
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	014b      	lsls	r3, r1, #5
 800230c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002310:	0142      	lsls	r2, r0, #5
 8002312:	b2e0      	uxtb	r0, r4
 8002314:	f04f 0100 	mov.w	r1, #0
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	014b      	lsls	r3, r1, #5
 8002322:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002326:	0142      	lsls	r2, r0, #5
 8002328:	4623      	mov	r3, r4
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	3307      	adds	r3, #7
 800232e:	08db      	lsrs	r3, r3, #3
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	ebad 0d03 	sub.w	sp, sp, r3
 8002336:	466b      	mov	r3, sp
 8002338:	3303      	adds	r3, #3
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	603b      	str	r3, [r7, #0]
	  for (int i = 0; i < length; i++)
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e011      	b.n	800236a <controlArm+0xca>
	  {
		  servos[i] = i + 2;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3302      	adds	r3, #2
 800234c:	b2d9      	uxtb	r1, r3
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	460a      	mov	r2, r1
 8002356:	701a      	strb	r2, [r3, #0]
		  angles[i] = 1500;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for (int i = 0; i < length; i++)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3301      	adds	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	429a      	cmp	r2, r3
 8002370:	dbe9      	blt.n	8002346 <controlArm+0xa6>
	  }

	  moveServos(servos, angles, length);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	6839      	ldr	r1, [r7, #0]
 8002376:	7cfa      	ldrb	r2, [r7, #19]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f853 	bl	8002424 <moveServos>
	  // Claw pivot servo - doesn't ever need to change
	  angles[0] = 1500;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002384:	601a      	str	r2, [r3, #0]

	  //Top arm servo -
	  angles[1] = 1000;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800238c:	605a      	str	r2, [r3, #4]
	  //600 down straight
	  //1500 right angle

	  // Mid-arm servo
	  angles[2] = 400;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002394:	609a      	str	r2, [r3, #8]
	  // 400 forwards down

	  // Base servo
	  angles[3] = 2200;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f640 0298 	movw	r2, #2200	; 0x898
 800239c:	60da      	str	r2, [r3, #12]
	  //800 backwards down

	  // Claw
	  // 1500 open completely
	  // 2500 closed with contact
	  angles[4] = 1500;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023a4:	611a      	str	r2, [r3, #16]
	  /* USER CODE END 2 */

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  moveServos(servos, angles, length);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6839      	ldr	r1, [r7, #0]
 80023aa:	7cfa      	ldrb	r2, [r7, #19]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 f839 	bl	8002424 <moveServos>

	  //Grab the object
	  angles[4] = 2250;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f640 02ca 	movw	r2, #2250	; 0x8ca
 80023b8:	611a      	str	r2, [r3, #16]
	  moveServos(servos, angles, length);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	6839      	ldr	r1, [r7, #0]
 80023be:	7cfa      	ldrb	r2, [r7, #19]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f82f 	bl	8002424 <moveServos>

	  //Move the arm backwards
	  angles[3] = 1500;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023cc:	60da      	str	r2, [r3, #12]
	  moveServos(servos, angles, length);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	7cfa      	ldrb	r2, [r7, #19]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f825 	bl	8002424 <moveServos>
	  angles[1] = 1500;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023e0:	605a      	str	r2, [r3, #4]
	  angles[2] = 1500;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023e8:	609a      	str	r2, [r3, #8]
	  angles[3] = 1500;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023f0:	60da      	str	r2, [r3, #12]
	  angles[4] = 2000;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80023f8:	611a      	str	r2, [r3, #16]
	  moveServos(servos, angles, length);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	6839      	ldr	r1, [r7, #0]
 80023fe:	7cfa      	ldrb	r2, [r7, #19]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 f80f 	bl	8002424 <moveServos>

	  //Drop the item
	  angles[4] = 1500;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800240c:	611a      	str	r2, [r3, #16]
	  moveServos(servos, angles, length);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	6839      	ldr	r1, [r7, #0]
 8002412:	7cfa      	ldrb	r2, [r7, #19]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f805 	bl	8002424 <moveServos>
 800241a:	46ad      	mov	sp, r5
}
 800241c:	bf00      	nop
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bdb0      	pop	{r4, r5, r7, pc}

08002424 <moveServos>:

void moveServos(uint8_t* servos, uint32_t* angles, uint8_t length)
{
 8002424:	b5b0      	push	{r4, r5, r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	4613      	mov	r3, r2
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	466b      	mov	r3, sp
 8002434:	461d      	mov	r5, r3
	uint16_t time = 1000; //default time because why not
 8002436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243a:	837b      	strh	r3, [r7, #26]

	uint8_t data[7 + (length * 3)];
 800243c:	79fa      	ldrb	r2, [r7, #7]
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	1ddc      	adds	r4, r3, #7
 8002446:	1e63      	subs	r3, r4, #1
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	4623      	mov	r3, r4
 800244c:	4618      	mov	r0, r3
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	00cb      	lsls	r3, r1, #3
 800245c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002460:	00c2      	lsls	r2, r0, #3
 8002462:	4623      	mov	r3, r4
 8002464:	4618      	mov	r0, r3
 8002466:	f04f 0100 	mov.w	r1, #0
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	00cb      	lsls	r3, r1, #3
 8002474:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002478:	00c2      	lsls	r2, r0, #3
 800247a:	4623      	mov	r3, r4
 800247c:	3307      	adds	r3, #7
 800247e:	08db      	lsrs	r3, r3, #3
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	ebad 0d03 	sub.w	sp, sp, r3
 8002486:	466b      	mov	r3, sp
 8002488:	3300      	adds	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
	data[0] = 0x55; //header 1
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2255      	movs	r2, #85	; 0x55
 8002490:	701a      	strb	r2, [r3, #0]
	data[1] = 0x55; //header 2
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2255      	movs	r2, #85	; 0x55
 8002496:	705a      	strb	r2, [r3, #1]
	data[2] = 0x05 + (length * 3); //length
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	461a      	mov	r2, r3
 800249c:	0052      	lsls	r2, r2, #1
 800249e:	4413      	add	r3, r2
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	3305      	adds	r3, #5
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	709a      	strb	r2, [r3, #2]
	data[3] = 0x03; //cmd
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2203      	movs	r2, #3
 80024ae:	70da      	strb	r2, [r3, #3]
	data[4] = length; //# servos
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	79fa      	ldrb	r2, [r7, #7]
 80024b4:	711a      	strb	r2, [r3, #4]
	data[5] = GET_LOW_BYTE(time); //lower 8 time
 80024b6:	8b7b      	ldrh	r3, [r7, #26]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	715a      	strb	r2, [r3, #5]
	data[6] = GET_HIGH_BYTE(time); //upper 8 time
 80024be:	8b7b      	ldrh	r3, [r7, #26]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < length; i++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e028      	b.n	8002522 <moveServos+0xfe>
	{
		data[7 + (i * 3)] = servos[i];
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	18d1      	adds	r1, r2, r3
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	3307      	adds	r3, #7
 80024e0:	7809      	ldrb	r1, [r1, #0]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	54d1      	strb	r1, [r2, r3]
		data[8 + (i * 3)] = GET_LOW_BYTE(angles[i]);
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	4413      	add	r3, r2
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	3308      	adds	r3, #8
 80024fa:	b2c9      	uxtb	r1, r1
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	54d1      	strb	r1, [r2, r3]
		data[9 + (i * 3)] = GET_HIGH_BYTE(angles[i]);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	4413      	add	r3, r2
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0a19      	lsrs	r1, r3, #8
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	3309      	adds	r3, #9
 8002516:	b2c9      	uxtb	r1, r1
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < length; i++)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	3301      	adds	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	429a      	cmp	r2, r3
 8002528:	dbd2      	blt.n	80024d0 <moveServos+0xac>
	}
	HAL_UART_Transmit(servos_uart, data, 7 + (length * 3), time + 250);
 800252a:	6939      	ldr	r1, [r7, #16]
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	0052      	lsls	r2, r2, #1
 8002534:	4413      	add	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	3307      	adds	r3, #7
 800253a:	b29a      	uxth	r2, r3
 800253c:	8b7b      	ldrh	r3, [r7, #26]
 800253e:	33fa      	adds	r3, #250	; 0xfa
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <moveServos+0x134>)
 8002542:	f003 f91c 	bl	800577e <HAL_UART_Transmit>
	HAL_Delay(3000);
 8002546:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800254a:	f000 fc29 	bl	8002da0 <HAL_Delay>
 800254e:	46ad      	mov	sp, r5
}
 8002550:	bf00      	nop
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bdb0      	pop	{r4, r5, r7, pc}
 8002558:	20000188 	.word	0x20000188

0800255c <resetServos>:

void resetServos()
{
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	466b      	mov	r3, sp
 8002564:	461d      	mov	r5, r3
	uint8_t length = 5;
 8002566:	2305      	movs	r3, #5
 8002568:	74fb      	strb	r3, [r7, #19]
	uint8_t servos[length];
 800256a:	7cfc      	ldrb	r4, [r7, #19]
 800256c:	4623      	mov	r3, r4
 800256e:	3b01      	subs	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	b2e0      	uxtb	r0, r4
 8002574:	f04f 0100 	mov.w	r1, #0
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	00cb      	lsls	r3, r1, #3
 8002582:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002586:	00c2      	lsls	r2, r0, #3
 8002588:	b2e0      	uxtb	r0, r4
 800258a:	f04f 0100 	mov.w	r1, #0
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	00cb      	lsls	r3, r1, #3
 8002598:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800259c:	00c2      	lsls	r2, r0, #3
 800259e:	4623      	mov	r3, r4
 80025a0:	3307      	adds	r3, #7
 80025a2:	08db      	lsrs	r3, r3, #3
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	ebad 0d03 	sub.w	sp, sp, r3
 80025aa:	466b      	mov	r3, sp
 80025ac:	3300      	adds	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
	uint32_t angles[length];
 80025b0:	7cfc      	ldrb	r4, [r7, #19]
 80025b2:	4623      	mov	r3, r4
 80025b4:	3b01      	subs	r3, #1
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	b2e0      	uxtb	r0, r4
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	014b      	lsls	r3, r1, #5
 80025c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025cc:	0142      	lsls	r2, r0, #5
 80025ce:	b2e0      	uxtb	r0, r4
 80025d0:	f04f 0100 	mov.w	r1, #0
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	014b      	lsls	r3, r1, #5
 80025de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025e2:	0142      	lsls	r2, r0, #5
 80025e4:	4623      	mov	r3, r4
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	3307      	adds	r3, #7
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	ebad 0d03 	sub.w	sp, sp, r3
 80025f2:	466b      	mov	r3, sp
 80025f4:	3303      	adds	r3, #3
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < length; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	e011      	b.n	8002626 <resetServos+0xca>
	{
		servos[i] = i + 2;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3302      	adds	r3, #2
 8002608:	b2d9      	uxtb	r1, r3
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	460a      	mov	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
		angles[i] = 1500;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < length; i++)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3301      	adds	r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	429a      	cmp	r2, r3
 800262c:	dbe9      	blt.n	8002602 <resetServos+0xa6>
	}
//	angles[1] = 600;
	angles[4] = 2000;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002634:	611a      	str	r2, [r3, #16]
	moveServos(servos, angles, length);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6839      	ldr	r1, [r7, #0]
 800263a:	7cfa      	ldrb	r2, [r7, #19]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fef1 	bl	8002424 <moveServos>
 8002642:	46ad      	mov	sp, r5
}
 8002644:	bf00      	nop
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bdb0      	pop	{r4, r5, r7, pc}

0800264c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_MspInit+0x4c>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <HAL_MspInit+0x4c>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_MspInit+0x4c>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_MspInit+0x4c>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a08      	ldr	r2, [pc, #32]	; (8002698 <HAL_MspInit+0x4c>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_MspInit+0x4c>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800

0800269c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_ADC_MspInit+0x7c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d127      	bne.n	800270e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <HAL_ADC_MspInit+0x80>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a15      	ldr	r2, [pc, #84]	; (800271c <HAL_ADC_MspInit+0x80>)
 80026c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_ADC_MspInit+0x80>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_ADC_MspInit+0x80>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <HAL_ADC_MspInit+0x80>)
 80026e4:	f043 0320 	orr.w	r3, r3, #32
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_ADC_MspInit+0x80>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF7     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fa:	2303      	movs	r3, #3
 80026fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	4805      	ldr	r0, [pc, #20]	; (8002720 <HAL_ADC_MspInit+0x84>)
 800270a:	f001 f8ed 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800270e:	bf00      	nop
 8002710:	3728      	adds	r7, #40	; 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40012200 	.word	0x40012200
 800271c:	40023800 	.word	0x40023800
 8002720:	40021400 	.word	0x40021400

08002724 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_TIM_PWM_MspInit+0x64>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_TIM_PWM_MspInit+0x64>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_TIM_PWM_MspInit+0x64>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002752:	e012      	b.n	800277a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_TIM_PWM_MspInit+0x68>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10d      	bne.n	800277a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_TIM_PWM_MspInit+0x64>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_TIM_PWM_MspInit+0x64>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_TIM_PWM_MspInit+0x64>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40000400 	.word	0x40000400

08002790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <HAL_TIM_Base_MspInit+0x48>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d115      	bne.n	80027ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_TIM_Base_MspInit+0x4c>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <HAL_TIM_Base_MspInit+0x4c>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_TIM_Base_MspInit+0x4c>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	201e      	movs	r0, #30
 80027c4:	f000 ffc7 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027c8:	201e      	movs	r0, #30
 80027ca:	f000 ffe0 	bl	800378e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40000800 	.word	0x40000800
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d11f      	bne.n	8002842 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b22      	ldr	r3, [pc, #136]	; (8002890 <HAL_TIM_MspPostInit+0xb0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a21      	ldr	r2, [pc, #132]	; (8002890 <HAL_TIM_MspPostInit+0xb0>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <HAL_TIM_MspPostInit+0xb0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800281e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002830:	2301      	movs	r3, #1
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4816      	ldr	r0, [pc, #88]	; (8002894 <HAL_TIM_MspPostInit+0xb4>)
 800283c:	f001 f854 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002840:	e022      	b.n	8002888 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a14      	ldr	r2, [pc, #80]	; (8002898 <HAL_TIM_MspPostInit+0xb8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d11d      	bne.n	8002888 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <HAL_TIM_MspPostInit+0xb0>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_TIM_MspPostInit+0xb0>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_TIM_MspPostInit+0xb0>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002868:	2330      	movs	r3, #48	; 0x30
 800286a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002878:	2302      	movs	r3, #2
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	4804      	ldr	r0, [pc, #16]	; (8002894 <HAL_TIM_MspPostInit+0xb4>)
 8002884:	f001 f830 	bl	80038e8 <HAL_GPIO_Init>
}
 8002888:	bf00      	nop
 800288a:	3728      	adds	r7, #40	; 0x28
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	40020400 	.word	0x40020400
 8002898:	40000400 	.word	0x40000400

0800289c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08e      	sub	sp, #56	; 0x38
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a5f      	ldr	r2, [pc, #380]	; (8002a38 <HAL_UART_MspInit+0x19c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d12d      	bne.n	800291a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	4b5e      	ldr	r3, [pc, #376]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a5d      	ldr	r2, [pc, #372]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80028c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	4b57      	ldr	r3, [pc, #348]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a56      	ldr	r2, [pc, #344]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80028e4:	f043 0310 	orr.w	r3, r3, #16
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PE7     ------> UART5_RX
    PE8     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80028f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002904:	2303      	movs	r3, #3
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002908:	2308      	movs	r3, #8
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800290c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002910:	4619      	mov	r1, r3
 8002912:	484b      	ldr	r0, [pc, #300]	; (8002a40 <HAL_UART_MspInit+0x1a4>)
 8002914:	f000 ffe8 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002918:	e08a      	b.n	8002a30 <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a49      	ldr	r2, [pc, #292]	; (8002a44 <HAL_UART_MspInit+0x1a8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d12d      	bne.n	8002980 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
 8002928:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	4a43      	ldr	r2, [pc, #268]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 800292e:	f043 0310 	orr.w	r3, r3, #16
 8002932:	6453      	str	r3, [r2, #68]	; 0x44
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6313      	str	r3, [r2, #48]	; 0x30
 8002950:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800295c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296a:	2303      	movs	r3, #3
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800296e:	2307      	movs	r3, #7
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002976:	4619      	mov	r1, r3
 8002978:	4833      	ldr	r0, [pc, #204]	; (8002a48 <HAL_UART_MspInit+0x1ac>)
 800297a:	f000 ffb5 	bl	80038e8 <HAL_GPIO_Init>
}
 800297e:	e057      	b.n	8002a30 <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART3)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a31      	ldr	r2, [pc, #196]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d152      	bne.n	8002a30 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART3_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_UART_MspInit+0x1a0>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029de:	2320      	movs	r3, #32
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029ee:	2307      	movs	r3, #7
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f6:	4619      	mov	r1, r3
 80029f8:	4815      	ldr	r0, [pc, #84]	; (8002a50 <HAL_UART_MspInit+0x1b4>)
 80029fa:	f000 ff75 	bl	80038e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a10:	2307      	movs	r3, #7
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a18:	4619      	mov	r1, r3
 8002a1a:	480e      	ldr	r0, [pc, #56]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 8002a1c:	f000 ff64 	bl	80038e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	2027      	movs	r0, #39	; 0x27
 8002a26:	f000 fe96 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a2a:	2027      	movs	r0, #39	; 0x27
 8002a2c:	f000 feaf 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 8002a30:	bf00      	nop
 8002a32:	3738      	adds	r7, #56	; 0x38
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40005000 	.word	0x40005000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40011000 	.word	0x40011000
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	40004800 	.word	0x40004800
 8002a50:	40020800 	.word	0x40020800
 8002a54:	40020400 	.word	0x40020400

08002a58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a5c:	f3bf 8f4f 	dsb	sy
}
 8002a60:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <__NVIC_SystemReset+0x24>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a6a:	4904      	ldr	r1, [pc, #16]	; (8002a7c <__NVIC_SystemReset+0x24>)
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__NVIC_SystemReset+0x28>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a72:	f3bf 8f4f 	dsb	sy
}
 8002a76:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <__NVIC_SystemReset+0x20>
 8002a7c:	e000ed00 	.word	0xe000ed00
 8002a80:	05fa0004 	.word	0x05fa0004

08002a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <NMI_Handler+0x4>

08002a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <HardFault_Handler+0x4>

08002a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <MemManage_Handler+0x4>

08002a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <BusFault_Handler+0x4>

08002a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <UsageFault_Handler+0x4>

08002aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad0:	f000 f946 	bl	8002d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  if (!handle)
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <TIM4_IRQHandler+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <TIM4_IRQHandler+0x16>
	safeCounter += 1;
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <TIM4_IRQHandler+0x44>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	4a0c      	ldr	r2, [pc, #48]	; (8002b1c <TIM4_IRQHandler+0x44>)
 8002aec:	6013      	str	r3, [r2, #0]
  if(safeCounter > resetTime && handle)
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <TIM4_IRQHandler+0x44>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <TIM4_IRQHandler+0x48>)
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d908      	bls.n	8002b0c <TIM4_IRQHandler+0x34>
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <TIM4_IRQHandler+0x40>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <TIM4_IRQHandler+0x34>
  {
	  safeCounter = 0;
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <TIM4_IRQHandler+0x44>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
	  NVIC_SystemReset();
 8002b08:	f7ff ffa6 	bl	8002a58 <__NVIC_SystemReset>

  }
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b0c:	4805      	ldr	r0, [pc, #20]	; (8002b24 <TIM4_IRQHandler+0x4c>)
 8002b0e:	f001 ff85 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	2000009c 	.word	0x2000009c
 8002b1c:	20000098 	.word	0x20000098
 8002b20:	20000138 	.word	0x20000138
 8002b24:	200000ac 	.word	0x200000ac

08002b28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	timeout = 1;
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <USART3_IRQHandler+0x94>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	801a      	strh	r2, [r3, #0]
  	safeCounter = 0;
 8002b32:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <USART3_IRQHandler+0x98>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

  	if(buffer_index < 2000)
 8002b38:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <USART3_IRQHandler+0x9c>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b40:	d20e      	bcs.n	8002b60 <USART3_IRQHandler+0x38>
  	{
  		HAL_UART_Receive(wifi_uart, &buffer[buffer_index++], 1, 10);
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <USART3_IRQHandler+0x9c>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	b291      	uxth	r1, r2
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <USART3_IRQHandler+0x9c>)
 8002b4c:	8011      	strh	r1, [r2, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <USART3_IRQHandler+0xa0>)
 8002b52:	18d1      	adds	r1, r2, r3
 8002b54:	230a      	movs	r3, #10
 8002b56:	2201      	movs	r2, #1
 8002b58:	481c      	ldr	r0, [pc, #112]	; (8002bcc <USART3_IRQHandler+0xa4>)
 8002b5a:	f002 fea2 	bl	80058a2 <HAL_UART_Receive>
 8002b5e:	e005      	b.n	8002b6c <USART3_IRQHandler+0x44>
//  		char vlue = buffer[buffer_index-1];
//  		HAL_UART_Transmit(pc_uart, vlue, 1, 10);
  	}
  	else
  	{
  		HAL_UART_Receive(wifi_uart, &buffer[1999], 1, 10);
 8002b60:	230a      	movs	r3, #10
 8002b62:	2201      	movs	r2, #1
 8002b64:	491a      	ldr	r1, [pc, #104]	; (8002bd0 <USART3_IRQHandler+0xa8>)
 8002b66:	4819      	ldr	r0, [pc, #100]	; (8002bcc <USART3_IRQHandler+0xa4>)
 8002b68:	f002 fe9b 	bl	80058a2 <HAL_UART_Receive>
//  		HAL_UART_Transmit(pc_uart, buffer[1999], 1, 10);
  	}

  	if(buffer_index > 5)
 8002b6c:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <USART3_IRQHandler+0x9c>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d91e      	bls.n	8002bb2 <USART3_IRQHandler+0x8a>
  	{
  		if(buffer[buffer_index-4] == '\r' && buffer[buffer_index-3] == '\n' && buffer[buffer_index-2] == '\r' && buffer[buffer_index-1] == '\n')
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <USART3_IRQHandler+0x9c>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	3b04      	subs	r3, #4
 8002b7a:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <USART3_IRQHandler+0xa0>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	2b0d      	cmp	r3, #13
 8002b80:	d117      	bne.n	8002bb2 <USART3_IRQHandler+0x8a>
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <USART3_IRQHandler+0x9c>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	3b03      	subs	r3, #3
 8002b88:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <USART3_IRQHandler+0xa0>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	2b0a      	cmp	r3, #10
 8002b8e:	d110      	bne.n	8002bb2 <USART3_IRQHandler+0x8a>
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <USART3_IRQHandler+0x9c>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	3b02      	subs	r3, #2
 8002b96:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <USART3_IRQHandler+0xa0>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	2b0d      	cmp	r3, #13
 8002b9c:	d109      	bne.n	8002bb2 <USART3_IRQHandler+0x8a>
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <USART3_IRQHandler+0x9c>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <USART3_IRQHandler+0xa0>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	2b0a      	cmp	r3, #10
 8002baa:	d102      	bne.n	8002bb2 <USART3_IRQHandler+0x8a>
  			messageHandlerFlag = 1;
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <USART3_IRQHandler+0xac>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	801a      	strh	r2, [r3, #0]
  	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bb2:	4806      	ldr	r0, [pc, #24]	; (8002bcc <USART3_IRQHandler+0xa4>)
 8002bb4:	f002 ff18 	bl	80059e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	2000008e 	.word	0x2000008e
 8002bc0:	20000098 	.word	0x20000098
 8002bc4:	2000008c 	.word	0x2000008c
 8002bc8:	20000258 	.word	0x20000258
 8002bcc:	200000f4 	.word	0x200000f4
 8002bd0:	20000a27 	.word	0x20000a27
 8002bd4:	20000090 	.word	0x20000090

08002bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <_sbrk+0x5c>)
 8002be2:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <_sbrk+0x60>)
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <_sbrk+0x64>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <_sbrk+0x64>)
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <_sbrk+0x68>)
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <_sbrk+0x64>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d207      	bcs.n	8002c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c08:	f003 fd7a 	bl	8006700 <__errno>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	220c      	movs	r2, #12
 8002c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
 8002c16:	e009      	b.n	8002c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <_sbrk+0x64>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <_sbrk+0x64>)
 8002c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20020000 	.word	0x20020000
 8002c38:	00000400 	.word	0x00000400
 8002c3c:	200000a0 	.word	0x200000a0
 8002c40:	20000a88 	.word	0x20000a88

08002c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <SystemInit+0x20>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <SystemInit+0x20>)
 8002c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c6c:	480d      	ldr	r0, [pc, #52]	; (8002ca4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c6e:	490e      	ldr	r1, [pc, #56]	; (8002ca8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c70:	4a0e      	ldr	r2, [pc, #56]	; (8002cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c74:	e002      	b.n	8002c7c <LoopCopyDataInit>

08002c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c7a:	3304      	adds	r3, #4

08002c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c80:	d3f9      	bcc.n	8002c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c82:	4a0b      	ldr	r2, [pc, #44]	; (8002cb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c84:	4c0b      	ldr	r4, [pc, #44]	; (8002cb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c88:	e001      	b.n	8002c8e <LoopFillZerobss>

08002c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c8c:	3204      	adds	r2, #4

08002c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c90:	d3fb      	bcc.n	8002c8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c92:	f7ff ffd7 	bl	8002c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c96:	f003 fd39 	bl	800670c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c9a:	f7fe f95b 	bl	8000f54 <main>
  bx  lr    
 8002c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002cac:	080075a0 	.word	0x080075a0
  ldr r2, =_sbss
 8002cb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002cb4:	20000a88 	.word	0x20000a88

08002cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb8:	e7fe      	b.n	8002cb8 <ADC_IRQHandler>
	...

08002cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_Init+0x40>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0d      	ldr	r2, [pc, #52]	; (8002cfc <HAL_Init+0x40>)
 8002cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_Init+0x40>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <HAL_Init+0x40>)
 8002cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_Init+0x40>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <HAL_Init+0x40>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	f000 fd2b 	bl	8003740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cea:	200f      	movs	r0, #15
 8002cec:	f000 f808 	bl	8002d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf0:	f7ff fcac 	bl	800264c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023c00 	.word	0x40023c00

08002d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_InitTick+0x54>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_InitTick+0x58>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fd43 	bl	80037aa <HAL_SYSTICK_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00e      	b.n	8002d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b0f      	cmp	r3, #15
 8002d32:	d80a      	bhi.n	8002d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d34:	2200      	movs	r2, #0
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f000 fd0b 	bl	8003756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d40:	4a06      	ldr	r2, [pc, #24]	; (8002d5c <HAL_InitTick+0x5c>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000008 	.word	0x20000008
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_IncTick+0x20>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_IncTick+0x24>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_IncTick+0x24>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000008 	.word	0x20000008
 8002d84:	20000a74 	.word	0x20000a74

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000a74 	.word	0x20000a74

08002da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff ffee 	bl	8002d88 <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d005      	beq.n	8002dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_Delay+0x44>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc6:	bf00      	nop
 8002dc8:	f7ff ffde 	bl	8002d88 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d8f7      	bhi.n	8002dc8 <HAL_Delay+0x28>
  {
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000008 	.word	0x20000008

08002de8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e033      	b.n	8002e66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff fc48 	bl	800269c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d118      	bne.n	8002e58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e2e:	f023 0302 	bic.w	r3, r3, #2
 8002e32:	f043 0202 	orr.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fab4 	bl	80033a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
 8002e56:	e001      	b.n	8002e5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_Start+0x1a>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e0b2      	b.n	8002ff0 <HAL_ADC_Start+0x180>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d018      	beq.n	8002ed2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb0:	4b52      	ldr	r3, [pc, #328]	; (8002ffc <HAL_ADC_Start+0x18c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	; (8003000 <HAL_ADC_Start+0x190>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0c9a      	lsrs	r2, r3, #18
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ec4:	e002      	b.n	8002ecc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f9      	bne.n	8002ec6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d17a      	bne.n	8002fd6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1e:	d106      	bne.n	8002f2e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	f023 0206 	bic.w	r2, r3, #6
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	645a      	str	r2, [r3, #68]	; 0x44
 8002f2c:	e002      	b.n	8002f34 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f3c:	4b31      	ldr	r3, [pc, #196]	; (8003004 <HAL_ADC_Start+0x194>)
 8002f3e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f48:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d12a      	bne.n	8002fac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2b      	ldr	r2, [pc, #172]	; (8003008 <HAL_ADC_Start+0x198>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d015      	beq.n	8002f8c <HAL_ADC_Start+0x11c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a29      	ldr	r2, [pc, #164]	; (800300c <HAL_ADC_Start+0x19c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d105      	bne.n	8002f76 <HAL_ADC_Start+0x106>
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <HAL_ADC_Start+0x194>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a25      	ldr	r2, [pc, #148]	; (8003010 <HAL_ADC_Start+0x1a0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d136      	bne.n	8002fee <HAL_ADC_Start+0x17e>
 8002f80:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_ADC_Start+0x194>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d130      	bne.n	8002fee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d129      	bne.n	8002fee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fa8:	609a      	str	r2, [r3, #8]
 8002faa:	e020      	b.n	8002fee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a15      	ldr	r2, [pc, #84]	; (8003008 <HAL_ADC_Start+0x198>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d11b      	bne.n	8002fee <HAL_ADC_Start+0x17e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d114      	bne.n	8002fee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	e00b      	b.n	8002fee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f043 0210 	orr.w	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	20000000 	.word	0x20000000
 8003000:	431bde83 	.word	0x431bde83
 8003004:	40012300 	.word	0x40012300
 8003008:	40012000 	.word	0x40012000
 800300c:	40012100 	.word	0x40012100
 8003010:	40012200 	.word	0x40012200

08003014 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003030:	d113      	bne.n	800305a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800303c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003040:	d10b      	bne.n	800305a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f043 0220 	orr.w	r2, r3, #32
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e063      	b.n	8003122 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800305a:	f7ff fe95 	bl	8002d88 <HAL_GetTick>
 800305e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003060:	e021      	b.n	80030a6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d01d      	beq.n	80030a6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <HAL_ADC_PollForConversion+0x6c>
 8003070:	f7ff fe8a 	bl	8002d88 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d212      	bcs.n	80030a6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d00b      	beq.n	80030a6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e03d      	b.n	8003122 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d1d6      	bne.n	8003062 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0212 	mvn.w	r2, #18
 80030bc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d123      	bne.n	8003120 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11f      	bne.n	8003120 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d111      	bne.n	8003120 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1c>
 800315c:	2302      	movs	r3, #2
 800315e:	e113      	b.n	8003388 <HAL_ADC_ConfigChannel+0x244>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b09      	cmp	r3, #9
 800316e:	d925      	bls.n	80031bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68d9      	ldr	r1, [r3, #12]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	3b1e      	subs	r3, #30
 8003186:	2207      	movs	r2, #7
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43da      	mvns	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	400a      	ands	r2, r1
 8003194:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68d9      	ldr	r1, [r3, #12]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	4603      	mov	r3, r0
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4403      	add	r3, r0
 80031ae:	3b1e      	subs	r3, #30
 80031b0:	409a      	lsls	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	e022      	b.n	8003202 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6919      	ldr	r1, [r3, #16]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	2207      	movs	r2, #7
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	400a      	ands	r2, r1
 80031de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4618      	mov	r0, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4403      	add	r3, r0
 80031f8:	409a      	lsls	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b06      	cmp	r3, #6
 8003208:	d824      	bhi.n	8003254 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	3b05      	subs	r3, #5
 800321c:	221f      	movs	r2, #31
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	400a      	ands	r2, r1
 800322a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	4618      	mov	r0, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	3b05      	subs	r3, #5
 8003246:	fa00 f203 	lsl.w	r2, r0, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	635a      	str	r2, [r3, #52]	; 0x34
 8003252:	e04c      	b.n	80032ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d824      	bhi.n	80032a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	3b23      	subs	r3, #35	; 0x23
 800326e:	221f      	movs	r2, #31
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43da      	mvns	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	400a      	ands	r2, r1
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	4618      	mov	r0, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	3b23      	subs	r3, #35	; 0x23
 8003298:	fa00 f203 	lsl.w	r2, r0, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
 80032a4:	e023      	b.n	80032ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b41      	subs	r3, #65	; 0x41
 80032b8:	221f      	movs	r2, #31
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	400a      	ands	r2, r1
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	3b41      	subs	r3, #65	; 0x41
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_ADC_ConfigChannel+0x250>)
 80032f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a28      	ldr	r2, [pc, #160]	; (8003398 <HAL_ADC_ConfigChannel+0x254>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10f      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1d8>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b12      	cmp	r3, #18
 8003302:	d10b      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <HAL_ADC_ConfigChannel+0x254>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d12b      	bne.n	800337e <HAL_ADC_ConfigChannel+0x23a>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1c      	ldr	r2, [pc, #112]	; (800339c <HAL_ADC_ConfigChannel+0x258>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <HAL_ADC_ConfigChannel+0x1f4>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b11      	cmp	r3, #17
 8003336:	d122      	bne.n	800337e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a11      	ldr	r2, [pc, #68]	; (800339c <HAL_ADC_ConfigChannel+0x258>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d111      	bne.n	800337e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_ADC_ConfigChannel+0x25c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <HAL_ADC_ConfigChannel+0x260>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	0c9a      	lsrs	r2, r3, #18
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003370:	e002      	b.n	8003378 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3b01      	subs	r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f9      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40012300 	.word	0x40012300
 8003398:	40012000 	.word	0x40012000
 800339c:	10000012 	.word	0x10000012
 80033a0:	20000000 	.word	0x20000000
 80033a4:	431bde83 	.word	0x431bde83

080033a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b0:	4b79      	ldr	r3, [pc, #484]	; (8003598 <ADC_Init+0x1f0>)
 80033b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	021a      	lsls	r2, r3, #8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003400:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6899      	ldr	r1, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	4a58      	ldr	r2, [pc, #352]	; (800359c <ADC_Init+0x1f4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800344e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6899      	ldr	r1, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e00f      	b.n	80034a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0202 	bic.w	r2, r2, #2
 80034b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6899      	ldr	r1, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7e1b      	ldrb	r3, [r3, #24]
 80034c0:	005a      	lsls	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01b      	beq.n	800350c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	3b01      	subs	r3, #1
 8003500:	035a      	lsls	r2, r3, #13
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	e007      	b.n	800351c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	3b01      	subs	r3, #1
 8003538:	051a      	lsls	r2, r3, #20
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6899      	ldr	r1, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800355e:	025a      	lsls	r2, r3, #9
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003576:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6899      	ldr	r1, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	029a      	lsls	r2, r3, #10
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40012300 	.word	0x40012300
 800359c:	0f000001 	.word	0x0f000001

080035a0 <__NVIC_SetPriorityGrouping>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035bc:	4013      	ands	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035d2:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	60d3      	str	r3, [r2, #12]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_GetPriorityGrouping>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <__NVIC_GetPriorityGrouping+0x18>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0307 	and.w	r3, r3, #7
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_EnableIRQ>:
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	2b00      	cmp	r3, #0
 8003614:	db0b      	blt.n	800362e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <__NVIC_EnableIRQ+0x38>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2001      	movs	r0, #1
 8003626:	fa00 f202 	lsl.w	r2, r0, r2
 800362a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100

08003640 <__NVIC_SetPriority>:
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db0a      	blt.n	800366a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	490c      	ldr	r1, [pc, #48]	; (800368c <__NVIC_SetPriority+0x4c>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	440b      	add	r3, r1
 8003664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003668:	e00a      	b.n	8003680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4908      	ldr	r1, [pc, #32]	; (8003690 <__NVIC_SetPriority+0x50>)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3b04      	subs	r3, #4
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	440b      	add	r3, r1
 800367e:	761a      	strb	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <NVIC_EncodePriority>:
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	; 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f1c3 0307 	rsb	r3, r3, #7
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf28      	it	cs
 80036b2:	2304      	movcs	r3, #4
 80036b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d902      	bls.n	80036c4 <NVIC_EncodePriority+0x30>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3b03      	subs	r3, #3
 80036c2:	e000      	b.n	80036c6 <NVIC_EncodePriority+0x32>
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	401a      	ands	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	4313      	orrs	r3, r2
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	; 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800370c:	d301      	bcc.n	8003712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800370e:	2301      	movs	r3, #1
 8003710:	e00f      	b.n	8003732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <SysTick_Config+0x40>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800371a:	210f      	movs	r1, #15
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	f7ff ff8e 	bl	8003640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <SysTick_Config+0x40>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372a:	4b04      	ldr	r3, [pc, #16]	; (800373c <SysTick_Config+0x40>)
 800372c:	2207      	movs	r2, #7
 800372e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	e000e010 	.word	0xe000e010

08003740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff29 	bl	80035a0 <__NVIC_SetPriorityGrouping>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003768:	f7ff ff3e 	bl	80035e8 <__NVIC_GetPriorityGrouping>
 800376c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f7ff ff8e 	bl	8003694 <NVIC_EncodePriority>
 8003778:	4602      	mov	r2, r0
 800377a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff5d 	bl	8003640 <__NVIC_SetPriority>
}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	4603      	mov	r3, r0
 8003796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff31 	bl	8003604 <__NVIC_EnableIRQ>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ffa2 	bl	80036fc <SysTick_Config>
 80037b8:	4603      	mov	r3, r0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037d0:	f7ff fada 	bl	8002d88 <HAL_GetTick>
 80037d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d008      	beq.n	80037f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e052      	b.n	800389a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0216 	bic.w	r2, r2, #22
 8003802:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003812:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d103      	bne.n	8003824 <HAL_DMA_Abort+0x62>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0208 	bic.w	r2, r2, #8
 8003832:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003844:	e013      	b.n	800386e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003846:	f7ff fa9f 	bl	8002d88 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b05      	cmp	r3, #5
 8003852:	d90c      	bls.n	800386e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2203      	movs	r2, #3
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e015      	b.n	800389a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e4      	bne.n	8003846 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	223f      	movs	r2, #63	; 0x3f
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d004      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e00c      	b.n	80038da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2205      	movs	r2, #5
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	e165      	b.n	8003bd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	429a      	cmp	r2, r3
 800391e:	f040 8154 	bne.w	8003bca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d005      	beq.n	800393a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003936:	2b02      	cmp	r3, #2
 8003938:	d130      	bne.n	800399c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	2203      	movs	r2, #3
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003970:	2201      	movs	r2, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 0201 	and.w	r2, r3, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d017      	beq.n	80039d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	2203      	movs	r2, #3
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d123      	bne.n	8003a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	08da      	lsrs	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3208      	adds	r2, #8
 80039ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	220f      	movs	r2, #15
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	08da      	lsrs	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3208      	adds	r2, #8
 8003a26:	69b9      	ldr	r1, [r7, #24]
 8003a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2203      	movs	r2, #3
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0203 	and.w	r2, r3, #3
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80ae 	beq.w	8003bca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	4b5d      	ldr	r3, [pc, #372]	; (8003be8 <HAL_GPIO_Init+0x300>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	4a5c      	ldr	r2, [pc, #368]	; (8003be8 <HAL_GPIO_Init+0x300>)
 8003a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7e:	4b5a      	ldr	r3, [pc, #360]	; (8003be8 <HAL_GPIO_Init+0x300>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a8a:	4a58      	ldr	r2, [pc, #352]	; (8003bec <HAL_GPIO_Init+0x304>)
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a4f      	ldr	r2, [pc, #316]	; (8003bf0 <HAL_GPIO_Init+0x308>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d025      	beq.n	8003b02 <HAL_GPIO_Init+0x21a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a4e      	ldr	r2, [pc, #312]	; (8003bf4 <HAL_GPIO_Init+0x30c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01f      	beq.n	8003afe <HAL_GPIO_Init+0x216>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a4d      	ldr	r2, [pc, #308]	; (8003bf8 <HAL_GPIO_Init+0x310>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d019      	beq.n	8003afa <HAL_GPIO_Init+0x212>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a4c      	ldr	r2, [pc, #304]	; (8003bfc <HAL_GPIO_Init+0x314>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_GPIO_Init+0x20e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a4b      	ldr	r2, [pc, #300]	; (8003c00 <HAL_GPIO_Init+0x318>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00d      	beq.n	8003af2 <HAL_GPIO_Init+0x20a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a4a      	ldr	r2, [pc, #296]	; (8003c04 <HAL_GPIO_Init+0x31c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <HAL_GPIO_Init+0x206>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a49      	ldr	r2, [pc, #292]	; (8003c08 <HAL_GPIO_Init+0x320>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_GPIO_Init+0x202>
 8003ae6:	2306      	movs	r3, #6
 8003ae8:	e00c      	b.n	8003b04 <HAL_GPIO_Init+0x21c>
 8003aea:	2307      	movs	r3, #7
 8003aec:	e00a      	b.n	8003b04 <HAL_GPIO_Init+0x21c>
 8003aee:	2305      	movs	r3, #5
 8003af0:	e008      	b.n	8003b04 <HAL_GPIO_Init+0x21c>
 8003af2:	2304      	movs	r3, #4
 8003af4:	e006      	b.n	8003b04 <HAL_GPIO_Init+0x21c>
 8003af6:	2303      	movs	r3, #3
 8003af8:	e004      	b.n	8003b04 <HAL_GPIO_Init+0x21c>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e002      	b.n	8003b04 <HAL_GPIO_Init+0x21c>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_GPIO_Init+0x21c>
 8003b02:	2300      	movs	r3, #0
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	f002 0203 	and.w	r2, r2, #3
 8003b0a:	0092      	lsls	r2, r2, #2
 8003b0c:	4093      	lsls	r3, r2
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b14:	4935      	ldr	r1, [pc, #212]	; (8003bec <HAL_GPIO_Init+0x304>)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b22:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b46:	4a31      	ldr	r2, [pc, #196]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b4c:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b70:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b76:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b9a:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba0:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b0f      	cmp	r3, #15
 8003bd4:	f67f ae96 	bls.w	8003904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3724      	adds	r7, #36	; 0x24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40013800 	.word	0x40013800
 8003bf0:	40020000 	.word	0x40020000
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	40020800 	.word	0x40020800
 8003bfc:	40020c00 	.word	0x40020c00
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40021400 	.word	0x40021400
 8003c08:	40021800 	.word	0x40021800
 8003c0c:	40013c00 	.word	0x40013c00

08003c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c20:	787b      	ldrb	r3, [r7, #1]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c26:	887a      	ldrh	r2, [r7, #2]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c2c:	e003      	b.n	8003c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	041a      	lsls	r2, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	619a      	str	r2, [r3, #24]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0cc      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b68      	ldr	r3, [pc, #416]	; (8003dfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d90c      	bls.n	8003c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b65      	ldr	r3, [pc, #404]	; (8003dfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6e:	4b63      	ldr	r3, [pc, #396]	; (8003dfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0b8      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c98:	4b59      	ldr	r3, [pc, #356]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a58      	ldr	r2, [pc, #352]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cb0:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a52      	ldr	r2, [pc, #328]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cbc:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	494d      	ldr	r1, [pc, #308]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d044      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d107      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	4b47      	ldr	r3, [pc, #284]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d119      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e07f      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d02:	4b3f      	ldr	r3, [pc, #252]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e06f      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d12:	4b3b      	ldr	r3, [pc, #236]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e067      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f023 0203 	bic.w	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4934      	ldr	r1, [pc, #208]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d34:	f7ff f828 	bl	8002d88 <HAL_GetTick>
 8003d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d3c:	f7ff f824 	bl	8002d88 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e04f      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 020c 	and.w	r2, r3, #12
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d1eb      	bne.n	8003d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d64:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <HAL_RCC_ClockConfig+0x1b8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d20c      	bcs.n	8003d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e032      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4916      	ldr	r1, [pc, #88]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003db6:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	490e      	ldr	r1, [pc, #56]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dca:	f000 f855 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	490a      	ldr	r1, [pc, #40]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	5ccb      	ldrb	r3, [r1, r3]
 8003dde:	fa22 f303 	lsr.w	r3, r2, r3
 8003de2:	4a09      	ldr	r2, [pc, #36]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HAL_RCC_ClockConfig+0x1c8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe ff88 	bl	8002d00 <HAL_InitTick>

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023c00 	.word	0x40023c00
 8003e00:	40023800 	.word	0x40023800
 8003e04:	080073e4 	.word	0x080073e4
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	20000004 	.word	0x20000004

08003e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000000 	.word	0x20000000

08003e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e2c:	f7ff fff0 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0a9b      	lsrs	r3, r3, #10
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	080073f4 	.word	0x080073f4

08003e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e54:	f7ff ffdc 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	0b5b      	lsrs	r3, r3, #13
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40023800 	.word	0x40023800
 8003e74:	080073f4 	.word	0x080073f4

08003e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e7c:	b087      	sub	sp, #28
 8003e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e80:	2600      	movs	r6, #0
 8003e82:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8003e84:	2600      	movs	r6, #0
 8003e86:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8003e88:	2600      	movs	r6, #0
 8003e8a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8003e8c:	2600      	movs	r6, #0
 8003e8e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e90:	2600      	movs	r6, #0
 8003e92:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e94:	4ea3      	ldr	r6, [pc, #652]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003e96:	68b6      	ldr	r6, [r6, #8]
 8003e98:	f006 060c 	and.w	r6, r6, #12
 8003e9c:	2e0c      	cmp	r6, #12
 8003e9e:	f200 8137 	bhi.w	8004110 <HAL_RCC_GetSysClockFreq+0x298>
 8003ea2:	f20f 0c08 	addw	ip, pc, #8
 8003ea6:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ee1 	.word	0x08003ee1
 8003eb0:	08004111 	.word	0x08004111
 8003eb4:	08004111 	.word	0x08004111
 8003eb8:	08004111 	.word	0x08004111
 8003ebc:	08003ee7 	.word	0x08003ee7
 8003ec0:	08004111 	.word	0x08004111
 8003ec4:	08004111 	.word	0x08004111
 8003ec8:	08004111 	.word	0x08004111
 8003ecc:	08003eed 	.word	0x08003eed
 8003ed0:	08004111 	.word	0x08004111
 8003ed4:	08004111 	.word	0x08004111
 8003ed8:	08004111 	.word	0x08004111
 8003edc:	08004003 	.word	0x08004003
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4b91      	ldr	r3, [pc, #580]	; (8004128 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003ee2:	613b      	str	r3, [r7, #16]
       break;
 8003ee4:	e117      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ee6:	4b91      	ldr	r3, [pc, #580]	; (800412c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003ee8:	613b      	str	r3, [r7, #16]
      break;
 8003eea:	e114      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eec:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef6:	4b8b      	ldr	r3, [pc, #556]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d024      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f02:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003f12:	f04f 0500 	mov.w	r5, #0
 8003f16:	ea02 0004 	and.w	r0, r2, r4
 8003f1a:	ea03 0105 	and.w	r1, r3, r5
 8003f1e:	4b83      	ldr	r3, [pc, #524]	; (800412c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003f20:	fb03 f201 	mul.w	r2, r3, r1
 8003f24:	2300      	movs	r3, #0
 8003f26:	fb03 f300 	mul.w	r3, r3, r0
 8003f2a:	4413      	add	r3, r2
 8003f2c:	4a7f      	ldr	r2, [pc, #508]	; (800412c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003f2e:	fba0 0102 	umull	r0, r1, r0, r2
 8003f32:	440b      	add	r3, r1
 8003f34:	4619      	mov	r1, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	f7fc fe8d 	bl	8000c5c <__aeabi_uldivmod>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4613      	mov	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e04c      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4c:	4b75      	ldr	r3, [pc, #468]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	461a      	mov	r2, r3
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	ea02 0800 	and.w	r8, r2, r0
 8003f64:	ea03 0901 	and.w	r9, r3, r1
 8003f68:	4640      	mov	r0, r8
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	014b      	lsls	r3, r1, #5
 8003f76:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f7a:	0142      	lsls	r2, r0, #5
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	ebb0 0008 	subs.w	r0, r0, r8
 8003f84:	eb61 0109 	sbc.w	r1, r1, r9
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	018b      	lsls	r3, r1, #6
 8003f92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f96:	0182      	lsls	r2, r0, #6
 8003f98:	1a12      	subs	r2, r2, r0
 8003f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9e:	f04f 0000 	mov.w	r0, #0
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	00d9      	lsls	r1, r3, #3
 8003fa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fac:	00d0      	lsls	r0, r2, #3
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	eb12 0208 	adds.w	r2, r2, r8
 8003fb6:	eb43 0309 	adc.w	r3, r3, r9
 8003fba:	f04f 0000 	mov.w	r0, #0
 8003fbe:	f04f 0100 	mov.w	r1, #0
 8003fc2:	0299      	lsls	r1, r3, #10
 8003fc4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fc8:	0290      	lsls	r0, r2, #10
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	f7fc fe3f 	bl	8000c5c <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fe6:	4b4f      	ldr	r3, [pc, #316]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	0c1b      	lsrs	r3, r3, #16
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	613b      	str	r3, [r7, #16]
      break;
 8004000:	e089      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004002:	4948      	ldr	r1, [pc, #288]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004004:	6849      	ldr	r1, [r1, #4]
 8004006:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800400a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400c:	4945      	ldr	r1, [pc, #276]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800400e:	6849      	ldr	r1, [r1, #4]
 8004010:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004014:	2900      	cmp	r1, #0
 8004016:	d024      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004018:	4942      	ldr	r1, [pc, #264]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800401a:	6849      	ldr	r1, [r1, #4]
 800401c:	0989      	lsrs	r1, r1, #6
 800401e:	4608      	mov	r0, r1
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004028:	f04f 0500 	mov.w	r5, #0
 800402c:	ea00 0204 	and.w	r2, r0, r4
 8004030:	ea01 0305 	and.w	r3, r1, r5
 8004034:	493d      	ldr	r1, [pc, #244]	; (800412c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8004036:	fb01 f003 	mul.w	r0, r1, r3
 800403a:	2100      	movs	r1, #0
 800403c:	fb01 f102 	mul.w	r1, r1, r2
 8004040:	1844      	adds	r4, r0, r1
 8004042:	493a      	ldr	r1, [pc, #232]	; (800412c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8004044:	fba2 0101 	umull	r0, r1, r2, r1
 8004048:	1863      	adds	r3, r4, r1
 800404a:	4619      	mov	r1, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	461a      	mov	r2, r3
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	f7fc fe02 	bl	8000c5c <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e04a      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004062:	4b30      	ldr	r3, [pc, #192]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	461a      	mov	r2, r3
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	ea02 0400 	and.w	r4, r2, r0
 800407a:	ea03 0501 	and.w	r5, r3, r1
 800407e:	4620      	mov	r0, r4
 8004080:	4629      	mov	r1, r5
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	014b      	lsls	r3, r1, #5
 800408c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004090:	0142      	lsls	r2, r0, #5
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	1b00      	subs	r0, r0, r4
 8004098:	eb61 0105 	sbc.w	r1, r1, r5
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	018b      	lsls	r3, r1, #6
 80040a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040aa:	0182      	lsls	r2, r0, #6
 80040ac:	1a12      	subs	r2, r2, r0
 80040ae:	eb63 0301 	sbc.w	r3, r3, r1
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	00d9      	lsls	r1, r3, #3
 80040bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040c0:	00d0      	lsls	r0, r2, #3
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	1912      	adds	r2, r2, r4
 80040c8:	eb45 0303 	adc.w	r3, r5, r3
 80040cc:	f04f 0000 	mov.w	r0, #0
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	0299      	lsls	r1, r3, #10
 80040d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040da:	0290      	lsls	r0, r2, #10
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	f7fc fdb6 	bl	8000c5c <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4613      	mov	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0f1b      	lsrs	r3, r3, #28
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	613b      	str	r3, [r7, #16]
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8004112:	613b      	str	r3, [r7, #16]
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	693b      	ldr	r3, [r7, #16]
}
 8004118:	4618      	mov	r0, r3
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	00f42400 	.word	0x00f42400
 800412c:	017d7840 	.word	0x017d7840

08004130 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e28d      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8083 	beq.w	8004256 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004150:	4b94      	ldr	r3, [pc, #592]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 030c 	and.w	r3, r3, #12
 8004158:	2b04      	cmp	r3, #4
 800415a:	d019      	beq.n	8004190 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800415c:	4b91      	ldr	r3, [pc, #580]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004164:	2b08      	cmp	r3, #8
 8004166:	d106      	bne.n	8004176 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004168:	4b8e      	ldr	r3, [pc, #568]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004174:	d00c      	beq.n	8004190 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004176:	4b8b      	ldr	r3, [pc, #556]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d112      	bne.n	80041a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004182:	4b88      	ldr	r3, [pc, #544]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418e:	d10b      	bne.n	80041a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	4b84      	ldr	r3, [pc, #528]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d05b      	beq.n	8004254 <HAL_RCC_OscConfig+0x124>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d157      	bne.n	8004254 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e25a      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b0:	d106      	bne.n	80041c0 <HAL_RCC_OscConfig+0x90>
 80041b2:	4b7c      	ldr	r3, [pc, #496]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a7b      	ldr	r2, [pc, #492]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e01d      	b.n	80041fc <HAL_RCC_OscConfig+0xcc>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0xb4>
 80041ca:	4b76      	ldr	r3, [pc, #472]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a75      	ldr	r2, [pc, #468]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b73      	ldr	r3, [pc, #460]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a72      	ldr	r2, [pc, #456]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_OscConfig+0xcc>
 80041e4:	4b6f      	ldr	r3, [pc, #444]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6e      	ldr	r2, [pc, #440]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b6c      	ldr	r3, [pc, #432]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a6b      	ldr	r2, [pc, #428]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d013      	beq.n	800422c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fe fdc0 	bl	8002d88 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420c:	f7fe fdbc 	bl	8002d88 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e21f      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	4b61      	ldr	r3, [pc, #388]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0xdc>
 800422a:	e014      	b.n	8004256 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe fdac 	bl	8002d88 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004234:	f7fe fda8 	bl	8002d88 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e20b      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004246:	4b57      	ldr	r3, [pc, #348]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x104>
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d06f      	beq.n	8004342 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004262:	4b50      	ldr	r3, [pc, #320]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b00      	cmp	r3, #0
 800426c:	d017      	beq.n	800429e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800426e:	4b4d      	ldr	r3, [pc, #308]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004276:	2b08      	cmp	r3, #8
 8004278:	d105      	bne.n	8004286 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800427a:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b47      	ldr	r3, [pc, #284]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d11c      	bne.n	80042cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004292:	4b44      	ldr	r3, [pc, #272]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x186>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1d3      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	4b3b      	ldr	r3, [pc, #236]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4937      	ldr	r1, [pc, #220]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	e03a      	b.n	8004342 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d4:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCC_OscConfig+0x278>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fe fd55 	bl	8002d88 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e2:	f7fe fd51 	bl	8002d88 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1b4      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4925      	ldr	r1, [pc, #148]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
 8004314:	e015      	b.n	8004342 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCC_OscConfig+0x278>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fe fd34 	bl	8002d88 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004324:	f7fe fd30 	bl	8002d88 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e193      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d036      	beq.n	80043bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7fe fd14 	bl	8002d88 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004364:	f7fe fd10 	bl	8002d88 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e173      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x234>
 8004382:	e01b      	b.n	80043bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fe fcfd 	bl	8002d88 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004390:	e00e      	b.n	80043b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004392:	f7fe fcf9 	bl	8002d88 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d907      	bls.n	80043b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e15c      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
 80043a4:	40023800 	.word	0x40023800
 80043a8:	42470000 	.word	0x42470000
 80043ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	4b8a      	ldr	r3, [pc, #552]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80043b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1ea      	bne.n	8004392 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8097 	beq.w	80044f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ce:	4b83      	ldr	r3, [pc, #524]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	4b7f      	ldr	r3, [pc, #508]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	4a7e      	ldr	r2, [pc, #504]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ea:	4b7c      	ldr	r3, [pc, #496]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fa:	4b79      	ldr	r3, [pc, #484]	; (80045e0 <HAL_RCC_OscConfig+0x4b0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d118      	bne.n	8004438 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004406:	4b76      	ldr	r3, [pc, #472]	; (80045e0 <HAL_RCC_OscConfig+0x4b0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a75      	ldr	r2, [pc, #468]	; (80045e0 <HAL_RCC_OscConfig+0x4b0>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004412:	f7fe fcb9 	bl	8002d88 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441a:	f7fe fcb5 	bl	8002d88 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e118      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442c:	4b6c      	ldr	r3, [pc, #432]	; (80045e0 <HAL_RCC_OscConfig+0x4b0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x31e>
 8004440:	4b66      	ldr	r3, [pc, #408]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	4a65      	ldr	r2, [pc, #404]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	e01c      	b.n	8004488 <HAL_RCC_OscConfig+0x358>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b05      	cmp	r3, #5
 8004454:	d10c      	bne.n	8004470 <HAL_RCC_OscConfig+0x340>
 8004456:	4b61      	ldr	r3, [pc, #388]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	4a60      	ldr	r2, [pc, #384]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 800445c:	f043 0304 	orr.w	r3, r3, #4
 8004460:	6713      	str	r3, [r2, #112]	; 0x70
 8004462:	4b5e      	ldr	r3, [pc, #376]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	4a5d      	ldr	r2, [pc, #372]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6713      	str	r3, [r2, #112]	; 0x70
 800446e:	e00b      	b.n	8004488 <HAL_RCC_OscConfig+0x358>
 8004470:	4b5a      	ldr	r3, [pc, #360]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	4a59      	ldr	r2, [pc, #356]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	6713      	str	r3, [r2, #112]	; 0x70
 800447c:	4b57      	ldr	r3, [pc, #348]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	4a56      	ldr	r2, [pc, #344]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004482:	f023 0304 	bic.w	r3, r3, #4
 8004486:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d015      	beq.n	80044bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fe fc7a 	bl	8002d88 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fe fc76 	bl	8002d88 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e0d7      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ae:	4b4b      	ldr	r3, [pc, #300]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0ee      	beq.n	8004498 <HAL_RCC_OscConfig+0x368>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fe fc64 	bl	8002d88 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c2:	e00a      	b.n	80044da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fe fc60 	bl	8002d88 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0c1      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044da:	4b40      	ldr	r3, [pc, #256]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1ee      	bne.n	80044c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ec:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	4a3a      	ldr	r2, [pc, #232]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80044f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80ad 	beq.w	800465c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004502:	4b36      	ldr	r3, [pc, #216]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b08      	cmp	r3, #8
 800450c:	d060      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d145      	bne.n	80045a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004516:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <HAL_RCC_OscConfig+0x4b4>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fe fc34 	bl	8002d88 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004524:	f7fe fc30 	bl	8002d88 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e093      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	4b29      	ldr	r3, [pc, #164]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	3b01      	subs	r3, #1
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	071b      	lsls	r3, r3, #28
 800456e:	491b      	ldr	r1, [pc, #108]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x4b4>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fe fc05 	bl	8002d88 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004582:	f7fe fc01 	bl	8002d88 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e064      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x452>
 80045a0:	e05c      	b.n	800465c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_RCC_OscConfig+0x4b4>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fe fbee 	bl	8002d88 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fe fbea 	bl	8002d88 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e04d      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x480>
 80045ce:	e045      	b.n	800465c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d107      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e040      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40007000 	.word	0x40007000
 80045e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045e8:	4b1f      	ldr	r3, [pc, #124]	; (8004668 <HAL_RCC_OscConfig+0x538>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d030      	beq.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d129      	bne.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d122      	bne.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004618:	4013      	ands	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800461e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004620:	4293      	cmp	r3, r2
 8004622:	d119      	bne.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	3b01      	subs	r3, #1
 8004632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d10f      	bne.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d107      	bne.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d001      	beq.n	800465c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40023800 	.word	0x40023800

0800466c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e041      	b.n	8004702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fe f87c 	bl	8002790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f000 fc7a 	bl	8004fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b01      	cmp	r3, #1
 800471e:	d001      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e04e      	b.n	80047c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d022      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d01d      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <HAL_TIM_Base_Start_IT+0xd0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00e      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d111      	bne.n	80047b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b06      	cmp	r3, #6
 800479c:	d010      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	e007      	b.n	80047c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40010400 	.word	0x40010400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40001800 	.word	0x40001800

080047ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e041      	b.n	8004882 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fd ff86 	bl	8002724 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f000 fbba 	bl	8004fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <HAL_TIM_PWM_Start+0x24>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e022      	b.n	80048f6 <HAL_TIM_PWM_Start+0x6a>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d109      	bne.n	80048ca <HAL_TIM_PWM_Start+0x3e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b01      	cmp	r3, #1
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e015      	b.n	80048f6 <HAL_TIM_PWM_Start+0x6a>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d109      	bne.n	80048e4 <HAL_TIM_PWM_Start+0x58>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e008      	b.n	80048f6 <HAL_TIM_PWM_Start+0x6a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e07c      	b.n	80049f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <HAL_TIM_PWM_Start+0x82>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800490c:	e013      	b.n	8004936 <HAL_TIM_PWM_Start+0xaa>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b04      	cmp	r3, #4
 8004912:	d104      	bne.n	800491e <HAL_TIM_PWM_Start+0x92>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800491c:	e00b      	b.n	8004936 <HAL_TIM_PWM_Start+0xaa>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d104      	bne.n	800492e <HAL_TIM_PWM_Start+0xa2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800492c:	e003      	b.n	8004936 <HAL_TIM_PWM_Start+0xaa>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2201      	movs	r2, #1
 800493c:	6839      	ldr	r1, [r7, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fe1a 	bl	8005578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2d      	ldr	r2, [pc, #180]	; (8004a00 <HAL_TIM_PWM_Start+0x174>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_PWM_Start+0xcc>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2c      	ldr	r2, [pc, #176]	; (8004a04 <HAL_TIM_PWM_Start+0x178>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_TIM_PWM_Start+0xd0>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_TIM_PWM_Start+0xd2>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004970:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <HAL_TIM_PWM_Start+0x174>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d01d      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <HAL_TIM_PWM_Start+0x17c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <HAL_TIM_PWM_Start+0x180>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_TIM_PWM_Start+0x184>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a16      	ldr	r2, [pc, #88]	; (8004a04 <HAL_TIM_PWM_Start+0x178>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <HAL_TIM_PWM_Start+0x188>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_TIM_PWM_Start+0x136>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <HAL_TIM_PWM_Start+0x18c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d111      	bne.n	80049e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b06      	cmp	r3, #6
 80049d2:	d010      	beq.n	80049f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e4:	e007      	b.n	80049f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40010400 	.word	0x40010400
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40001800 	.word	0x40001800

08004a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0202 	mvn.w	r2, #2
 8004a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa81 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa73 	bl	8004f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fa84 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d122      	bne.n	8004acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d11b      	bne.n	8004acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0204 	mvn.w	r2, #4
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa57 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa49 	bl	8004f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fa5a 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d122      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0208 	mvn.w	r2, #8
 8004af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2204      	movs	r2, #4
 8004af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa2d 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa1f 	bl	8004f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fa30 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0210 	mvn.w	r2, #16
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa03 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f9f5 	bl	8004f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa06 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10e      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d107      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0201 	mvn.w	r2, #1
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9cf 	bl	8004f3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d10e      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d107      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fd82 	bl	80056d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f9cb 	bl	8004f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d10e      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d107      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0220 	mvn.w	r2, #32
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fd4c 	bl	80056bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e0ae      	b.n	8004da8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b0c      	cmp	r3, #12
 8004c56:	f200 809f 	bhi.w	8004d98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004d99 	.word	0x08004d99
 8004c68:	08004d99 	.word	0x08004d99
 8004c6c:	08004d99 	.word	0x08004d99
 8004c70:	08004cd5 	.word	0x08004cd5
 8004c74:	08004d99 	.word	0x08004d99
 8004c78:	08004d99 	.word	0x08004d99
 8004c7c:	08004d99 	.word	0x08004d99
 8004c80:	08004d17 	.word	0x08004d17
 8004c84:	08004d99 	.word	0x08004d99
 8004c88:	08004d99 	.word	0x08004d99
 8004c8c:	08004d99 	.word	0x08004d99
 8004c90:	08004d57 	.word	0x08004d57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fa22 	bl	80050e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0208 	orr.w	r2, r2, #8
 8004cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0204 	bic.w	r2, r2, #4
 8004cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6999      	ldr	r1, [r3, #24]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	619a      	str	r2, [r3, #24]
      break;
 8004cd2:	e064      	b.n	8004d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fa72 	bl	80051c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6999      	ldr	r1, [r3, #24]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	619a      	str	r2, [r3, #24]
      break;
 8004d14:	e043      	b.n	8004d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fac7 	bl	80052b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0208 	orr.w	r2, r2, #8
 8004d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0204 	bic.w	r2, r2, #4
 8004d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69d9      	ldr	r1, [r3, #28]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	61da      	str	r2, [r3, #28]
      break;
 8004d54:	e023      	b.n	8004d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fb1b 	bl	8005398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69d9      	ldr	r1, [r3, #28]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	021a      	lsls	r2, r3, #8
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	61da      	str	r2, [r3, #28]
      break;
 8004d96:	e002      	b.n	8004d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIM_ConfigClockSource+0x1c>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e0b4      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x186>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e04:	d03e      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0xd4>
 8004e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0a:	f200 8087 	bhi.w	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e12:	f000 8086 	beq.w	8004f22 <HAL_TIM_ConfigClockSource+0x172>
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1a:	d87f      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b70      	cmp	r3, #112	; 0x70
 8004e1e:	d01a      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0xa6>
 8004e20:	2b70      	cmp	r3, #112	; 0x70
 8004e22:	d87b      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b60      	cmp	r3, #96	; 0x60
 8004e26:	d050      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x11a>
 8004e28:	2b60      	cmp	r3, #96	; 0x60
 8004e2a:	d877      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e2c:	2b50      	cmp	r3, #80	; 0x50
 8004e2e:	d03c      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0xfa>
 8004e30:	2b50      	cmp	r3, #80	; 0x50
 8004e32:	d873      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d058      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0x13a>
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d86f      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e3c:	2b30      	cmp	r3, #48	; 0x30
 8004e3e:	d064      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x15a>
 8004e40:	2b30      	cmp	r3, #48	; 0x30
 8004e42:	d86b      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d060      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x15a>
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d867      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d05c      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x15a>
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d05a      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x15a>
 8004e54:	e062      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6899      	ldr	r1, [r3, #8]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f000 fb67 	bl	8005538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	609a      	str	r2, [r3, #8]
      break;
 8004e82:	e04f      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6899      	ldr	r1, [r3, #8]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f000 fb50 	bl	8005538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea6:	609a      	str	r2, [r3, #8]
      break;
 8004ea8:	e03c      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f000 fac4 	bl	8005444 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2150      	movs	r1, #80	; 0x50
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fb1d 	bl	8005502 <TIM_ITRx_SetConfig>
      break;
 8004ec8:	e02c      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6859      	ldr	r1, [r3, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f000 fae3 	bl	80054a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2160      	movs	r1, #96	; 0x60
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fb0d 	bl	8005502 <TIM_ITRx_SetConfig>
      break;
 8004ee8:	e01c      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f000 faa4 	bl	8005444 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2140      	movs	r1, #64	; 0x40
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fafd 	bl	8005502 <TIM_ITRx_SetConfig>
      break;
 8004f08:	e00c      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f000 faf4 	bl	8005502 <TIM_ITRx_SetConfig>
      break;
 8004f1a:	e003      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f20:	e000      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a40      	ldr	r2, [pc, #256]	; (80050b8 <TIM_Base_SetConfig+0x114>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d013      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc2:	d00f      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a3d      	ldr	r2, [pc, #244]	; (80050bc <TIM_Base_SetConfig+0x118>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a3c      	ldr	r2, [pc, #240]	; (80050c0 <TIM_Base_SetConfig+0x11c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d007      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a3b      	ldr	r2, [pc, #236]	; (80050c4 <TIM_Base_SetConfig+0x120>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a3a      	ldr	r2, [pc, #232]	; (80050c8 <TIM_Base_SetConfig+0x124>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d108      	bne.n	8004ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2f      	ldr	r2, [pc, #188]	; (80050b8 <TIM_Base_SetConfig+0x114>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d02b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005004:	d027      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2c      	ldr	r2, [pc, #176]	; (80050bc <TIM_Base_SetConfig+0x118>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d023      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2b      	ldr	r2, [pc, #172]	; (80050c0 <TIM_Base_SetConfig+0x11c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01f      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2a      	ldr	r2, [pc, #168]	; (80050c4 <TIM_Base_SetConfig+0x120>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a29      	ldr	r2, [pc, #164]	; (80050c8 <TIM_Base_SetConfig+0x124>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d017      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a28      	ldr	r2, [pc, #160]	; (80050cc <TIM_Base_SetConfig+0x128>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a27      	ldr	r2, [pc, #156]	; (80050d0 <TIM_Base_SetConfig+0x12c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a26      	ldr	r2, [pc, #152]	; (80050d4 <TIM_Base_SetConfig+0x130>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a25      	ldr	r2, [pc, #148]	; (80050d8 <TIM_Base_SetConfig+0x134>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a24      	ldr	r2, [pc, #144]	; (80050dc <TIM_Base_SetConfig+0x138>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a23      	ldr	r2, [pc, #140]	; (80050e0 <TIM_Base_SetConfig+0x13c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a0a      	ldr	r2, [pc, #40]	; (80050b8 <TIM_Base_SetConfig+0x114>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_Base_SetConfig+0xf8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <TIM_Base_SetConfig+0x124>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d103      	bne.n	80050a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	615a      	str	r2, [r3, #20]
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40014400 	.word	0x40014400
 80050d4:	40014800 	.word	0x40014800
 80050d8:	40001800 	.word	0x40001800
 80050dc:	40001c00 	.word	0x40001c00
 80050e0:	40002000 	.word	0x40002000

080050e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0303 	bic.w	r3, r3, #3
 800511a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f023 0302 	bic.w	r3, r3, #2
 800512c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a20      	ldr	r2, [pc, #128]	; (80051bc <TIM_OC1_SetConfig+0xd8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC1_SetConfig+0x64>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <TIM_OC1_SetConfig+0xdc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10c      	bne.n	8005162 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 0308 	bic.w	r3, r3, #8
 800514e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a15      	ldr	r2, [pc, #84]	; (80051bc <TIM_OC1_SetConfig+0xd8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_OC1_SetConfig+0x8e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <TIM_OC1_SetConfig+0xdc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d111      	bne.n	8005196 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40010400 	.word	0x40010400

080051c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f023 0210 	bic.w	r2, r3, #16
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0320 	bic.w	r3, r3, #32
 800520e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <TIM_OC2_SetConfig+0xe4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC2_SetConfig+0x68>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a21      	ldr	r2, [pc, #132]	; (80052ac <TIM_OC2_SetConfig+0xe8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10d      	bne.n	8005248 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <TIM_OC2_SetConfig+0xe4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC2_SetConfig+0x94>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a16      	ldr	r2, [pc, #88]	; (80052ac <TIM_OC2_SetConfig+0xe8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d113      	bne.n	8005280 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800525e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40010400 	.word	0x40010400

080052b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a21      	ldr	r2, [pc, #132]	; (8005390 <TIM_OC3_SetConfig+0xe0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <TIM_OC3_SetConfig+0x66>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a20      	ldr	r2, [pc, #128]	; (8005394 <TIM_OC3_SetConfig+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d10d      	bne.n	8005332 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800531c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a16      	ldr	r2, [pc, #88]	; (8005390 <TIM_OC3_SetConfig+0xe0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d003      	beq.n	8005342 <TIM_OC3_SetConfig+0x92>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a15      	ldr	r2, [pc, #84]	; (8005394 <TIM_OC3_SetConfig+0xe4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d113      	bne.n	800536a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40010000 	.word	0x40010000
 8005394:	40010400 	.word	0x40010400

08005398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a12      	ldr	r2, [pc, #72]	; (800543c <TIM_OC4_SetConfig+0xa4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_OC4_SetConfig+0x68>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a11      	ldr	r2, [pc, #68]	; (8005440 <TIM_OC4_SetConfig+0xa8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d109      	bne.n	8005414 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000
 8005440:	40010400 	.word	0x40010400

08005444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f023 0201 	bic.w	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800546e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f023 030a 	bic.w	r3, r3, #10
 8005480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b087      	sub	sp, #28
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f023 0210 	bic.w	r2, r3, #16
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	031b      	lsls	r3, r3, #12
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	f043 0307 	orr.w	r3, r3, #7
 8005524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	609a      	str	r2, [r3, #8]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	021a      	lsls	r2, r3, #8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	431a      	orrs	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4313      	orrs	r3, r2
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	609a      	str	r2, [r3, #8]
}
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	2201      	movs	r2, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1a      	ldr	r2, [r3, #32]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	43db      	mvns	r3, r3
 800559a:	401a      	ands	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	fa01 f303 	lsl.w	r3, r1, r3
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d8:	2302      	movs	r3, #2
 80055da:	e05a      	b.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a21      	ldr	r2, [pc, #132]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d022      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005628:	d01d      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d018      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1b      	ldr	r2, [pc, #108]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1a      	ldr	r2, [pc, #104]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00e      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a18      	ldr	r2, [pc, #96]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d009      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d10c      	bne.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800566c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	4313      	orrs	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40000400 	.word	0x40000400
 80056a8:	40000800 	.word	0x40000800
 80056ac:	40000c00 	.word	0x40000c00
 80056b0:	40010400 	.word	0x40010400
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40001800 	.word	0x40001800

080056bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e03f      	b.n	8005776 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fd f8c6 	bl	800289c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2224      	movs	r2, #36	; 0x24
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fe1d 	bl	8006368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800573c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800574c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800575c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b08a      	sub	sp, #40	; 0x28
 8005782:	af02      	add	r7, sp, #8
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b20      	cmp	r3, #32
 800579c:	d17c      	bne.n	8005898 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <HAL_UART_Transmit+0x2c>
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e075      	b.n	800589a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_UART_Transmit+0x3e>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e06e      	b.n	800589a <HAL_UART_Transmit+0x11c>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2221      	movs	r2, #33	; 0x21
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057d2:	f7fd fad9 	bl	8002d88 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	88fa      	ldrh	r2, [r7, #6]
 80057dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	88fa      	ldrh	r2, [r7, #6]
 80057e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ec:	d108      	bne.n	8005800 <HAL_UART_Transmit+0x82>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d104      	bne.n	8005800 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	61bb      	str	r3, [r7, #24]
 80057fe:	e003      	b.n	8005808 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005804:	2300      	movs	r3, #0
 8005806:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005810:	e02a      	b.n	8005868 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	2180      	movs	r1, #128	; 0x80
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fb9b 	bl	8005f58 <UART_WaitOnFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e036      	b.n	800589a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005840:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	3302      	adds	r3, #2
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	e007      	b.n	800585a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	781a      	ldrb	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	3301      	adds	r3, #1
 8005858:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1cf      	bne.n	8005812 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2200      	movs	r2, #0
 800587a:	2140      	movs	r1, #64	; 0x40
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fb6b 	bl	8005f58 <UART_WaitOnFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e006      	b.n	800589a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	e000      	b.n	800589a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005898:	2302      	movs	r3, #2
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3720      	adds	r7, #32
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b08a      	sub	sp, #40	; 0x28
 80058a6:	af02      	add	r7, sp, #8
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b20      	cmp	r3, #32
 80058c0:	f040 808c 	bne.w	80059dc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_UART_Receive+0x2e>
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e084      	b.n	80059de <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_UART_Receive+0x40>
 80058de:	2302      	movs	r3, #2
 80058e0:	e07d      	b.n	80059de <HAL_UART_Receive+0x13c>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2222      	movs	r2, #34	; 0x22
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058fe:	f7fd fa43 	bl	8002d88 <HAL_GetTick>
 8005902:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	88fa      	ldrh	r2, [r7, #6]
 800590e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005918:	d108      	bne.n	800592c <HAL_UART_Receive+0x8a>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d104      	bne.n	800592c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	e003      	b.n	8005934 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800593c:	e043      	b.n	80059c6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2120      	movs	r1, #32
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fb05 	bl	8005f58 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e042      	b.n	80059de <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10c      	bne.n	8005978 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	b29b      	uxth	r3, r3
 8005966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596a:	b29a      	uxth	r2, r3
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	3302      	adds	r3, #2
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	e01f      	b.n	80059b8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005980:	d007      	beq.n	8005992 <HAL_UART_Receive+0xf0>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <HAL_UART_Receive+0xfe>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	e008      	b.n	80059b2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3301      	adds	r3, #1
 80059b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1b6      	bne.n	800593e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	e000      	b.n	80059de <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80059dc:	2302      	movs	r3, #2
  }
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b0ba      	sub	sp, #232	; 0xe8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10f      	bne.n	8005a4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <HAL_UART_IRQHandler+0x66>
 8005a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fbd3 	bl	80061f2 <UART_Receive_IT>
      return;
 8005a4c:	e256      	b.n	8005efc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80de 	beq.w	8005c14 <HAL_UART_IRQHandler+0x22c>
 8005a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80d1 	beq.w	8005c14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <HAL_UART_IRQHandler+0xae>
 8005a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f043 0201 	orr.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <HAL_UART_IRQHandler+0xd2>
 8005aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f043 0202 	orr.w	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <HAL_UART_IRQHandler+0xf6>
 8005ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f043 0204 	orr.w	r2, r3, #4
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d011      	beq.n	8005b0e <HAL_UART_IRQHandler+0x126>
 8005aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d105      	bne.n	8005b02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0208 	orr.w	r2, r3, #8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 81ed 	beq.w	8005ef2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_UART_IRQHandler+0x14e>
 8005b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fb5e 	bl	80061f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	bf0c      	ite	eq
 8005b44:	2301      	moveq	r3, #1
 8005b46:	2300      	movne	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <HAL_UART_IRQHandler+0x17a>
 8005b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d04f      	beq.n	8005c02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fa66 	bl	8006034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d141      	bne.n	8005bfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3314      	adds	r3, #20
 8005b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3314      	adds	r3, #20
 8005b9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ba2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1d9      	bne.n	8005b76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d013      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	4a7d      	ldr	r2, [pc, #500]	; (8005dc4 <HAL_UART_IRQHandler+0x3dc>)
 8005bd0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fd fe63 	bl	80038a2 <HAL_DMA_Abort_IT>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d016      	beq.n	8005c10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bec:	4610      	mov	r0, r2
 8005bee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf0:	e00e      	b.n	8005c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f99a 	bl	8005f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf8:	e00a      	b.n	8005c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f996 	bl	8005f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	e006      	b.n	8005c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f992 	bl	8005f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c0e:	e170      	b.n	8005ef2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c10:	bf00      	nop
    return;
 8005c12:	e16e      	b.n	8005ef2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	f040 814a 	bne.w	8005eb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c22:	f003 0310 	and.w	r3, r3, #16
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 8143 	beq.w	8005eb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 813c 	beq.w	8005eb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	60bb      	str	r3, [r7, #8]
 8005c4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	f040 80b4 	bne.w	8005dc8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8140 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	f080 8139 	bcs.w	8005ef6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c96:	f000 8088 	beq.w	8005daa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	330c      	adds	r3, #12
 8005ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005cc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1d9      	bne.n	8005c9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3314      	adds	r3, #20
 8005cec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3314      	adds	r3, #20
 8005d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e1      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3314      	adds	r3, #20
 8005d28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3314      	adds	r3, #20
 8005d42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e3      	bne.n	8005d22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7a:	f023 0310 	bic.w	r3, r3, #16
 8005d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e3      	bne.n	8005d68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fd fd0c 	bl	80037c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f8c0 	bl	8005f40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dc0:	e099      	b.n	8005ef6 <HAL_UART_IRQHandler+0x50e>
 8005dc2:	bf00      	nop
 8005dc4:	080060fb 	.word	0x080060fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 808b 	beq.w	8005efa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8086 	beq.w	8005efa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e12:	647a      	str	r2, [r7, #68]	; 0x44
 8005e14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e3      	bne.n	8005dee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3314      	adds	r3, #20
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	623b      	str	r3, [r7, #32]
   return(result);
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	f023 0301 	bic.w	r3, r3, #1
 8005e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e4a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e3      	bne.n	8005e26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0310 	bic.w	r3, r3, #16
 8005e82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e90:	61fa      	str	r2, [r7, #28]
 8005e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	69b9      	ldr	r1, [r7, #24]
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e3      	bne.n	8005e6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f848 	bl	8005f40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005eb0:	e023      	b.n	8005efa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x4ea>
 8005ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f929 	bl	8006122 <UART_Transmit_IT>
    return;
 8005ed0:	e014      	b.n	8005efc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00e      	beq.n	8005efc <HAL_UART_IRQHandler+0x514>
 8005ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f969 	bl	80061c2 <UART_EndTransmit_IT>
    return;
 8005ef0:	e004      	b.n	8005efc <HAL_UART_IRQHandler+0x514>
    return;
 8005ef2:	bf00      	nop
 8005ef4:	e002      	b.n	8005efc <HAL_UART_IRQHandler+0x514>
      return;
 8005ef6:	bf00      	nop
 8005ef8:	e000      	b.n	8005efc <HAL_UART_IRQHandler+0x514>
      return;
 8005efa:	bf00      	nop
  }
}
 8005efc:	37e8      	adds	r7, #232	; 0xe8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop

08005f04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b090      	sub	sp, #64	; 0x40
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f68:	e050      	b.n	800600c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d04c      	beq.n	800600c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f78:	f7fc ff06 	bl	8002d88 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d241      	bcs.n	800600c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fa8:	637a      	str	r2, [r7, #52]	; 0x34
 8005faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e5      	bne.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3314      	adds	r3, #20
 8005fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	613b      	str	r3, [r7, #16]
   return(result);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f023 0301 	bic.w	r3, r3, #1
 8005fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3314      	adds	r3, #20
 8005fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fdc:	623a      	str	r2, [r7, #32]
 8005fde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	69f9      	ldr	r1, [r7, #28]
 8005fe2:	6a3a      	ldr	r2, [r7, #32]
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e5      	bne.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e00f      	b.n	800602c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4013      	ands	r3, r2
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	429a      	cmp	r2, r3
 800601a:	bf0c      	ite	eq
 800601c:	2301      	moveq	r3, #1
 800601e:	2300      	movne	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	429a      	cmp	r2, r3
 8006028:	d09f      	beq.n	8005f6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3740      	adds	r7, #64	; 0x40
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006034:	b480      	push	{r7}
 8006036:	b095      	sub	sp, #84	; 0x54
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	330c      	adds	r3, #12
 800605a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800605c:	643a      	str	r2, [r7, #64]	; 0x40
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e5      	bne.n	800603c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3314      	adds	r3, #20
 8006076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	64bb      	str	r3, [r7, #72]	; 0x48
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3314      	adds	r3, #20
 800608e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006090:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e5      	bne.n	8006070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d119      	bne.n	80060e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f023 0310 	bic.w	r3, r3, #16
 80060c2:	647b      	str	r3, [r7, #68]	; 0x44
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060cc:	61ba      	str	r2, [r7, #24]
 80060ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	6979      	ldr	r1, [r7, #20]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	613b      	str	r3, [r7, #16]
   return(result);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e5      	bne.n	80060ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060ee:	bf00      	nop
 80060f0:	3754      	adds	r7, #84	; 0x54
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff ff09 	bl	8005f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b21      	cmp	r3, #33	; 0x21
 8006134:	d13e      	bne.n	80061b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613e:	d114      	bne.n	800616a <UART_Transmit_IT+0x48>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d110      	bne.n	800616a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800615c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	1c9a      	adds	r2, r3, #2
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	621a      	str	r2, [r3, #32]
 8006168:	e008      	b.n	800617c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	1c59      	adds	r1, r3, #1
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6211      	str	r1, [r2, #32]
 8006174:	781a      	ldrb	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29b      	uxth	r3, r3
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4619      	mov	r1, r3
 800618a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10f      	bne.n	80061b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800619e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fe8e 	bl	8005f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b08c      	sub	sp, #48	; 0x30
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b22      	cmp	r3, #34	; 0x22
 8006204:	f040 80ab 	bne.w	800635e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006210:	d117      	bne.n	8006242 <UART_Receive_IT+0x50>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d113      	bne.n	8006242 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006230:	b29a      	uxth	r2, r3
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	1c9a      	adds	r2, r3, #2
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28
 8006240:	e026      	b.n	8006290 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006248:	2300      	movs	r3, #0
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006254:	d007      	beq.n	8006266 <UART_Receive_IT+0x74>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <UART_Receive_IT+0x82>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	b2da      	uxtb	r2, r3
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e008      	b.n	8006286 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006280:	b2da      	uxtb	r2, r3
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29b      	uxth	r3, r3
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4619      	mov	r1, r3
 800629e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d15a      	bne.n	800635a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0220 	bic.w	r2, r2, #32
 80062b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0201 	bic.w	r2, r2, #1
 80062d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d135      	bne.n	8006350 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	613b      	str	r3, [r7, #16]
   return(result);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f023 0310 	bic.w	r3, r3, #16
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630a:	623a      	str	r2, [r7, #32]
 800630c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	69f9      	ldr	r1, [r7, #28]
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	61bb      	str	r3, [r7, #24]
   return(result);
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e5      	bne.n	80062ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b10      	cmp	r3, #16
 800632a:	d10a      	bne.n	8006342 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff fdf9 	bl	8005f40 <HAL_UARTEx_RxEventCallback>
 800634e:	e002      	b.n	8006356 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fde1 	bl	8005f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	e002      	b.n	8006360 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	e000      	b.n	8006360 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800635e:	2302      	movs	r3, #2
  }
}
 8006360:	4618      	mov	r0, r3
 8006362:	3730      	adds	r7, #48	; 0x30
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636c:	b09f      	sub	sp, #124	; 0x7c
 800636e:	af00      	add	r7, sp, #0
 8006370:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800637c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637e:	68d9      	ldr	r1, [r3, #12]
 8006380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	ea40 0301 	orr.w	r3, r0, r1
 8006388:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800638a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	431a      	orrs	r2, r3
 8006394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	431a      	orrs	r2, r3
 800639a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4313      	orrs	r3, r2
 80063a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80063a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063ac:	f021 010c 	bic.w	r1, r1, #12
 80063b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063b6:	430b      	orrs	r3, r1
 80063b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c6:	6999      	ldr	r1, [r3, #24]
 80063c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	ea40 0301 	orr.w	r3, r0, r1
 80063d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	4bc5      	ldr	r3, [pc, #788]	; (80066ec <UART_SetConfig+0x384>)
 80063d8:	429a      	cmp	r2, r3
 80063da:	d004      	beq.n	80063e6 <UART_SetConfig+0x7e>
 80063dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4bc3      	ldr	r3, [pc, #780]	; (80066f0 <UART_SetConfig+0x388>)
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d103      	bne.n	80063ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063e6:	f7fd fd33 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
 80063ea:	6778      	str	r0, [r7, #116]	; 0x74
 80063ec:	e002      	b.n	80063f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ee:	f7fd fd1b 	bl	8003e28 <HAL_RCC_GetPCLK1Freq>
 80063f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fc:	f040 80b6 	bne.w	800656c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006402:	461c      	mov	r4, r3
 8006404:	f04f 0500 	mov.w	r5, #0
 8006408:	4622      	mov	r2, r4
 800640a:	462b      	mov	r3, r5
 800640c:	1891      	adds	r1, r2, r2
 800640e:	6439      	str	r1, [r7, #64]	; 0x40
 8006410:	415b      	adcs	r3, r3
 8006412:	647b      	str	r3, [r7, #68]	; 0x44
 8006414:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006418:	1912      	adds	r2, r2, r4
 800641a:	eb45 0303 	adc.w	r3, r5, r3
 800641e:	f04f 0000 	mov.w	r0, #0
 8006422:	f04f 0100 	mov.w	r1, #0
 8006426:	00d9      	lsls	r1, r3, #3
 8006428:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800642c:	00d0      	lsls	r0, r2, #3
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	1911      	adds	r1, r2, r4
 8006434:	6639      	str	r1, [r7, #96]	; 0x60
 8006436:	416b      	adcs	r3, r5
 8006438:	667b      	str	r3, [r7, #100]	; 0x64
 800643a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	461a      	mov	r2, r3
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	1891      	adds	r1, r2, r2
 8006446:	63b9      	str	r1, [r7, #56]	; 0x38
 8006448:	415b      	adcs	r3, r3
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800644c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006450:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006454:	f7fa fc02 	bl	8000c5c <__aeabi_uldivmod>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4ba5      	ldr	r3, [pc, #660]	; (80066f4 <UART_SetConfig+0x38c>)
 800645e:	fba3 2302 	umull	r2, r3, r3, r2
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	011e      	lsls	r6, r3, #4
 8006466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006468:	461c      	mov	r4, r3
 800646a:	f04f 0500 	mov.w	r5, #0
 800646e:	4622      	mov	r2, r4
 8006470:	462b      	mov	r3, r5
 8006472:	1891      	adds	r1, r2, r2
 8006474:	6339      	str	r1, [r7, #48]	; 0x30
 8006476:	415b      	adcs	r3, r3
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
 800647a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800647e:	1912      	adds	r2, r2, r4
 8006480:	eb45 0303 	adc.w	r3, r5, r3
 8006484:	f04f 0000 	mov.w	r0, #0
 8006488:	f04f 0100 	mov.w	r1, #0
 800648c:	00d9      	lsls	r1, r3, #3
 800648e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006492:	00d0      	lsls	r0, r2, #3
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	1911      	adds	r1, r2, r4
 800649a:	65b9      	str	r1, [r7, #88]	; 0x58
 800649c:	416b      	adcs	r3, r5
 800649e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	461a      	mov	r2, r3
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	1891      	adds	r1, r2, r2
 80064ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80064ae:	415b      	adcs	r3, r3
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80064ba:	f7fa fbcf 	bl	8000c5c <__aeabi_uldivmod>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4b8c      	ldr	r3, [pc, #560]	; (80066f4 <UART_SetConfig+0x38c>)
 80064c4:	fba3 1302 	umull	r1, r3, r3, r2
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	2164      	movs	r1, #100	; 0x64
 80064cc:	fb01 f303 	mul.w	r3, r1, r3
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	3332      	adds	r3, #50	; 0x32
 80064d6:	4a87      	ldr	r2, [pc, #540]	; (80066f4 <UART_SetConfig+0x38c>)
 80064d8:	fba2 2303 	umull	r2, r3, r2, r3
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e4:	441e      	add	r6, r3
 80064e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e8:	4618      	mov	r0, r3
 80064ea:	f04f 0100 	mov.w	r1, #0
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	1894      	adds	r4, r2, r2
 80064f4:	623c      	str	r4, [r7, #32]
 80064f6:	415b      	adcs	r3, r3
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
 80064fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064fe:	1812      	adds	r2, r2, r0
 8006500:	eb41 0303 	adc.w	r3, r1, r3
 8006504:	f04f 0400 	mov.w	r4, #0
 8006508:	f04f 0500 	mov.w	r5, #0
 800650c:	00dd      	lsls	r5, r3, #3
 800650e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006512:	00d4      	lsls	r4, r2, #3
 8006514:	4622      	mov	r2, r4
 8006516:	462b      	mov	r3, r5
 8006518:	1814      	adds	r4, r2, r0
 800651a:	653c      	str	r4, [r7, #80]	; 0x50
 800651c:	414b      	adcs	r3, r1
 800651e:	657b      	str	r3, [r7, #84]	; 0x54
 8006520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	461a      	mov	r2, r3
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	1891      	adds	r1, r2, r2
 800652c:	61b9      	str	r1, [r7, #24]
 800652e:	415b      	adcs	r3, r3
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006536:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800653a:	f7fa fb8f 	bl	8000c5c <__aeabi_uldivmod>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4b6c      	ldr	r3, [pc, #432]	; (80066f4 <UART_SetConfig+0x38c>)
 8006544:	fba3 1302 	umull	r1, r3, r3, r2
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	2164      	movs	r1, #100	; 0x64
 800654c:	fb01 f303 	mul.w	r3, r1, r3
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	3332      	adds	r3, #50	; 0x32
 8006556:	4a67      	ldr	r2, [pc, #412]	; (80066f4 <UART_SetConfig+0x38c>)
 8006558:	fba2 2303 	umull	r2, r3, r2, r3
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	f003 0207 	and.w	r2, r3, #7
 8006562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4432      	add	r2, r6
 8006568:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800656a:	e0b9      	b.n	80066e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800656c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656e:	461c      	mov	r4, r3
 8006570:	f04f 0500 	mov.w	r5, #0
 8006574:	4622      	mov	r2, r4
 8006576:	462b      	mov	r3, r5
 8006578:	1891      	adds	r1, r2, r2
 800657a:	6139      	str	r1, [r7, #16]
 800657c:	415b      	adcs	r3, r3
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006584:	1912      	adds	r2, r2, r4
 8006586:	eb45 0303 	adc.w	r3, r5, r3
 800658a:	f04f 0000 	mov.w	r0, #0
 800658e:	f04f 0100 	mov.w	r1, #0
 8006592:	00d9      	lsls	r1, r3, #3
 8006594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006598:	00d0      	lsls	r0, r2, #3
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	eb12 0804 	adds.w	r8, r2, r4
 80065a2:	eb43 0905 	adc.w	r9, r3, r5
 80065a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f04f 0100 	mov.w	r1, #0
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	008b      	lsls	r3, r1, #2
 80065ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065be:	0082      	lsls	r2, r0, #2
 80065c0:	4640      	mov	r0, r8
 80065c2:	4649      	mov	r1, r9
 80065c4:	f7fa fb4a 	bl	8000c5c <__aeabi_uldivmod>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4b49      	ldr	r3, [pc, #292]	; (80066f4 <UART_SetConfig+0x38c>)
 80065ce:	fba3 2302 	umull	r2, r3, r3, r2
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	011e      	lsls	r6, r3, #4
 80065d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d8:	4618      	mov	r0, r3
 80065da:	f04f 0100 	mov.w	r1, #0
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	1894      	adds	r4, r2, r2
 80065e4:	60bc      	str	r4, [r7, #8]
 80065e6:	415b      	adcs	r3, r3
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065ee:	1812      	adds	r2, r2, r0
 80065f0:	eb41 0303 	adc.w	r3, r1, r3
 80065f4:	f04f 0400 	mov.w	r4, #0
 80065f8:	f04f 0500 	mov.w	r5, #0
 80065fc:	00dd      	lsls	r5, r3, #3
 80065fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006602:	00d4      	lsls	r4, r2, #3
 8006604:	4622      	mov	r2, r4
 8006606:	462b      	mov	r3, r5
 8006608:	1814      	adds	r4, r2, r0
 800660a:	64bc      	str	r4, [r7, #72]	; 0x48
 800660c:	414b      	adcs	r3, r1
 800660e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	4618      	mov	r0, r3
 8006616:	f04f 0100 	mov.w	r1, #0
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	008b      	lsls	r3, r1, #2
 8006624:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006628:	0082      	lsls	r2, r0, #2
 800662a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800662e:	f7fa fb15 	bl	8000c5c <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4b2f      	ldr	r3, [pc, #188]	; (80066f4 <UART_SetConfig+0x38c>)
 8006638:	fba3 1302 	umull	r1, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	2164      	movs	r1, #100	; 0x64
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	3332      	adds	r3, #50	; 0x32
 800664a:	4a2a      	ldr	r2, [pc, #168]	; (80066f4 <UART_SetConfig+0x38c>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006656:	441e      	add	r6, r3
 8006658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800665a:	4618      	mov	r0, r3
 800665c:	f04f 0100 	mov.w	r1, #0
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	1894      	adds	r4, r2, r2
 8006666:	603c      	str	r4, [r7, #0]
 8006668:	415b      	adcs	r3, r3
 800666a:	607b      	str	r3, [r7, #4]
 800666c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006670:	1812      	adds	r2, r2, r0
 8006672:	eb41 0303 	adc.w	r3, r1, r3
 8006676:	f04f 0400 	mov.w	r4, #0
 800667a:	f04f 0500 	mov.w	r5, #0
 800667e:	00dd      	lsls	r5, r3, #3
 8006680:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006684:	00d4      	lsls	r4, r2, #3
 8006686:	4622      	mov	r2, r4
 8006688:	462b      	mov	r3, r5
 800668a:	eb12 0a00 	adds.w	sl, r2, r0
 800668e:	eb43 0b01 	adc.w	fp, r3, r1
 8006692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4618      	mov	r0, r3
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	008b      	lsls	r3, r1, #2
 80066a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066aa:	0082      	lsls	r2, r0, #2
 80066ac:	4650      	mov	r0, sl
 80066ae:	4659      	mov	r1, fp
 80066b0:	f7fa fad4 	bl	8000c5c <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <UART_SetConfig+0x38c>)
 80066ba:	fba3 1302 	umull	r1, r3, r3, r2
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	2164      	movs	r1, #100	; 0x64
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	3332      	adds	r3, #50	; 0x32
 80066cc:	4a09      	ldr	r2, [pc, #36]	; (80066f4 <UART_SetConfig+0x38c>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	f003 020f 	and.w	r2, r3, #15
 80066d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4432      	add	r2, r6
 80066de:	609a      	str	r2, [r3, #8]
}
 80066e0:	bf00      	nop
 80066e2:	377c      	adds	r7, #124	; 0x7c
 80066e4:	46bd      	mov	sp, r7
 80066e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ea:	bf00      	nop
 80066ec:	40011000 	.word	0x40011000
 80066f0:	40011400 	.word	0x40011400
 80066f4:	51eb851f 	.word	0x51eb851f

080066f8 <atoi>:
 80066f8:	220a      	movs	r2, #10
 80066fa:	2100      	movs	r1, #0
 80066fc:	f000 b8d6 	b.w	80068ac <strtol>

08006700 <__errno>:
 8006700:	4b01      	ldr	r3, [pc, #4]	; (8006708 <__errno+0x8>)
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	2000000c 	.word	0x2000000c

0800670c <__libc_init_array>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	4d0d      	ldr	r5, [pc, #52]	; (8006744 <__libc_init_array+0x38>)
 8006710:	4c0d      	ldr	r4, [pc, #52]	; (8006748 <__libc_init_array+0x3c>)
 8006712:	1b64      	subs	r4, r4, r5
 8006714:	10a4      	asrs	r4, r4, #2
 8006716:	2600      	movs	r6, #0
 8006718:	42a6      	cmp	r6, r4
 800671a:	d109      	bne.n	8006730 <__libc_init_array+0x24>
 800671c:	4d0b      	ldr	r5, [pc, #44]	; (800674c <__libc_init_array+0x40>)
 800671e:	4c0c      	ldr	r4, [pc, #48]	; (8006750 <__libc_init_array+0x44>)
 8006720:	f000 fcdc 	bl	80070dc <_init>
 8006724:	1b64      	subs	r4, r4, r5
 8006726:	10a4      	asrs	r4, r4, #2
 8006728:	2600      	movs	r6, #0
 800672a:	42a6      	cmp	r6, r4
 800672c:	d105      	bne.n	800673a <__libc_init_array+0x2e>
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	f855 3b04 	ldr.w	r3, [r5], #4
 8006734:	4798      	blx	r3
 8006736:	3601      	adds	r6, #1
 8006738:	e7ee      	b.n	8006718 <__libc_init_array+0xc>
 800673a:	f855 3b04 	ldr.w	r3, [r5], #4
 800673e:	4798      	blx	r3
 8006740:	3601      	adds	r6, #1
 8006742:	e7f2      	b.n	800672a <__libc_init_array+0x1e>
 8006744:	08007598 	.word	0x08007598
 8006748:	08007598 	.word	0x08007598
 800674c:	08007598 	.word	0x08007598
 8006750:	0800759c 	.word	0x0800759c

08006754 <memset>:
 8006754:	4402      	add	r2, r0
 8006756:	4603      	mov	r3, r0
 8006758:	4293      	cmp	r3, r2
 800675a:	d100      	bne.n	800675e <memset+0xa>
 800675c:	4770      	bx	lr
 800675e:	f803 1b01 	strb.w	r1, [r3], #1
 8006762:	e7f9      	b.n	8006758 <memset+0x4>

08006764 <siprintf>:
 8006764:	b40e      	push	{r1, r2, r3}
 8006766:	b500      	push	{lr}
 8006768:	b09c      	sub	sp, #112	; 0x70
 800676a:	ab1d      	add	r3, sp, #116	; 0x74
 800676c:	9002      	str	r0, [sp, #8]
 800676e:	9006      	str	r0, [sp, #24]
 8006770:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006774:	4809      	ldr	r0, [pc, #36]	; (800679c <siprintf+0x38>)
 8006776:	9107      	str	r1, [sp, #28]
 8006778:	9104      	str	r1, [sp, #16]
 800677a:	4909      	ldr	r1, [pc, #36]	; (80067a0 <siprintf+0x3c>)
 800677c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006780:	9105      	str	r1, [sp, #20]
 8006782:	6800      	ldr	r0, [r0, #0]
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	a902      	add	r1, sp, #8
 8006788:	f000 f9a0 	bl	8006acc <_svfiprintf_r>
 800678c:	9b02      	ldr	r3, [sp, #8]
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	b01c      	add	sp, #112	; 0x70
 8006794:	f85d eb04 	ldr.w	lr, [sp], #4
 8006798:	b003      	add	sp, #12
 800679a:	4770      	bx	lr
 800679c:	2000000c 	.word	0x2000000c
 80067a0:	ffff0208 	.word	0xffff0208

080067a4 <_strtol_l.isra.0>:
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067aa:	d001      	beq.n	80067b0 <_strtol_l.isra.0+0xc>
 80067ac:	2b24      	cmp	r3, #36	; 0x24
 80067ae:	d906      	bls.n	80067be <_strtol_l.isra.0+0x1a>
 80067b0:	f7ff ffa6 	bl	8006700 <__errno>
 80067b4:	2316      	movs	r3, #22
 80067b6:	6003      	str	r3, [r0, #0]
 80067b8:	2000      	movs	r0, #0
 80067ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067be:	4f3a      	ldr	r7, [pc, #232]	; (80068a8 <_strtol_l.isra.0+0x104>)
 80067c0:	468e      	mov	lr, r1
 80067c2:	4676      	mov	r6, lr
 80067c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80067c8:	5de5      	ldrb	r5, [r4, r7]
 80067ca:	f015 0508 	ands.w	r5, r5, #8
 80067ce:	d1f8      	bne.n	80067c2 <_strtol_l.isra.0+0x1e>
 80067d0:	2c2d      	cmp	r4, #45	; 0x2d
 80067d2:	d134      	bne.n	800683e <_strtol_l.isra.0+0x9a>
 80067d4:	f89e 4000 	ldrb.w	r4, [lr]
 80067d8:	f04f 0801 	mov.w	r8, #1
 80067dc:	f106 0e02 	add.w	lr, r6, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d05c      	beq.n	800689e <_strtol_l.isra.0+0xfa>
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d10c      	bne.n	8006802 <_strtol_l.isra.0+0x5e>
 80067e8:	2c30      	cmp	r4, #48	; 0x30
 80067ea:	d10a      	bne.n	8006802 <_strtol_l.isra.0+0x5e>
 80067ec:	f89e 4000 	ldrb.w	r4, [lr]
 80067f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80067f4:	2c58      	cmp	r4, #88	; 0x58
 80067f6:	d14d      	bne.n	8006894 <_strtol_l.isra.0+0xf0>
 80067f8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80067fc:	2310      	movs	r3, #16
 80067fe:	f10e 0e02 	add.w	lr, lr, #2
 8006802:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006806:	f10c 3cff 	add.w	ip, ip, #4294967295
 800680a:	2600      	movs	r6, #0
 800680c:	fbbc f9f3 	udiv	r9, ip, r3
 8006810:	4635      	mov	r5, r6
 8006812:	fb03 ca19 	mls	sl, r3, r9, ip
 8006816:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800681a:	2f09      	cmp	r7, #9
 800681c:	d818      	bhi.n	8006850 <_strtol_l.isra.0+0xac>
 800681e:	463c      	mov	r4, r7
 8006820:	42a3      	cmp	r3, r4
 8006822:	dd24      	ble.n	800686e <_strtol_l.isra.0+0xca>
 8006824:	2e00      	cmp	r6, #0
 8006826:	db1f      	blt.n	8006868 <_strtol_l.isra.0+0xc4>
 8006828:	45a9      	cmp	r9, r5
 800682a:	d31d      	bcc.n	8006868 <_strtol_l.isra.0+0xc4>
 800682c:	d101      	bne.n	8006832 <_strtol_l.isra.0+0x8e>
 800682e:	45a2      	cmp	sl, r4
 8006830:	db1a      	blt.n	8006868 <_strtol_l.isra.0+0xc4>
 8006832:	fb05 4503 	mla	r5, r5, r3, r4
 8006836:	2601      	movs	r6, #1
 8006838:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800683c:	e7eb      	b.n	8006816 <_strtol_l.isra.0+0x72>
 800683e:	2c2b      	cmp	r4, #43	; 0x2b
 8006840:	bf08      	it	eq
 8006842:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006846:	46a8      	mov	r8, r5
 8006848:	bf08      	it	eq
 800684a:	f106 0e02 	addeq.w	lr, r6, #2
 800684e:	e7c7      	b.n	80067e0 <_strtol_l.isra.0+0x3c>
 8006850:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006854:	2f19      	cmp	r7, #25
 8006856:	d801      	bhi.n	800685c <_strtol_l.isra.0+0xb8>
 8006858:	3c37      	subs	r4, #55	; 0x37
 800685a:	e7e1      	b.n	8006820 <_strtol_l.isra.0+0x7c>
 800685c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006860:	2f19      	cmp	r7, #25
 8006862:	d804      	bhi.n	800686e <_strtol_l.isra.0+0xca>
 8006864:	3c57      	subs	r4, #87	; 0x57
 8006866:	e7db      	b.n	8006820 <_strtol_l.isra.0+0x7c>
 8006868:	f04f 36ff 	mov.w	r6, #4294967295
 800686c:	e7e4      	b.n	8006838 <_strtol_l.isra.0+0x94>
 800686e:	2e00      	cmp	r6, #0
 8006870:	da05      	bge.n	800687e <_strtol_l.isra.0+0xda>
 8006872:	2322      	movs	r3, #34	; 0x22
 8006874:	6003      	str	r3, [r0, #0]
 8006876:	4665      	mov	r5, ip
 8006878:	b942      	cbnz	r2, 800688c <_strtol_l.isra.0+0xe8>
 800687a:	4628      	mov	r0, r5
 800687c:	e79d      	b.n	80067ba <_strtol_l.isra.0+0x16>
 800687e:	f1b8 0f00 	cmp.w	r8, #0
 8006882:	d000      	beq.n	8006886 <_strtol_l.isra.0+0xe2>
 8006884:	426d      	negs	r5, r5
 8006886:	2a00      	cmp	r2, #0
 8006888:	d0f7      	beq.n	800687a <_strtol_l.isra.0+0xd6>
 800688a:	b10e      	cbz	r6, 8006890 <_strtol_l.isra.0+0xec>
 800688c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006890:	6011      	str	r1, [r2, #0]
 8006892:	e7f2      	b.n	800687a <_strtol_l.isra.0+0xd6>
 8006894:	2430      	movs	r4, #48	; 0x30
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1b3      	bne.n	8006802 <_strtol_l.isra.0+0x5e>
 800689a:	2308      	movs	r3, #8
 800689c:	e7b1      	b.n	8006802 <_strtol_l.isra.0+0x5e>
 800689e:	2c30      	cmp	r4, #48	; 0x30
 80068a0:	d0a4      	beq.n	80067ec <_strtol_l.isra.0+0x48>
 80068a2:	230a      	movs	r3, #10
 80068a4:	e7ad      	b.n	8006802 <_strtol_l.isra.0+0x5e>
 80068a6:	bf00      	nop
 80068a8:	080073fd 	.word	0x080073fd

080068ac <strtol>:
 80068ac:	4613      	mov	r3, r2
 80068ae:	460a      	mov	r2, r1
 80068b0:	4601      	mov	r1, r0
 80068b2:	4802      	ldr	r0, [pc, #8]	; (80068bc <strtol+0x10>)
 80068b4:	6800      	ldr	r0, [r0, #0]
 80068b6:	f7ff bf75 	b.w	80067a4 <_strtol_l.isra.0>
 80068ba:	bf00      	nop
 80068bc:	2000000c 	.word	0x2000000c

080068c0 <_free_r>:
 80068c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068c2:	2900      	cmp	r1, #0
 80068c4:	d048      	beq.n	8006958 <_free_r+0x98>
 80068c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ca:	9001      	str	r0, [sp, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f1a1 0404 	sub.w	r4, r1, #4
 80068d2:	bfb8      	it	lt
 80068d4:	18e4      	addlt	r4, r4, r3
 80068d6:	f000 fbc7 	bl	8007068 <__malloc_lock>
 80068da:	4a20      	ldr	r2, [pc, #128]	; (800695c <_free_r+0x9c>)
 80068dc:	9801      	ldr	r0, [sp, #4]
 80068de:	6813      	ldr	r3, [r2, #0]
 80068e0:	4615      	mov	r5, r2
 80068e2:	b933      	cbnz	r3, 80068f2 <_free_r+0x32>
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	6014      	str	r4, [r2, #0]
 80068e8:	b003      	add	sp, #12
 80068ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068ee:	f000 bbc1 	b.w	8007074 <__malloc_unlock>
 80068f2:	42a3      	cmp	r3, r4
 80068f4:	d90b      	bls.n	800690e <_free_r+0x4e>
 80068f6:	6821      	ldr	r1, [r4, #0]
 80068f8:	1862      	adds	r2, r4, r1
 80068fa:	4293      	cmp	r3, r2
 80068fc:	bf04      	itt	eq
 80068fe:	681a      	ldreq	r2, [r3, #0]
 8006900:	685b      	ldreq	r3, [r3, #4]
 8006902:	6063      	str	r3, [r4, #4]
 8006904:	bf04      	itt	eq
 8006906:	1852      	addeq	r2, r2, r1
 8006908:	6022      	streq	r2, [r4, #0]
 800690a:	602c      	str	r4, [r5, #0]
 800690c:	e7ec      	b.n	80068e8 <_free_r+0x28>
 800690e:	461a      	mov	r2, r3
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	b10b      	cbz	r3, 8006918 <_free_r+0x58>
 8006914:	42a3      	cmp	r3, r4
 8006916:	d9fa      	bls.n	800690e <_free_r+0x4e>
 8006918:	6811      	ldr	r1, [r2, #0]
 800691a:	1855      	adds	r5, r2, r1
 800691c:	42a5      	cmp	r5, r4
 800691e:	d10b      	bne.n	8006938 <_free_r+0x78>
 8006920:	6824      	ldr	r4, [r4, #0]
 8006922:	4421      	add	r1, r4
 8006924:	1854      	adds	r4, r2, r1
 8006926:	42a3      	cmp	r3, r4
 8006928:	6011      	str	r1, [r2, #0]
 800692a:	d1dd      	bne.n	80068e8 <_free_r+0x28>
 800692c:	681c      	ldr	r4, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	6053      	str	r3, [r2, #4]
 8006932:	4421      	add	r1, r4
 8006934:	6011      	str	r1, [r2, #0]
 8006936:	e7d7      	b.n	80068e8 <_free_r+0x28>
 8006938:	d902      	bls.n	8006940 <_free_r+0x80>
 800693a:	230c      	movs	r3, #12
 800693c:	6003      	str	r3, [r0, #0]
 800693e:	e7d3      	b.n	80068e8 <_free_r+0x28>
 8006940:	6825      	ldr	r5, [r4, #0]
 8006942:	1961      	adds	r1, r4, r5
 8006944:	428b      	cmp	r3, r1
 8006946:	bf04      	itt	eq
 8006948:	6819      	ldreq	r1, [r3, #0]
 800694a:	685b      	ldreq	r3, [r3, #4]
 800694c:	6063      	str	r3, [r4, #4]
 800694e:	bf04      	itt	eq
 8006950:	1949      	addeq	r1, r1, r5
 8006952:	6021      	streq	r1, [r4, #0]
 8006954:	6054      	str	r4, [r2, #4]
 8006956:	e7c7      	b.n	80068e8 <_free_r+0x28>
 8006958:	b003      	add	sp, #12
 800695a:	bd30      	pop	{r4, r5, pc}
 800695c:	200000a4 	.word	0x200000a4

08006960 <_malloc_r>:
 8006960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006962:	1ccd      	adds	r5, r1, #3
 8006964:	f025 0503 	bic.w	r5, r5, #3
 8006968:	3508      	adds	r5, #8
 800696a:	2d0c      	cmp	r5, #12
 800696c:	bf38      	it	cc
 800696e:	250c      	movcc	r5, #12
 8006970:	2d00      	cmp	r5, #0
 8006972:	4606      	mov	r6, r0
 8006974:	db01      	blt.n	800697a <_malloc_r+0x1a>
 8006976:	42a9      	cmp	r1, r5
 8006978:	d903      	bls.n	8006982 <_malloc_r+0x22>
 800697a:	230c      	movs	r3, #12
 800697c:	6033      	str	r3, [r6, #0]
 800697e:	2000      	movs	r0, #0
 8006980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006982:	f000 fb71 	bl	8007068 <__malloc_lock>
 8006986:	4921      	ldr	r1, [pc, #132]	; (8006a0c <_malloc_r+0xac>)
 8006988:	680a      	ldr	r2, [r1, #0]
 800698a:	4614      	mov	r4, r2
 800698c:	b99c      	cbnz	r4, 80069b6 <_malloc_r+0x56>
 800698e:	4f20      	ldr	r7, [pc, #128]	; (8006a10 <_malloc_r+0xb0>)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	b923      	cbnz	r3, 800699e <_malloc_r+0x3e>
 8006994:	4621      	mov	r1, r4
 8006996:	4630      	mov	r0, r6
 8006998:	f000 fb2c 	bl	8006ff4 <_sbrk_r>
 800699c:	6038      	str	r0, [r7, #0]
 800699e:	4629      	mov	r1, r5
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 fb27 	bl	8006ff4 <_sbrk_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d123      	bne.n	80069f2 <_malloc_r+0x92>
 80069aa:	230c      	movs	r3, #12
 80069ac:	6033      	str	r3, [r6, #0]
 80069ae:	4630      	mov	r0, r6
 80069b0:	f000 fb60 	bl	8007074 <__malloc_unlock>
 80069b4:	e7e3      	b.n	800697e <_malloc_r+0x1e>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	1b5b      	subs	r3, r3, r5
 80069ba:	d417      	bmi.n	80069ec <_malloc_r+0x8c>
 80069bc:	2b0b      	cmp	r3, #11
 80069be:	d903      	bls.n	80069c8 <_malloc_r+0x68>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	441c      	add	r4, r3
 80069c4:	6025      	str	r5, [r4, #0]
 80069c6:	e004      	b.n	80069d2 <_malloc_r+0x72>
 80069c8:	6863      	ldr	r3, [r4, #4]
 80069ca:	42a2      	cmp	r2, r4
 80069cc:	bf0c      	ite	eq
 80069ce:	600b      	streq	r3, [r1, #0]
 80069d0:	6053      	strne	r3, [r2, #4]
 80069d2:	4630      	mov	r0, r6
 80069d4:	f000 fb4e 	bl	8007074 <__malloc_unlock>
 80069d8:	f104 000b 	add.w	r0, r4, #11
 80069dc:	1d23      	adds	r3, r4, #4
 80069de:	f020 0007 	bic.w	r0, r0, #7
 80069e2:	1ac2      	subs	r2, r0, r3
 80069e4:	d0cc      	beq.n	8006980 <_malloc_r+0x20>
 80069e6:	1a1b      	subs	r3, r3, r0
 80069e8:	50a3      	str	r3, [r4, r2]
 80069ea:	e7c9      	b.n	8006980 <_malloc_r+0x20>
 80069ec:	4622      	mov	r2, r4
 80069ee:	6864      	ldr	r4, [r4, #4]
 80069f0:	e7cc      	b.n	800698c <_malloc_r+0x2c>
 80069f2:	1cc4      	adds	r4, r0, #3
 80069f4:	f024 0403 	bic.w	r4, r4, #3
 80069f8:	42a0      	cmp	r0, r4
 80069fa:	d0e3      	beq.n	80069c4 <_malloc_r+0x64>
 80069fc:	1a21      	subs	r1, r4, r0
 80069fe:	4630      	mov	r0, r6
 8006a00:	f000 faf8 	bl	8006ff4 <_sbrk_r>
 8006a04:	3001      	adds	r0, #1
 8006a06:	d1dd      	bne.n	80069c4 <_malloc_r+0x64>
 8006a08:	e7cf      	b.n	80069aa <_malloc_r+0x4a>
 8006a0a:	bf00      	nop
 8006a0c:	200000a4 	.word	0x200000a4
 8006a10:	200000a8 	.word	0x200000a8

08006a14 <__ssputs_r>:
 8006a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a18:	688e      	ldr	r6, [r1, #8]
 8006a1a:	429e      	cmp	r6, r3
 8006a1c:	4682      	mov	sl, r0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	4690      	mov	r8, r2
 8006a22:	461f      	mov	r7, r3
 8006a24:	d838      	bhi.n	8006a98 <__ssputs_r+0x84>
 8006a26:	898a      	ldrh	r2, [r1, #12]
 8006a28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a2c:	d032      	beq.n	8006a94 <__ssputs_r+0x80>
 8006a2e:	6825      	ldr	r5, [r4, #0]
 8006a30:	6909      	ldr	r1, [r1, #16]
 8006a32:	eba5 0901 	sub.w	r9, r5, r1
 8006a36:	6965      	ldr	r5, [r4, #20]
 8006a38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a40:	3301      	adds	r3, #1
 8006a42:	444b      	add	r3, r9
 8006a44:	106d      	asrs	r5, r5, #1
 8006a46:	429d      	cmp	r5, r3
 8006a48:	bf38      	it	cc
 8006a4a:	461d      	movcc	r5, r3
 8006a4c:	0553      	lsls	r3, r2, #21
 8006a4e:	d531      	bpl.n	8006ab4 <__ssputs_r+0xa0>
 8006a50:	4629      	mov	r1, r5
 8006a52:	f7ff ff85 	bl	8006960 <_malloc_r>
 8006a56:	4606      	mov	r6, r0
 8006a58:	b950      	cbnz	r0, 8006a70 <__ssputs_r+0x5c>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	f8ca 3000 	str.w	r3, [sl]
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a66:	81a3      	strh	r3, [r4, #12]
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a70:	6921      	ldr	r1, [r4, #16]
 8006a72:	464a      	mov	r2, r9
 8006a74:	f000 fad0 	bl	8007018 <memcpy>
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a82:	81a3      	strh	r3, [r4, #12]
 8006a84:	6126      	str	r6, [r4, #16]
 8006a86:	6165      	str	r5, [r4, #20]
 8006a88:	444e      	add	r6, r9
 8006a8a:	eba5 0509 	sub.w	r5, r5, r9
 8006a8e:	6026      	str	r6, [r4, #0]
 8006a90:	60a5      	str	r5, [r4, #8]
 8006a92:	463e      	mov	r6, r7
 8006a94:	42be      	cmp	r6, r7
 8006a96:	d900      	bls.n	8006a9a <__ssputs_r+0x86>
 8006a98:	463e      	mov	r6, r7
 8006a9a:	4632      	mov	r2, r6
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	4641      	mov	r1, r8
 8006aa0:	f000 fac8 	bl	8007034 <memmove>
 8006aa4:	68a3      	ldr	r3, [r4, #8]
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	1b9b      	subs	r3, r3, r6
 8006aaa:	4432      	add	r2, r6
 8006aac:	60a3      	str	r3, [r4, #8]
 8006aae:	6022      	str	r2, [r4, #0]
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e7db      	b.n	8006a6c <__ssputs_r+0x58>
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	f000 fae3 	bl	8007080 <_realloc_r>
 8006aba:	4606      	mov	r6, r0
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d1e1      	bne.n	8006a84 <__ssputs_r+0x70>
 8006ac0:	6921      	ldr	r1, [r4, #16]
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	f7ff fefc 	bl	80068c0 <_free_r>
 8006ac8:	e7c7      	b.n	8006a5a <__ssputs_r+0x46>
	...

08006acc <_svfiprintf_r>:
 8006acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad0:	4698      	mov	r8, r3
 8006ad2:	898b      	ldrh	r3, [r1, #12]
 8006ad4:	061b      	lsls	r3, r3, #24
 8006ad6:	b09d      	sub	sp, #116	; 0x74
 8006ad8:	4607      	mov	r7, r0
 8006ada:	460d      	mov	r5, r1
 8006adc:	4614      	mov	r4, r2
 8006ade:	d50e      	bpl.n	8006afe <_svfiprintf_r+0x32>
 8006ae0:	690b      	ldr	r3, [r1, #16]
 8006ae2:	b963      	cbnz	r3, 8006afe <_svfiprintf_r+0x32>
 8006ae4:	2140      	movs	r1, #64	; 0x40
 8006ae6:	f7ff ff3b 	bl	8006960 <_malloc_r>
 8006aea:	6028      	str	r0, [r5, #0]
 8006aec:	6128      	str	r0, [r5, #16]
 8006aee:	b920      	cbnz	r0, 8006afa <_svfiprintf_r+0x2e>
 8006af0:	230c      	movs	r3, #12
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e0d1      	b.n	8006c9e <_svfiprintf_r+0x1d2>
 8006afa:	2340      	movs	r3, #64	; 0x40
 8006afc:	616b      	str	r3, [r5, #20]
 8006afe:	2300      	movs	r3, #0
 8006b00:	9309      	str	r3, [sp, #36]	; 0x24
 8006b02:	2320      	movs	r3, #32
 8006b04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b0c:	2330      	movs	r3, #48	; 0x30
 8006b0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cb8 <_svfiprintf_r+0x1ec>
 8006b12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b16:	f04f 0901 	mov.w	r9, #1
 8006b1a:	4623      	mov	r3, r4
 8006b1c:	469a      	mov	sl, r3
 8006b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b22:	b10a      	cbz	r2, 8006b28 <_svfiprintf_r+0x5c>
 8006b24:	2a25      	cmp	r2, #37	; 0x25
 8006b26:	d1f9      	bne.n	8006b1c <_svfiprintf_r+0x50>
 8006b28:	ebba 0b04 	subs.w	fp, sl, r4
 8006b2c:	d00b      	beq.n	8006b46 <_svfiprintf_r+0x7a>
 8006b2e:	465b      	mov	r3, fp
 8006b30:	4622      	mov	r2, r4
 8006b32:	4629      	mov	r1, r5
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff ff6d 	bl	8006a14 <__ssputs_r>
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f000 80aa 	beq.w	8006c94 <_svfiprintf_r+0x1c8>
 8006b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b42:	445a      	add	r2, fp
 8006b44:	9209      	str	r2, [sp, #36]	; 0x24
 8006b46:	f89a 3000 	ldrb.w	r3, [sl]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 80a2 	beq.w	8006c94 <_svfiprintf_r+0x1c8>
 8006b50:	2300      	movs	r3, #0
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295
 8006b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b5a:	f10a 0a01 	add.w	sl, sl, #1
 8006b5e:	9304      	str	r3, [sp, #16]
 8006b60:	9307      	str	r3, [sp, #28]
 8006b62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b66:	931a      	str	r3, [sp, #104]	; 0x68
 8006b68:	4654      	mov	r4, sl
 8006b6a:	2205      	movs	r2, #5
 8006b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b70:	4851      	ldr	r0, [pc, #324]	; (8006cb8 <_svfiprintf_r+0x1ec>)
 8006b72:	f7f9 fb55 	bl	8000220 <memchr>
 8006b76:	9a04      	ldr	r2, [sp, #16]
 8006b78:	b9d8      	cbnz	r0, 8006bb2 <_svfiprintf_r+0xe6>
 8006b7a:	06d0      	lsls	r0, r2, #27
 8006b7c:	bf44      	itt	mi
 8006b7e:	2320      	movmi	r3, #32
 8006b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b84:	0711      	lsls	r1, r2, #28
 8006b86:	bf44      	itt	mi
 8006b88:	232b      	movmi	r3, #43	; 0x2b
 8006b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b92:	2b2a      	cmp	r3, #42	; 0x2a
 8006b94:	d015      	beq.n	8006bc2 <_svfiprintf_r+0xf6>
 8006b96:	9a07      	ldr	r2, [sp, #28]
 8006b98:	4654      	mov	r4, sl
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	f04f 0c0a 	mov.w	ip, #10
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ba6:	3b30      	subs	r3, #48	; 0x30
 8006ba8:	2b09      	cmp	r3, #9
 8006baa:	d94e      	bls.n	8006c4a <_svfiprintf_r+0x17e>
 8006bac:	b1b0      	cbz	r0, 8006bdc <_svfiprintf_r+0x110>
 8006bae:	9207      	str	r2, [sp, #28]
 8006bb0:	e014      	b.n	8006bdc <_svfiprintf_r+0x110>
 8006bb2:	eba0 0308 	sub.w	r3, r0, r8
 8006bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	9304      	str	r3, [sp, #16]
 8006bbe:	46a2      	mov	sl, r4
 8006bc0:	e7d2      	b.n	8006b68 <_svfiprintf_r+0x9c>
 8006bc2:	9b03      	ldr	r3, [sp, #12]
 8006bc4:	1d19      	adds	r1, r3, #4
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	9103      	str	r1, [sp, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bfbb      	ittet	lt
 8006bce:	425b      	neglt	r3, r3
 8006bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8006bd4:	9307      	strge	r3, [sp, #28]
 8006bd6:	9307      	strlt	r3, [sp, #28]
 8006bd8:	bfb8      	it	lt
 8006bda:	9204      	strlt	r2, [sp, #16]
 8006bdc:	7823      	ldrb	r3, [r4, #0]
 8006bde:	2b2e      	cmp	r3, #46	; 0x2e
 8006be0:	d10c      	bne.n	8006bfc <_svfiprintf_r+0x130>
 8006be2:	7863      	ldrb	r3, [r4, #1]
 8006be4:	2b2a      	cmp	r3, #42	; 0x2a
 8006be6:	d135      	bne.n	8006c54 <_svfiprintf_r+0x188>
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	1d1a      	adds	r2, r3, #4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	9203      	str	r2, [sp, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bfb8      	it	lt
 8006bf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bf8:	3402      	adds	r4, #2
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cc8 <_svfiprintf_r+0x1fc>
 8006c00:	7821      	ldrb	r1, [r4, #0]
 8006c02:	2203      	movs	r2, #3
 8006c04:	4650      	mov	r0, sl
 8006c06:	f7f9 fb0b 	bl	8000220 <memchr>
 8006c0a:	b140      	cbz	r0, 8006c1e <_svfiprintf_r+0x152>
 8006c0c:	2340      	movs	r3, #64	; 0x40
 8006c0e:	eba0 000a 	sub.w	r0, r0, sl
 8006c12:	fa03 f000 	lsl.w	r0, r3, r0
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	4303      	orrs	r3, r0
 8006c1a:	3401      	adds	r4, #1
 8006c1c:	9304      	str	r3, [sp, #16]
 8006c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c22:	4826      	ldr	r0, [pc, #152]	; (8006cbc <_svfiprintf_r+0x1f0>)
 8006c24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c28:	2206      	movs	r2, #6
 8006c2a:	f7f9 faf9 	bl	8000220 <memchr>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d038      	beq.n	8006ca4 <_svfiprintf_r+0x1d8>
 8006c32:	4b23      	ldr	r3, [pc, #140]	; (8006cc0 <_svfiprintf_r+0x1f4>)
 8006c34:	bb1b      	cbnz	r3, 8006c7e <_svfiprintf_r+0x1b2>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	3307      	adds	r3, #7
 8006c3a:	f023 0307 	bic.w	r3, r3, #7
 8006c3e:	3308      	adds	r3, #8
 8006c40:	9303      	str	r3, [sp, #12]
 8006c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c44:	4433      	add	r3, r6
 8006c46:	9309      	str	r3, [sp, #36]	; 0x24
 8006c48:	e767      	b.n	8006b1a <_svfiprintf_r+0x4e>
 8006c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c4e:	460c      	mov	r4, r1
 8006c50:	2001      	movs	r0, #1
 8006c52:	e7a5      	b.n	8006ba0 <_svfiprintf_r+0xd4>
 8006c54:	2300      	movs	r3, #0
 8006c56:	3401      	adds	r4, #1
 8006c58:	9305      	str	r3, [sp, #20]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	f04f 0c0a 	mov.w	ip, #10
 8006c60:	4620      	mov	r0, r4
 8006c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c66:	3a30      	subs	r2, #48	; 0x30
 8006c68:	2a09      	cmp	r2, #9
 8006c6a:	d903      	bls.n	8006c74 <_svfiprintf_r+0x1a8>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0c5      	beq.n	8006bfc <_svfiprintf_r+0x130>
 8006c70:	9105      	str	r1, [sp, #20]
 8006c72:	e7c3      	b.n	8006bfc <_svfiprintf_r+0x130>
 8006c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c78:	4604      	mov	r4, r0
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e7f0      	b.n	8006c60 <_svfiprintf_r+0x194>
 8006c7e:	ab03      	add	r3, sp, #12
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	462a      	mov	r2, r5
 8006c84:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <_svfiprintf_r+0x1f8>)
 8006c86:	a904      	add	r1, sp, #16
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f3af 8000 	nop.w
 8006c8e:	1c42      	adds	r2, r0, #1
 8006c90:	4606      	mov	r6, r0
 8006c92:	d1d6      	bne.n	8006c42 <_svfiprintf_r+0x176>
 8006c94:	89ab      	ldrh	r3, [r5, #12]
 8006c96:	065b      	lsls	r3, r3, #25
 8006c98:	f53f af2c 	bmi.w	8006af4 <_svfiprintf_r+0x28>
 8006c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c9e:	b01d      	add	sp, #116	; 0x74
 8006ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca4:	ab03      	add	r3, sp, #12
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	462a      	mov	r2, r5
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <_svfiprintf_r+0x1f8>)
 8006cac:	a904      	add	r1, sp, #16
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f000 f87a 	bl	8006da8 <_printf_i>
 8006cb4:	e7eb      	b.n	8006c8e <_svfiprintf_r+0x1c2>
 8006cb6:	bf00      	nop
 8006cb8:	080074fd 	.word	0x080074fd
 8006cbc:	08007507 	.word	0x08007507
 8006cc0:	00000000 	.word	0x00000000
 8006cc4:	08006a15 	.word	0x08006a15
 8006cc8:	08007503 	.word	0x08007503

08006ccc <_printf_common>:
 8006ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	4699      	mov	r9, r3
 8006cd4:	688a      	ldr	r2, [r1, #8]
 8006cd6:	690b      	ldr	r3, [r1, #16]
 8006cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	bfb8      	it	lt
 8006ce0:	4613      	movlt	r3, r2
 8006ce2:	6033      	str	r3, [r6, #0]
 8006ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ce8:	4607      	mov	r7, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	b10a      	cbz	r2, 8006cf2 <_printf_common+0x26>
 8006cee:	3301      	adds	r3, #1
 8006cf0:	6033      	str	r3, [r6, #0]
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	0699      	lsls	r1, r3, #26
 8006cf6:	bf42      	ittt	mi
 8006cf8:	6833      	ldrmi	r3, [r6, #0]
 8006cfa:	3302      	addmi	r3, #2
 8006cfc:	6033      	strmi	r3, [r6, #0]
 8006cfe:	6825      	ldr	r5, [r4, #0]
 8006d00:	f015 0506 	ands.w	r5, r5, #6
 8006d04:	d106      	bne.n	8006d14 <_printf_common+0x48>
 8006d06:	f104 0a19 	add.w	sl, r4, #25
 8006d0a:	68e3      	ldr	r3, [r4, #12]
 8006d0c:	6832      	ldr	r2, [r6, #0]
 8006d0e:	1a9b      	subs	r3, r3, r2
 8006d10:	42ab      	cmp	r3, r5
 8006d12:	dc26      	bgt.n	8006d62 <_printf_common+0x96>
 8006d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d18:	1e13      	subs	r3, r2, #0
 8006d1a:	6822      	ldr	r2, [r4, #0]
 8006d1c:	bf18      	it	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	0692      	lsls	r2, r2, #26
 8006d22:	d42b      	bmi.n	8006d7c <_printf_common+0xb0>
 8006d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d28:	4649      	mov	r1, r9
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	47c0      	blx	r8
 8006d2e:	3001      	adds	r0, #1
 8006d30:	d01e      	beq.n	8006d70 <_printf_common+0xa4>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	68e5      	ldr	r5, [r4, #12]
 8006d36:	6832      	ldr	r2, [r6, #0]
 8006d38:	f003 0306 	and.w	r3, r3, #6
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	bf08      	it	eq
 8006d40:	1aad      	subeq	r5, r5, r2
 8006d42:	68a3      	ldr	r3, [r4, #8]
 8006d44:	6922      	ldr	r2, [r4, #16]
 8006d46:	bf0c      	ite	eq
 8006d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d4c:	2500      	movne	r5, #0
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	bfc4      	itt	gt
 8006d52:	1a9b      	subgt	r3, r3, r2
 8006d54:	18ed      	addgt	r5, r5, r3
 8006d56:	2600      	movs	r6, #0
 8006d58:	341a      	adds	r4, #26
 8006d5a:	42b5      	cmp	r5, r6
 8006d5c:	d11a      	bne.n	8006d94 <_printf_common+0xc8>
 8006d5e:	2000      	movs	r0, #0
 8006d60:	e008      	b.n	8006d74 <_printf_common+0xa8>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4652      	mov	r2, sl
 8006d66:	4649      	mov	r1, r9
 8006d68:	4638      	mov	r0, r7
 8006d6a:	47c0      	blx	r8
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d103      	bne.n	8006d78 <_printf_common+0xac>
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d78:	3501      	adds	r5, #1
 8006d7a:	e7c6      	b.n	8006d0a <_printf_common+0x3e>
 8006d7c:	18e1      	adds	r1, r4, r3
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	2030      	movs	r0, #48	; 0x30
 8006d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d86:	4422      	add	r2, r4
 8006d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d90:	3302      	adds	r3, #2
 8006d92:	e7c7      	b.n	8006d24 <_printf_common+0x58>
 8006d94:	2301      	movs	r3, #1
 8006d96:	4622      	mov	r2, r4
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	47c0      	blx	r8
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d0e6      	beq.n	8006d70 <_printf_common+0xa4>
 8006da2:	3601      	adds	r6, #1
 8006da4:	e7d9      	b.n	8006d5a <_printf_common+0x8e>
	...

08006da8 <_printf_i>:
 8006da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dac:	460c      	mov	r4, r1
 8006dae:	4691      	mov	r9, r2
 8006db0:	7e27      	ldrb	r7, [r4, #24]
 8006db2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006db4:	2f78      	cmp	r7, #120	; 0x78
 8006db6:	4680      	mov	r8, r0
 8006db8:	469a      	mov	sl, r3
 8006dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dbe:	d807      	bhi.n	8006dd0 <_printf_i+0x28>
 8006dc0:	2f62      	cmp	r7, #98	; 0x62
 8006dc2:	d80a      	bhi.n	8006dda <_printf_i+0x32>
 8006dc4:	2f00      	cmp	r7, #0
 8006dc6:	f000 80d8 	beq.w	8006f7a <_printf_i+0x1d2>
 8006dca:	2f58      	cmp	r7, #88	; 0x58
 8006dcc:	f000 80a3 	beq.w	8006f16 <_printf_i+0x16e>
 8006dd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dd8:	e03a      	b.n	8006e50 <_printf_i+0xa8>
 8006dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dde:	2b15      	cmp	r3, #21
 8006de0:	d8f6      	bhi.n	8006dd0 <_printf_i+0x28>
 8006de2:	a001      	add	r0, pc, #4	; (adr r0, 8006de8 <_printf_i+0x40>)
 8006de4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006de8:	08006e41 	.word	0x08006e41
 8006dec:	08006e55 	.word	0x08006e55
 8006df0:	08006dd1 	.word	0x08006dd1
 8006df4:	08006dd1 	.word	0x08006dd1
 8006df8:	08006dd1 	.word	0x08006dd1
 8006dfc:	08006dd1 	.word	0x08006dd1
 8006e00:	08006e55 	.word	0x08006e55
 8006e04:	08006dd1 	.word	0x08006dd1
 8006e08:	08006dd1 	.word	0x08006dd1
 8006e0c:	08006dd1 	.word	0x08006dd1
 8006e10:	08006dd1 	.word	0x08006dd1
 8006e14:	08006f61 	.word	0x08006f61
 8006e18:	08006e85 	.word	0x08006e85
 8006e1c:	08006f43 	.word	0x08006f43
 8006e20:	08006dd1 	.word	0x08006dd1
 8006e24:	08006dd1 	.word	0x08006dd1
 8006e28:	08006f83 	.word	0x08006f83
 8006e2c:	08006dd1 	.word	0x08006dd1
 8006e30:	08006e85 	.word	0x08006e85
 8006e34:	08006dd1 	.word	0x08006dd1
 8006e38:	08006dd1 	.word	0x08006dd1
 8006e3c:	08006f4b 	.word	0x08006f4b
 8006e40:	680b      	ldr	r3, [r1, #0]
 8006e42:	1d1a      	adds	r2, r3, #4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	600a      	str	r2, [r1, #0]
 8006e48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e50:	2301      	movs	r3, #1
 8006e52:	e0a3      	b.n	8006f9c <_printf_i+0x1f4>
 8006e54:	6825      	ldr	r5, [r4, #0]
 8006e56:	6808      	ldr	r0, [r1, #0]
 8006e58:	062e      	lsls	r6, r5, #24
 8006e5a:	f100 0304 	add.w	r3, r0, #4
 8006e5e:	d50a      	bpl.n	8006e76 <_printf_i+0xce>
 8006e60:	6805      	ldr	r5, [r0, #0]
 8006e62:	600b      	str	r3, [r1, #0]
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	da03      	bge.n	8006e70 <_printf_i+0xc8>
 8006e68:	232d      	movs	r3, #45	; 0x2d
 8006e6a:	426d      	negs	r5, r5
 8006e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e70:	485e      	ldr	r0, [pc, #376]	; (8006fec <_printf_i+0x244>)
 8006e72:	230a      	movs	r3, #10
 8006e74:	e019      	b.n	8006eaa <_printf_i+0x102>
 8006e76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e7a:	6805      	ldr	r5, [r0, #0]
 8006e7c:	600b      	str	r3, [r1, #0]
 8006e7e:	bf18      	it	ne
 8006e80:	b22d      	sxthne	r5, r5
 8006e82:	e7ef      	b.n	8006e64 <_printf_i+0xbc>
 8006e84:	680b      	ldr	r3, [r1, #0]
 8006e86:	6825      	ldr	r5, [r4, #0]
 8006e88:	1d18      	adds	r0, r3, #4
 8006e8a:	6008      	str	r0, [r1, #0]
 8006e8c:	0628      	lsls	r0, r5, #24
 8006e8e:	d501      	bpl.n	8006e94 <_printf_i+0xec>
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	e002      	b.n	8006e9a <_printf_i+0xf2>
 8006e94:	0669      	lsls	r1, r5, #25
 8006e96:	d5fb      	bpl.n	8006e90 <_printf_i+0xe8>
 8006e98:	881d      	ldrh	r5, [r3, #0]
 8006e9a:	4854      	ldr	r0, [pc, #336]	; (8006fec <_printf_i+0x244>)
 8006e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e9e:	bf0c      	ite	eq
 8006ea0:	2308      	moveq	r3, #8
 8006ea2:	230a      	movne	r3, #10
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eaa:	6866      	ldr	r6, [r4, #4]
 8006eac:	60a6      	str	r6, [r4, #8]
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	bfa2      	ittt	ge
 8006eb2:	6821      	ldrge	r1, [r4, #0]
 8006eb4:	f021 0104 	bicge.w	r1, r1, #4
 8006eb8:	6021      	strge	r1, [r4, #0]
 8006eba:	b90d      	cbnz	r5, 8006ec0 <_printf_i+0x118>
 8006ebc:	2e00      	cmp	r6, #0
 8006ebe:	d04d      	beq.n	8006f5c <_printf_i+0x1b4>
 8006ec0:	4616      	mov	r6, r2
 8006ec2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ec6:	fb03 5711 	mls	r7, r3, r1, r5
 8006eca:	5dc7      	ldrb	r7, [r0, r7]
 8006ecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ed0:	462f      	mov	r7, r5
 8006ed2:	42bb      	cmp	r3, r7
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	d9f4      	bls.n	8006ec2 <_printf_i+0x11a>
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d10b      	bne.n	8006ef4 <_printf_i+0x14c>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	07df      	lsls	r7, r3, #31
 8006ee0:	d508      	bpl.n	8006ef4 <_printf_i+0x14c>
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	6861      	ldr	r1, [r4, #4]
 8006ee6:	4299      	cmp	r1, r3
 8006ee8:	bfde      	ittt	le
 8006eea:	2330      	movle	r3, #48	; 0x30
 8006eec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ef4:	1b92      	subs	r2, r2, r6
 8006ef6:	6122      	str	r2, [r4, #16]
 8006ef8:	f8cd a000 	str.w	sl, [sp]
 8006efc:	464b      	mov	r3, r9
 8006efe:	aa03      	add	r2, sp, #12
 8006f00:	4621      	mov	r1, r4
 8006f02:	4640      	mov	r0, r8
 8006f04:	f7ff fee2 	bl	8006ccc <_printf_common>
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d14c      	bne.n	8006fa6 <_printf_i+0x1fe>
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	b004      	add	sp, #16
 8006f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f16:	4835      	ldr	r0, [pc, #212]	; (8006fec <_printf_i+0x244>)
 8006f18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	680e      	ldr	r6, [r1, #0]
 8006f20:	061f      	lsls	r7, r3, #24
 8006f22:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f26:	600e      	str	r6, [r1, #0]
 8006f28:	d514      	bpl.n	8006f54 <_printf_i+0x1ac>
 8006f2a:	07d9      	lsls	r1, r3, #31
 8006f2c:	bf44      	itt	mi
 8006f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006f32:	6023      	strmi	r3, [r4, #0]
 8006f34:	b91d      	cbnz	r5, 8006f3e <_printf_i+0x196>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	f023 0320 	bic.w	r3, r3, #32
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	2310      	movs	r3, #16
 8006f40:	e7b0      	b.n	8006ea4 <_printf_i+0xfc>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	f043 0320 	orr.w	r3, r3, #32
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	2378      	movs	r3, #120	; 0x78
 8006f4c:	4828      	ldr	r0, [pc, #160]	; (8006ff0 <_printf_i+0x248>)
 8006f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f52:	e7e3      	b.n	8006f1c <_printf_i+0x174>
 8006f54:	065e      	lsls	r6, r3, #25
 8006f56:	bf48      	it	mi
 8006f58:	b2ad      	uxthmi	r5, r5
 8006f5a:	e7e6      	b.n	8006f2a <_printf_i+0x182>
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	e7bb      	b.n	8006ed8 <_printf_i+0x130>
 8006f60:	680b      	ldr	r3, [r1, #0]
 8006f62:	6826      	ldr	r6, [r4, #0]
 8006f64:	6960      	ldr	r0, [r4, #20]
 8006f66:	1d1d      	adds	r5, r3, #4
 8006f68:	600d      	str	r5, [r1, #0]
 8006f6a:	0635      	lsls	r5, r6, #24
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	d501      	bpl.n	8006f74 <_printf_i+0x1cc>
 8006f70:	6018      	str	r0, [r3, #0]
 8006f72:	e002      	b.n	8006f7a <_printf_i+0x1d2>
 8006f74:	0671      	lsls	r1, r6, #25
 8006f76:	d5fb      	bpl.n	8006f70 <_printf_i+0x1c8>
 8006f78:	8018      	strh	r0, [r3, #0]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	4616      	mov	r6, r2
 8006f80:	e7ba      	b.n	8006ef8 <_printf_i+0x150>
 8006f82:	680b      	ldr	r3, [r1, #0]
 8006f84:	1d1a      	adds	r2, r3, #4
 8006f86:	600a      	str	r2, [r1, #0]
 8006f88:	681e      	ldr	r6, [r3, #0]
 8006f8a:	6862      	ldr	r2, [r4, #4]
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7f9 f946 	bl	8000220 <memchr>
 8006f94:	b108      	cbz	r0, 8006f9a <_printf_i+0x1f2>
 8006f96:	1b80      	subs	r0, r0, r6
 8006f98:	6060      	str	r0, [r4, #4]
 8006f9a:	6863      	ldr	r3, [r4, #4]
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa4:	e7a8      	b.n	8006ef8 <_printf_i+0x150>
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	4632      	mov	r2, r6
 8006faa:	4649      	mov	r1, r9
 8006fac:	4640      	mov	r0, r8
 8006fae:	47d0      	blx	sl
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d0ab      	beq.n	8006f0c <_printf_i+0x164>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	079b      	lsls	r3, r3, #30
 8006fb8:	d413      	bmi.n	8006fe2 <_printf_i+0x23a>
 8006fba:	68e0      	ldr	r0, [r4, #12]
 8006fbc:	9b03      	ldr	r3, [sp, #12]
 8006fbe:	4298      	cmp	r0, r3
 8006fc0:	bfb8      	it	lt
 8006fc2:	4618      	movlt	r0, r3
 8006fc4:	e7a4      	b.n	8006f10 <_printf_i+0x168>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4649      	mov	r1, r9
 8006fcc:	4640      	mov	r0, r8
 8006fce:	47d0      	blx	sl
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d09b      	beq.n	8006f0c <_printf_i+0x164>
 8006fd4:	3501      	adds	r5, #1
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	9903      	ldr	r1, [sp, #12]
 8006fda:	1a5b      	subs	r3, r3, r1
 8006fdc:	42ab      	cmp	r3, r5
 8006fde:	dcf2      	bgt.n	8006fc6 <_printf_i+0x21e>
 8006fe0:	e7eb      	b.n	8006fba <_printf_i+0x212>
 8006fe2:	2500      	movs	r5, #0
 8006fe4:	f104 0619 	add.w	r6, r4, #25
 8006fe8:	e7f5      	b.n	8006fd6 <_printf_i+0x22e>
 8006fea:	bf00      	nop
 8006fec:	0800750e 	.word	0x0800750e
 8006ff0:	0800751f 	.word	0x0800751f

08006ff4 <_sbrk_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d06      	ldr	r5, [pc, #24]	; (8007010 <_sbrk_r+0x1c>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7fb fdea 	bl	8002bd8 <_sbrk>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_sbrk_r+0x1a>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_sbrk_r+0x1a>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20000a84 	.word	0x20000a84

08007014 <__retarget_lock_acquire_recursive>:
 8007014:	4770      	bx	lr

08007016 <__retarget_lock_release_recursive>:
 8007016:	4770      	bx	lr

08007018 <memcpy>:
 8007018:	440a      	add	r2, r1
 800701a:	4291      	cmp	r1, r2
 800701c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007020:	d100      	bne.n	8007024 <memcpy+0xc>
 8007022:	4770      	bx	lr
 8007024:	b510      	push	{r4, lr}
 8007026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800702a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800702e:	4291      	cmp	r1, r2
 8007030:	d1f9      	bne.n	8007026 <memcpy+0xe>
 8007032:	bd10      	pop	{r4, pc}

08007034 <memmove>:
 8007034:	4288      	cmp	r0, r1
 8007036:	b510      	push	{r4, lr}
 8007038:	eb01 0402 	add.w	r4, r1, r2
 800703c:	d902      	bls.n	8007044 <memmove+0x10>
 800703e:	4284      	cmp	r4, r0
 8007040:	4623      	mov	r3, r4
 8007042:	d807      	bhi.n	8007054 <memmove+0x20>
 8007044:	1e43      	subs	r3, r0, #1
 8007046:	42a1      	cmp	r1, r4
 8007048:	d008      	beq.n	800705c <memmove+0x28>
 800704a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800704e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007052:	e7f8      	b.n	8007046 <memmove+0x12>
 8007054:	4402      	add	r2, r0
 8007056:	4601      	mov	r1, r0
 8007058:	428a      	cmp	r2, r1
 800705a:	d100      	bne.n	800705e <memmove+0x2a>
 800705c:	bd10      	pop	{r4, pc}
 800705e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007066:	e7f7      	b.n	8007058 <memmove+0x24>

08007068 <__malloc_lock>:
 8007068:	4801      	ldr	r0, [pc, #4]	; (8007070 <__malloc_lock+0x8>)
 800706a:	f7ff bfd3 	b.w	8007014 <__retarget_lock_acquire_recursive>
 800706e:	bf00      	nop
 8007070:	20000a7c 	.word	0x20000a7c

08007074 <__malloc_unlock>:
 8007074:	4801      	ldr	r0, [pc, #4]	; (800707c <__malloc_unlock+0x8>)
 8007076:	f7ff bfce 	b.w	8007016 <__retarget_lock_release_recursive>
 800707a:	bf00      	nop
 800707c:	20000a7c 	.word	0x20000a7c

08007080 <_realloc_r>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	4607      	mov	r7, r0
 8007084:	4614      	mov	r4, r2
 8007086:	460e      	mov	r6, r1
 8007088:	b921      	cbnz	r1, 8007094 <_realloc_r+0x14>
 800708a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800708e:	4611      	mov	r1, r2
 8007090:	f7ff bc66 	b.w	8006960 <_malloc_r>
 8007094:	b922      	cbnz	r2, 80070a0 <_realloc_r+0x20>
 8007096:	f7ff fc13 	bl	80068c0 <_free_r>
 800709a:	4625      	mov	r5, r4
 800709c:	4628      	mov	r0, r5
 800709e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a0:	f000 f814 	bl	80070cc <_malloc_usable_size_r>
 80070a4:	42a0      	cmp	r0, r4
 80070a6:	d20f      	bcs.n	80070c8 <_realloc_r+0x48>
 80070a8:	4621      	mov	r1, r4
 80070aa:	4638      	mov	r0, r7
 80070ac:	f7ff fc58 	bl	8006960 <_malloc_r>
 80070b0:	4605      	mov	r5, r0
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d0f2      	beq.n	800709c <_realloc_r+0x1c>
 80070b6:	4631      	mov	r1, r6
 80070b8:	4622      	mov	r2, r4
 80070ba:	f7ff ffad 	bl	8007018 <memcpy>
 80070be:	4631      	mov	r1, r6
 80070c0:	4638      	mov	r0, r7
 80070c2:	f7ff fbfd 	bl	80068c0 <_free_r>
 80070c6:	e7e9      	b.n	800709c <_realloc_r+0x1c>
 80070c8:	4635      	mov	r5, r6
 80070ca:	e7e7      	b.n	800709c <_realloc_r+0x1c>

080070cc <_malloc_usable_size_r>:
 80070cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d0:	1f18      	subs	r0, r3, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bfbc      	itt	lt
 80070d6:	580b      	ldrlt	r3, [r1, r0]
 80070d8:	18c0      	addlt	r0, r0, r3
 80070da:	4770      	bx	lr

080070dc <_init>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	bf00      	nop
 80070e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e2:	bc08      	pop	{r3}
 80070e4:	469e      	mov	lr, r3
 80070e6:	4770      	bx	lr

080070e8 <_fini>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	bf00      	nop
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr

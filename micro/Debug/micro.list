
micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004254  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d0  080047d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d8  080047d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080047e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f4  20000074  08004854  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  08004854  00020968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4a8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff2  00000000  00000000  0002e54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00030540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  00030e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d93  00000000  00000000  00031638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c656  00000000  00000000  000543cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5833  00000000  00000000  00060a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00136254  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002834  00000000  00000000  001362a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800440c 	.word	0x0800440c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800440c 	.word	0x0800440c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 ff4e 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f83c 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f940 	bl	8000848 <MX_GPIO_Init>
  MX_UART5_Init();
 80005c8:	f000 f8ea 	bl	80007a0 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80005cc:	f000 f912 	bl	80007f4 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 80005d0:	f000 f894 	bl	80006fc <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <main+0x70>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	68da      	ldr	r2, [r3, #12]
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <main+0x70>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f042 0220 	orr.w	r2, r2, #32
 80005e2:	60da      	str	r2, [r3, #12]
  ESP_RESET();
 80005e4:	f000 f9f0 	bl	80009c8 <ESP_RESET>
  HAL_Delay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f000 ffa8 	bl	8001540 <HAL_Delay>
  HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 80005f0:	480e      	ldr	r0, [pc, #56]	; (800062c <main+0x74>)
 80005f2:	f7ff fe0d 	bl	8000210 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	490b      	ldr	r1, [pc, #44]	; (800062c <main+0x74>)
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <main+0x78>)
 8000602:	f002 fae6 	bl	8002bd2 <HAL_UART_Transmit>
  ESP_Clear_Buffer();
 8000606:	f000 fb5d 	bl	8000cc4 <ESP_Clear_Buffer>
  ESP_Nodemcu_Init();
 800060a:	f000 fa0b 	bl	8000a24 <ESP_Nodemcu_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(messageHandlerFlag)
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <main+0x7c>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0fb      	beq.n	800060e <main+0x56>
	{
	  messageHandlerFlag = 0;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <main+0x7c>)
 8000618:	2200      	movs	r2, #0
 800061a:	801a      	strh	r2, [r3, #0]
	  netTimeout = 0;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <main+0x80>)
 800061e:	2200      	movs	r2, #0
 8000620:	801a      	strh	r2, [r3, #0]
	  messageHandler();
 8000622:	f000 fbe3 	bl	8000dec <messageHandler>
	  if(messageHandlerFlag)
 8000626:	e7f2      	b.n	800060e <main+0x56>
 8000628:	200000ac 	.word	0x200000ac
 800062c:	20000180 	.word	0x20000180
 8000630:	200000f4 	.word	0x200000f4
 8000634:	20000094 	.word	0x20000094
 8000638:	20000096 	.word	0x20000096

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 faa8 	bl	8003ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <SystemClock_Config+0xb8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <SystemClock_Config+0xb8>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <SystemClock_Config+0xb8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <SystemClock_Config+0xbc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <SystemClock_Config+0xbc>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <SystemClock_Config+0xbc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 ffa3 	bl	80025fc <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006bc:	f000 f97e 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fd18 	bl	8002110 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006e6:	f000 f969 	bl	80009bc <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC3_Init+0x98>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <MX_ADC3_Init+0x9c>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC3_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC3_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC3_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ADC3_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC3_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_ADC3_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_ADC3_Init+0x98>)
 800073c:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_ADC3_Init+0xa0>)
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC3_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_ADC3_Init+0x98>)
 8000748:	2201      	movs	r2, #1
 800074a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_ADC3_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_ADC3_Init+0x98>)
 8000756:	2201      	movs	r2, #1
 8000758:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <MX_ADC3_Init+0x98>)
 800075c:	f000 ff14 	bl	8001588 <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f929 	bl	80009bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800076a:	2305      	movs	r3, #5
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_ADC3_Init+0x98>)
 800077c:	f000 ff48 	bl	8001610 <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000786:	f000 f919 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000138 	.word	0x20000138
 8000798:	40012200 	.word	0x40012200
 800079c:	0f000001 	.word	0x0f000001

080007a0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_UART5_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_UART5_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_UART5_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_UART5_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_UART5_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_UART5_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_UART5_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_UART5_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_UART5_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_UART5_Init+0x4c>)
 80007d8:	f002 f9ae 	bl	8002b38 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f8eb 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000f4 	.word	0x200000f4
 80007f0:	40005000 	.word	0x40005000

080007f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART3_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_USART3_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_USART3_UART_Init+0x4c>)
 8000800:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART3_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART3_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART3_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART3_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART3_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART3_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART3_UART_Init+0x4c>)
 800082c:	f002 f984 	bl	8002b38 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f8c1 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000ac 	.word	0x200000ac
 8000844:	40004800 	.word	0x40004800

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b51      	ldr	r3, [pc, #324]	; (80009a8 <MX_GPIO_Init+0x160>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a50      	ldr	r2, [pc, #320]	; (80009a8 <MX_GPIO_Init+0x160>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b4e      	ldr	r3, [pc, #312]	; (80009a8 <MX_GPIO_Init+0x160>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <MX_GPIO_Init+0x160>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a49      	ldr	r2, [pc, #292]	; (80009a8 <MX_GPIO_Init+0x160>)
 8000884:	f043 0320 	orr.w	r3, r3, #32
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <MX_GPIO_Init+0x160>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0320 	and.w	r3, r3, #32
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <MX_GPIO_Init+0x160>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a42      	ldr	r2, [pc, #264]	; (80009a8 <MX_GPIO_Init+0x160>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <MX_GPIO_Init+0x160>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <MX_GPIO_Init+0x160>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a3b      	ldr	r2, [pc, #236]	; (80009a8 <MX_GPIO_Init+0x160>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <MX_GPIO_Init+0x160>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <MX_GPIO_Init+0x160>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a34      	ldr	r2, [pc, #208]	; (80009a8 <MX_GPIO_Init+0x160>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <MX_GPIO_Init+0x160>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008ea:	2200      	movs	r2, #0
 80008ec:	217c      	movs	r1, #124	; 0x7c
 80008ee:	482f      	ldr	r0, [pc, #188]	; (80009ac <MX_GPIO_Init+0x164>)
 80008f0:	f001 fbf4 	bl	80020dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2120      	movs	r1, #32
 80008f8:	482d      	ldr	r0, [pc, #180]	; (80009b0 <MX_GPIO_Init+0x168>)
 80008fa:	f001 fbef 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	482c      	ldr	r0, [pc, #176]	; (80009b4 <MX_GPIO_Init+0x16c>)
 8000904:	f001 fbea 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000908:	237c      	movs	r3, #124	; 0x7c
 800090a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4823      	ldr	r0, [pc, #140]	; (80009ac <MX_GPIO_Init+0x164>)
 8000920:	f001 fa48 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000924:	2320      	movs	r3, #32
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	481d      	ldr	r0, [pc, #116]	; (80009b0 <MX_GPIO_Init+0x168>)
 800093c:	f001 fa3a 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000940:	2340      	movs	r3, #64	; 0x40
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4817      	ldr	r0, [pc, #92]	; (80009b4 <MX_GPIO_Init+0x16c>)
 8000958:	f001 fa2c 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800095c:	2330      	movs	r3, #48	; 0x30
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800096c:	2302      	movs	r3, #2
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4810      	ldr	r0, [pc, #64]	; (80009b8 <MX_GPIO_Init+0x170>)
 8000978:	f001 fa1c 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800097c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800098e:	2301      	movs	r3, #1
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4807      	ldr	r0, [pc, #28]	; (80009b8 <MX_GPIO_Init+0x170>)
 800099a:	f001 fa0b 	bl	8001db4 <HAL_GPIO_Init>

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40021400 	.word	0x40021400
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <ESP_RESET>:
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
	__enable_irq();
}

void ESP_RESET()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	resetTime = 6;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <ESP_RESET+0x48>)
 80009ce:	2206      	movs	r2, #6
 80009d0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2120      	movs	r1, #32
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <ESP_RESET+0x4c>)
 80009d8:	f001 fb80 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <ESP_RESET+0x50>)
 80009e2:	f001 fb7b 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_Delay(30);
 80009e6:	201e      	movs	r0, #30
 80009e8:	f000 fdaa 	bl	8001540 <HAL_Delay>
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2120      	movs	r1, #32
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <ESP_RESET+0x4c>)
 80009f2:	f001 fb73 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	4807      	ldr	r0, [pc, #28]	; (8000a18 <ESP_RESET+0x50>)
 80009fc:	f001 fb6e 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_UART_Transmit(pc_uart, "ESP Reset\r\n", strlen( "ESP Reset\r\n"), 100);
 8000a00:	2364      	movs	r3, #100	; 0x64
 8000a02:	220b      	movs	r2, #11
 8000a04:	4905      	ldr	r1, [pc, #20]	; (8000a1c <ESP_RESET+0x54>)
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <ESP_RESET+0x58>)
 8000a08:	f002 f8e3 	bl	8002bd2 <HAL_UART_Transmit>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	40021400 	.word	0x40021400
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	08004424 	.word	0x08004424
 8000a20:	200000f4 	.word	0x200000f4

08000a24 <ESP_Nodemcu_Init>:

void ESP_Nodemcu_Init()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	int wait_time = 1000;
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	607b      	str	r3, [r7, #4]
	ESP_RESET();
 8000a30:	f7ff ffca 	bl	80009c8 <ESP_RESET>
	HAL_Delay(wait_time * 1);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fd82 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000a3c:	4893      	ldr	r0, [pc, #588]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000a3e:	f7ff fbe7 	bl	8000210 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	4990      	ldr	r1, [pc, #576]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000a4c:	4890      	ldr	r0, [pc, #576]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000a4e:	f002 f8c0 	bl	8002bd2 <HAL_UART_Transmit>
//	HAL_UART_Transmit(pc_uart, "Test\r\n", strlen( "Test\r\n"), 100);
	ESP_Clear_Buffer();
 8000a52:	f000 f937 	bl	8000cc4 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"wifi.setmode(wifi.STATION)\r\n", strlen("wifi.setmode(wifi.STATION)\r\n"), 100);
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	221c      	movs	r2, #28
 8000a5a:	498e      	ldr	r1, [pc, #568]	; (8000c94 <ESP_Nodemcu_Init+0x270>)
 8000a5c:	488e      	ldr	r0, [pc, #568]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000a5e:	f002 f8b8 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fd6b 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000a6a:	4888      	ldr	r0, [pc, #544]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000a6c:	f7ff fbd0 	bl	8000210 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	4984      	ldr	r1, [pc, #528]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000a7a:	4885      	ldr	r0, [pc, #532]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000a7c:	f002 f8a9 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000a80:	f000 f920 	bl	8000cc4 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"wifi.sta.config(\"MichelCel\", \"michel123\")\r\n", strlen("wifi.sta.config(\"MichelCel\", \"michel123\")\r\n"), 100);
 8000a84:	2364      	movs	r3, #100	; 0x64
 8000a86:	222b      	movs	r2, #43	; 0x2b
 8000a88:	4984      	ldr	r1, [pc, #528]	; (8000c9c <ESP_Nodemcu_Init+0x278>)
 8000a8a:	4883      	ldr	r0, [pc, #524]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000a8c:	f002 f8a1 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fd54 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000a98:	487c      	ldr	r0, [pc, #496]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000a9a:	f7ff fbb9 	bl	8000210 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	4979      	ldr	r1, [pc, #484]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000aa8:	4879      	ldr	r0, [pc, #484]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000aaa:	f002 f892 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000aae:	f000 f909 	bl	8000cc4 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"wifi.sta.connect()\r\n", strlen("wifi.sta.connect()\r\n"), 100);
 8000ab2:	2364      	movs	r3, #100	; 0x64
 8000ab4:	2214      	movs	r2, #20
 8000ab6:	497a      	ldr	r1, [pc, #488]	; (8000ca0 <ESP_Nodemcu_Init+0x27c>)
 8000ab8:	4877      	ldr	r0, [pc, #476]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000aba:	f002 f88a 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time * 2);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fd3c 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000ac8:	4870      	ldr	r0, [pc, #448]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000aca:	f7ff fba1 	bl	8000210 <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	496d      	ldr	r1, [pc, #436]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000ad8:	486d      	ldr	r0, [pc, #436]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000ada:	f002 f87a 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000ade:	f000 f8f1 	bl	8000cc4 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "bat = 100\r\n", strlen("bat = 100\r\n"), 1000);
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	220b      	movs	r2, #11
 8000ae8:	496e      	ldr	r1, [pc, #440]	; (8000ca4 <ESP_Nodemcu_Init+0x280>)
 8000aea:	486b      	ldr	r0, [pc, #428]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000aec:	f002 f871 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fd24 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000af8:	4864      	ldr	r0, [pc, #400]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000afa:	f7ff fb89 	bl	8000210 <strlen>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	4961      	ldr	r1, [pc, #388]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000b08:	4861      	ldr	r0, [pc, #388]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000b0a:	f002 f862 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000b0e:	f000 f8d9 	bl	8000cc4 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"srv = net.createServer(net.TCP)\r\n", strlen("srv = net.createServer(net.TCP)\r\n"), 100);
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	2221      	movs	r2, #33	; 0x21
 8000b16:	4964      	ldr	r1, [pc, #400]	; (8000ca8 <ESP_Nodemcu_Init+0x284>)
 8000b18:	485f      	ldr	r0, [pc, #380]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000b1a:	f002 f85a 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fd0d 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000b26:	4859      	ldr	r0, [pc, #356]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000b28:	f7ff fb72 	bl	8000210 <strlen>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b34:	4955      	ldr	r1, [pc, #340]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000b36:	4856      	ldr	r0, [pc, #344]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000b38:	f002 f84b 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000b3c:	f000 f8c2 	bl	8000cc4 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "srv:listen(80, function(conn)\r\n", strlen("srv:listen(80, function(conn)\r\n"), 100);
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	221f      	movs	r2, #31
 8000b44:	4959      	ldr	r1, [pc, #356]	; (8000cac <ESP_Nodemcu_Init+0x288>)
 8000b46:	4854      	ldr	r0, [pc, #336]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000b48:	f002 f843 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fcf6 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000b54:	484d      	ldr	r0, [pc, #308]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000b56:	f7ff fb5b 	bl	8000210 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	494a      	ldr	r1, [pc, #296]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000b64:	484a      	ldr	r0, [pc, #296]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000b66:	f002 f834 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000b6a:	f000 f8ab 	bl	8000cc4 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "conn:on(\"receive\", function(sck, payload)\r\n", strlen("conn:on(\"receive\", function(sck, payload)\r\n"), 100);
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	222b      	movs	r2, #43	; 0x2b
 8000b72:	494f      	ldr	r1, [pc, #316]	; (8000cb0 <ESP_Nodemcu_Init+0x28c>)
 8000b74:	4848      	ldr	r0, [pc, #288]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000b76:	f002 f82c 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fcdf 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000b82:	4842      	ldr	r0, [pc, #264]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000b84:	f7ff fb44 	bl	8000210 <strlen>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b90:	493e      	ldr	r1, [pc, #248]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000b92:	483f      	ldr	r0, [pc, #252]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000b94:	f002 f81d 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000b98:	f000 f894 	bl	8000cc4 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "print(payload)\r\n", strlen("print(payload)\r\n"), 100);
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	2210      	movs	r2, #16
 8000ba0:	4944      	ldr	r1, [pc, #272]	; (8000cb4 <ESP_Nodemcu_Init+0x290>)
 8000ba2:	483d      	ldr	r0, [pc, #244]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000ba4:	f002 f815 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fcc8 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000bb0:	4836      	ldr	r0, [pc, #216]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000bb2:	f7ff fb2d 	bl	8000210 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	4933      	ldr	r1, [pc, #204]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000bc0:	4833      	ldr	r0, [pc, #204]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000bc2:	f002 f806 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000bc6:	f000 f87d 	bl	8000cc4 <ESP_Clear_Buffer>
//	HAL_UART_Transmit(wifi_uart, "if string.find(payload, \"GET\") ~= nil then\r\n", strlen("if string.find(payload, \"GET\") ~= nil then\r\n"), 100);
//	HAL_Delay(wait_time);
//	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
//	ESP_Clear_Buffer();
	HAL_UART_Transmit(wifi_uart, "sck:send(\"HTTP/1.0 200 OK\\r\\n\Content-Type: text/html\\r\\n\\r\\nBattery: \" .. bat .. \"%\")\r\n", strlen("sck:send(\"HTTP/1.0 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\nBattery: \" .. bat .. \"%\")\r\n"), 100);
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	2257      	movs	r2, #87	; 0x57
 8000bce:	493a      	ldr	r1, [pc, #232]	; (8000cb8 <ESP_Nodemcu_Init+0x294>)
 8000bd0:	4831      	ldr	r0, [pc, #196]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000bd2:	f001 fffe 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fcb1 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000bde:	482b      	ldr	r0, [pc, #172]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000be0:	f7ff fb16 	bl	8000210 <strlen>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bec:	4927      	ldr	r1, [pc, #156]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000bee:	4828      	ldr	r0, [pc, #160]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000bf0:	f001 ffef 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000bf4:	f000 f866 	bl	8000cc4 <ESP_Clear_Buffer>
//	ESP_Clear_Buffer();
//	HAL_UART_Transmit(wifi_uart, "end\r\n", strlen("end\r\n"), 100);
//	HAL_Delay(wait_time);
//	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
//	ESP_Clear_Buffer();
	HAL_UART_Transmit(wifi_uart, "end)\r\n", strlen("end)\r\n"), 100);
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	2206      	movs	r2, #6
 8000bfc:	492f      	ldr	r1, [pc, #188]	; (8000cbc <ESP_Nodemcu_Init+0x298>)
 8000bfe:	4826      	ldr	r0, [pc, #152]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000c00:	f001 ffe7 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fc9a 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000c0c:	481f      	ldr	r0, [pc, #124]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000c0e:	f7ff faff 	bl	8000210 <strlen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	491c      	ldr	r1, [pc, #112]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000c1c:	481c      	ldr	r0, [pc, #112]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000c1e:	f001 ffd8 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000c22:	f000 f84f 	bl	8000cc4 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "conn:on(\"sent\", function(sck) sck:close() end)\r\n", strlen("conn:on(\"sent\", function(sck) sck:close() end)\r\n"), 100);
 8000c26:	2364      	movs	r3, #100	; 0x64
 8000c28:	2230      	movs	r2, #48	; 0x30
 8000c2a:	4925      	ldr	r1, [pc, #148]	; (8000cc0 <ESP_Nodemcu_Init+0x29c>)
 8000c2c:	481a      	ldr	r0, [pc, #104]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000c2e:	f001 ffd0 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fc83 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000c3c:	f7ff fae8 	bl	8000210 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c48:	4910      	ldr	r1, [pc, #64]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000c4a:	4811      	ldr	r0, [pc, #68]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000c4c:	f001 ffc1 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000c50:	f000 f838 	bl	8000cc4 <ESP_Clear_Buffer>
	HAL_UART_Transmit(wifi_uart, "end)\r\n", strlen("end)\r\n"), 100);
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	2206      	movs	r2, #6
 8000c58:	4918      	ldr	r1, [pc, #96]	; (8000cbc <ESP_Nodemcu_Init+0x298>)
 8000c5a:	480f      	ldr	r0, [pc, #60]	; (8000c98 <ESP_Nodemcu_Init+0x274>)
 8000c5c:	f001 ffb9 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_Delay(wait_time);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fc6c 	bl	8001540 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000c6a:	f7ff fad1 	bl	8000210 <strlen>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c76:	4905      	ldr	r1, [pc, #20]	; (8000c8c <ESP_Nodemcu_Init+0x268>)
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <ESP_Nodemcu_Init+0x26c>)
 8000c7a:	f001 ffaa 	bl	8002bd2 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000c7e:	f000 f821 	bl	8000cc4 <ESP_Clear_Buffer>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000180 	.word	0x20000180
 8000c90:	200000f4 	.word	0x200000f4
 8000c94:	08004430 	.word	0x08004430
 8000c98:	200000ac 	.word	0x200000ac
 8000c9c:	08004450 	.word	0x08004450
 8000ca0:	0800447c 	.word	0x0800447c
 8000ca4:	08004494 	.word	0x08004494
 8000ca8:	080044a0 	.word	0x080044a0
 8000cac:	080044c4 	.word	0x080044c4
 8000cb0:	080044e4 	.word	0x080044e4
 8000cb4:	08004510 	.word	0x08004510
 8000cb8:	08004524 	.word	0x08004524
 8000cbc:	0800457c 	.word	0x0800457c
 8000cc0:	08004584 	.word	0x08004584

08000cc4 <ESP_Clear_Buffer>:
//	HAL_Delay(2000);
	resetTime = 2;
}

void ESP_Clear_Buffer()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	memset(buffer, 0, 2000);
 8000cc8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <ESP_Clear_Buffer+0x1c>)
 8000cd0:	f002 ff66 	bl	8003ba0 <memset>
	buffer_index = 0;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <ESP_Clear_Buffer+0x20>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	801a      	strh	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000180 	.word	0x20000180
 8000ce4:	20000090 	.word	0x20000090

08000ce8 <string_compare>:
	if(percent > 100.0f)
		percent = 100.0f;
}

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b087      	sub	sp, #28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	80fb      	strh	r3, [r7, #6]
	 uint16_t comVAR=0, i;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	82bb      	strh	r3, [r7, #20]
 8000cfe:	e012      	b.n	8000d26 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000d00:	8abb      	ldrh	r3, [r7, #20]
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4413      	add	r3, r2
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	8abb      	ldrh	r3, [r7, #20]
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	440b      	add	r3, r1
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d103      	bne.n	8000d1c <string_compare+0x34>
	   	  		  comVAR++;
 8000d14:	8afb      	ldrh	r3, [r7, #22]
 8000d16:	3301      	adds	r3, #1
 8000d18:	82fb      	strh	r3, [r7, #22]
 8000d1a:	e001      	b.n	8000d20 <string_compare+0x38>
	   	  	  else comVAR=0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 8000d20:	8abb      	ldrh	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	82bb      	strh	r3, [r7, #20]
 8000d26:	8aba      	ldrh	r2, [r7, #20]
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3e8      	bcc.n	8000d00 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8000d2e:	8afa      	ldrh	r2, [r7, #22]
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d101      	bne.n	8000d3a <string_compare+0x52>
		 	return 1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <string_compare+0x54>
	 else 	return 0;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	371c      	adds	r7, #28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <string_contains>:

int string_contains(char bufferArray[], char searchedString[], uint16_t length)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	4613      	mov	r3, r2
 8000d54:	80fb      	strh	r3, [r7, #6]
	uint8_t result=0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	757b      	strb	r3, [r7, #21]
	for(uint16_t i=0; i<length; i++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	82fb      	strh	r3, [r7, #22]
 8000d5e:	e016      	b.n	8000d8e <string_contains+0x46>
	{
		result = string_compare(&bufferArray[i], &searchedString[0], strlen(searchedString));
 8000d60:	8afb      	ldrh	r3, [r7, #22]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	18d4      	adds	r4, r2, r3
 8000d66:	68b8      	ldr	r0, [r7, #8]
 8000d68:	f7ff fa52 	bl	8000210 <strlen>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff ffb7 	bl	8000ce8 <string_compare>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	757b      	strb	r3, [r7, #21]
		if(result == 1)
 8000d7e:	7d7b      	ldrb	r3, [r7, #21]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d101      	bne.n	8000d88 <string_contains+0x40>
			return i;
 8000d84:	8afb      	ldrh	r3, [r7, #22]
 8000d86:	e008      	b.n	8000d9a <string_contains+0x52>
	for(uint16_t i=0; i<length; i++)
 8000d88:	8afb      	ldrh	r3, [r7, #22]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	82fb      	strh	r3, [r7, #22]
 8000d8e:	8afa      	ldrh	r2, [r7, #22]
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d3e4      	bcc.n	8000d60 <string_contains+0x18>
	}
	return -1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	371c      	adds	r7, #28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd90      	pop	{r4, r7, pc}
	...

08000da4 <getLink>:

int getLink(int position)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	while (buffer[position] != ',' && position != 0) position--;
 8000dac:	e002      	b.n	8000db4 <getLink+0x10>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <getLink+0x44>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b2c      	cmp	r3, #44	; 0x2c
 8000dbe:	d002      	beq.n	8000dc6 <getLink+0x22>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f3      	bne.n	8000dae <getLink+0xa>
	if (position != 0)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <getLink+0x34>
		return (int) buffer[position-1] -48;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <getLink+0x44>)
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	3b30      	subs	r3, #48	; 0x30
 8000dd6:	e000      	b.n	8000dda <getLink+0x36>
	return 0;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000180 	.word	0x20000180

08000dec <messageHandler>:

void messageHandler()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
	__HAL_UART_DISABLE_IT(wifi_uart, UART_IT_RXNE);
 8000df2:	4b7f      	ldr	r3, [pc, #508]	; (8000ff0 <messageHandler+0x204>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	4b7d      	ldr	r3, [pc, #500]	; (8000ff0 <messageHandler+0x204>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0220 	bic.w	r2, r2, #32
 8000e00:	60da      	str	r2, [r3, #12]
	int position = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
	handle = 1;
 8000e06:	4b7b      	ldr	r3, [pc, #492]	; (8000ff4 <messageHandler+0x208>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
 8000e0c:	487a      	ldr	r0, [pc, #488]	; (8000ff8 <messageHandler+0x20c>)
 8000e0e:	f7ff f9ff 	bl	8000210 <strlen>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	4977      	ldr	r1, [pc, #476]	; (8000ff8 <messageHandler+0x20c>)
 8000e1c:	4877      	ldr	r0, [pc, #476]	; (8000ffc <messageHandler+0x210>)
 8000e1e:	f001 fed8 	bl	8002bd2 <HAL_UART_Transmit>
	char string3[20];
//	calculateBattery();
	float value = percent;
 8000e22:	4b77      	ldr	r3, [pc, #476]	; (8001000 <messageHandler+0x214>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2e:	edc7 7a06 	vstr	s15, [r7, #24]
//	sprintf(string3, "bat = %d\r\n", (int)percent);
	sprintf(string3, "bat = %d\r\n", percent);
 8000e32:	4b73      	ldr	r3, [pc, #460]	; (8001000 <messageHandler+0x214>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	463b      	mov	r3, r7
 8000e38:	4972      	ldr	r1, [pc, #456]	; (8001004 <messageHandler+0x218>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 feb8 	bl	8003bb0 <siprintf>
	HAL_UART_Transmit(wifi_uart, string3, strlen(string3), 1000);
 8000e40:	463b      	mov	r3, r7
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f9e4 	bl	8000210 <strlen>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	4867      	ldr	r0, [pc, #412]	; (8000ff0 <messageHandler+0x204>)
 8000e54:	f001 febd 	bl	8002bd2 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	486a      	ldr	r0, [pc, #424]	; (8001008 <messageHandler+0x21c>)
 8000e5e:	f001 f93d 	bl	80020dc <HAL_GPIO_WritePin>
	if((position = string_contains((char*)buffer, "GET", buffer_index)) != -1)
 8000e62:	4b6a      	ldr	r3, [pc, #424]	; (800100c <messageHandler+0x220>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4969      	ldr	r1, [pc, #420]	; (8001010 <messageHandler+0x224>)
 8000e6a:	4863      	ldr	r0, [pc, #396]	; (8000ff8 <messageHandler+0x20c>)
 8000e6c:	f7ff ff6c 	bl	8000d48 <string_contains>
 8000e70:	61f8      	str	r0, [r7, #28]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d004      	beq.n	8000e84 <messageHandler+0x98>
	{
		int link = getLink(position);
 8000e7a:	69f8      	ldr	r0, [r7, #28]
 8000e7c:	f7ff ff92 	bl	8000da4 <getLink>
 8000e80:	6178      	str	r0, [r7, #20]
 8000e82:	e0a3      	b.n	8000fcc <messageHandler+0x1e0>
//		if (string_contains((char*)buffer, "/ledon", buffer_index) != -1)
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//		else if (string_contains((char*)buffer, "/ledoff", buffer_index) != -1)
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	}
	else if((position = string_contains((char*)buffer, "SPACE", buffer_index))!= -1)
 8000e84:	4b61      	ldr	r3, [pc, #388]	; (800100c <messageHandler+0x220>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4962      	ldr	r1, [pc, #392]	; (8001014 <messageHandler+0x228>)
 8000e8c:	485a      	ldr	r0, [pc, #360]	; (8000ff8 <messageHandler+0x20c>)
 8000e8e:	f7ff ff5b 	bl	8000d48 <string_contains>
 8000e92:	61f8      	str	r0, [r7, #28]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9a:	d005      	beq.n	8000ea8 <messageHandler+0xbc>
	{
//		if (Vbatt2 > 14)
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	4859      	ldr	r0, [pc, #356]	; (8001008 <messageHandler+0x21c>)
 8000ea2:	f001 f91b 	bl	80020dc <HAL_GPIO_WritePin>
 8000ea6:	e091      	b.n	8000fcc <messageHandler+0x1e0>
//		TIM1->CCR1 = 0;
//		TIM1->CCR2 = 0;
//		TIM1->CCR3 = 0;
//		TIM1->CCR4 = 0;
	}
	else if((position = string_contains((char*)buffer, "F-", buffer_index)) != -1)
 8000ea8:	4b58      	ldr	r3, [pc, #352]	; (800100c <messageHandler+0x220>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	495a      	ldr	r1, [pc, #360]	; (8001018 <messageHandler+0x22c>)
 8000eb0:	4851      	ldr	r0, [pc, #324]	; (8000ff8 <messageHandler+0x20c>)
 8000eb2:	f7ff ff49 	bl	8000d48 <string_contains>
 8000eb6:	61f8      	str	r0, [r7, #28]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebe:	f040 8085 	bne.w	8000fcc <messageHandler+0x1e0>
//		TIM1->CCR3 = motor_ratio(speed);
//		TIM1->CCR4 = 0;
//		memset(outputString, 0, 100);
//		sprintf(outputString, "Battery: %d%%\n", motor_ratio(speed));
//		HAL_UART_Transmit(pc_uart, (uint8_t*)outputString, strlen(outputString), 100);
	}else if((position = string_contains((char*)buffer, "B-", buffer_index)) != -1)
 8000ec2:	4b52      	ldr	r3, [pc, #328]	; (800100c <messageHandler+0x220>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4954      	ldr	r1, [pc, #336]	; (800101c <messageHandler+0x230>)
 8000eca:	484b      	ldr	r0, [pc, #300]	; (8000ff8 <messageHandler+0x20c>)
 8000ecc:	f7ff ff3c 	bl	8000d48 <string_contains>
 8000ed0:	61f8      	str	r0, [r7, #28]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d178      	bne.n	8000fcc <messageHandler+0x1e0>
//		speed = atoi((char*)&buffer[position + 2]);
//		TIM1->CCR1 = 0;
//		TIM1->CCR2 = motor_ratio(speed);
//		TIM1->CCR3 = 0;
//		TIM1->CCR4 = motor_ratio(speed);
	}else if((position = string_contains((char*)buffer, "-R", buffer_index)) != -1)
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <messageHandler+0x220>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	494f      	ldr	r1, [pc, #316]	; (8001020 <messageHandler+0x234>)
 8000ee2:	4845      	ldr	r0, [pc, #276]	; (8000ff8 <messageHandler+0x20c>)
 8000ee4:	f7ff ff30 	bl	8000d48 <string_contains>
 8000ee8:	61f8      	str	r0, [r7, #28]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d16c      	bne.n	8000fcc <messageHandler+0x1e0>
//		speed = atoi((char*)&buffer[position + 2]);
//		TIM1->CCR1 = motor_ratio(speed);
//		TIM1->CCR2 = 0;
//		TIM1->CCR3 = 0;
//		TIM1->CCR4 = motor_ratio(speed);
	}else if((position = string_contains((char*)buffer, "-L", buffer_index)) != -1)
 8000ef2:	4b46      	ldr	r3, [pc, #280]	; (800100c <messageHandler+0x220>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	494a      	ldr	r1, [pc, #296]	; (8001024 <messageHandler+0x238>)
 8000efa:	483f      	ldr	r0, [pc, #252]	; (8000ff8 <messageHandler+0x20c>)
 8000efc:	f7ff ff24 	bl	8000d48 <string_contains>
 8000f00:	61f8      	str	r0, [r7, #28]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d160      	bne.n	8000fcc <messageHandler+0x1e0>
//		speed = atoi((char*)&buffer[position + 2]);
//		TIM1->CCR1 = 0;
//		TIM1->CCR2 = motor_ratio(speed);
//		TIM1->CCR3 = motor_ratio(speed);
//		TIM1->CCR4 = 0;
	}else if((position = string_contains((char*)buffer, "FR", buffer_index)) != -1)
 8000f0a:	4b40      	ldr	r3, [pc, #256]	; (800100c <messageHandler+0x220>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4945      	ldr	r1, [pc, #276]	; (8001028 <messageHandler+0x23c>)
 8000f12:	4839      	ldr	r0, [pc, #228]	; (8000ff8 <messageHandler+0x20c>)
 8000f14:	f7ff ff18 	bl	8000d48 <string_contains>
 8000f18:	61f8      	str	r0, [r7, #28]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d154      	bne.n	8000fcc <messageHandler+0x1e0>
//		speed = atoi((char*)&buffer[position + 2]);
//		TIM1->CCR1 = motor_ratio(speed);
//		TIM1->CCR2 = 0;
//		TIM1->CCR3 = 0;
//		TIM1->CCR4 = 0;
	}else if((position = string_contains((char*)buffer, "FL", buffer_index)) != -1)
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <messageHandler+0x220>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4940      	ldr	r1, [pc, #256]	; (800102c <messageHandler+0x240>)
 8000f2a:	4833      	ldr	r0, [pc, #204]	; (8000ff8 <messageHandler+0x20c>)
 8000f2c:	f7ff ff0c 	bl	8000d48 <string_contains>
 8000f30:	61f8      	str	r0, [r7, #28]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d148      	bne.n	8000fcc <messageHandler+0x1e0>
//		speed = atoi((char*)&buffer[position + 2]);
//		TIM1->CCR1 = 0;
//		TIM1->CCR2 = 0;
//		TIM1->CCR3 = motor_ratio(speed);
//		TIM1->CCR4 = 0;
	}else if((position = string_contains((char*)buffer, "BR", buffer_index)) != -1)
 8000f3a:	4b34      	ldr	r3, [pc, #208]	; (800100c <messageHandler+0x220>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	493b      	ldr	r1, [pc, #236]	; (8001030 <messageHandler+0x244>)
 8000f42:	482d      	ldr	r0, [pc, #180]	; (8000ff8 <messageHandler+0x20c>)
 8000f44:	f7ff ff00 	bl	8000d48 <string_contains>
 8000f48:	61f8      	str	r0, [r7, #28]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d13c      	bne.n	8000fcc <messageHandler+0x1e0>
//		speed = atoi((char*)&buffer[position + 2]);
//		TIM1->CCR1 = 0;
//		TIM1->CCR2 = motor_ratio(speed);
//		TIM1->CCR3 = 0;
//		TIM1->CCR4 = 0;
	}else if((position = string_contains((char*)buffer, "BL", buffer_index)) != -1)
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <messageHandler+0x220>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4936      	ldr	r1, [pc, #216]	; (8001034 <messageHandler+0x248>)
 8000f5a:	4827      	ldr	r0, [pc, #156]	; (8000ff8 <messageHandler+0x20c>)
 8000f5c:	f7ff fef4 	bl	8000d48 <string_contains>
 8000f60:	61f8      	str	r0, [r7, #28]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d130      	bne.n	8000fcc <messageHandler+0x1e0>
//		speed = atoi((char*)&buffer[position + 2]);
//		TIM1->CCR1 = 0;
//		TIM1->CCR2 = 0;
//		TIM1->CCR3 = 0;
//		TIM1->CCR4 = motor_ratio(speed);
	}else if((position = string_contains((char*)buffer, "--", buffer_index)) != -1)
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <messageHandler+0x220>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4931      	ldr	r1, [pc, #196]	; (8001038 <messageHandler+0x24c>)
 8000f72:	4821      	ldr	r0, [pc, #132]	; (8000ff8 <messageHandler+0x20c>)
 8000f74:	f7ff fee8 	bl	8000d48 <string_contains>
 8000f78:	61f8      	str	r0, [r7, #28]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d007      	beq.n	8000f92 <messageHandler+0x1a6>
	{
		HAL_UART_Transmit(pc_uart, "Test\r\n", strlen("Test\r\n"), 1000);
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	2206      	movs	r2, #6
 8000f88:	492c      	ldr	r1, [pc, #176]	; (800103c <messageHandler+0x250>)
 8000f8a:	481c      	ldr	r0, [pc, #112]	; (8000ffc <messageHandler+0x210>)
 8000f8c:	f001 fe21 	bl	8002bd2 <HAL_UART_Transmit>
 8000f90:	e01c      	b.n	8000fcc <messageHandler+0x1e0>
//		speed = atoi((char*)&buffer[position + 3]);
//		TIM1->CCR1 = 0;
//		TIM1->CCR2 = 0;
//		TIM1->CCR3 = 0;
//		TIM1->CCR4 = 0;
	}else if(string_contains((char*)buffer, "+CWJAP:", buffer_index) != -1
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <messageHandler+0x220>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	4929      	ldr	r1, [pc, #164]	; (8001040 <messageHandler+0x254>)
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <messageHandler+0x20c>)
 8000f9c:	f7ff fed4 	bl	8000d48 <string_contains>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa6:	d011      	beq.n	8000fcc <messageHandler+0x1e0>
			&& (string_contains((char*)buffer, "FAIL", buffer_index) != -1
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <messageHandler+0x220>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4925      	ldr	r1, [pc, #148]	; (8001044 <messageHandler+0x258>)
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <messageHandler+0x20c>)
 8000fb2:	f7ff fec9 	bl	8000d48 <string_contains>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d106      	bne.n	8000fcc <messageHandler+0x1e0>
			|| string_contains((char*)buffer, "DISCONNECT", buffer_index) != -1))
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <messageHandler+0x220>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4920      	ldr	r1, [pc, #128]	; (8001048 <messageHandler+0x25c>)
 8000fc6:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <messageHandler+0x20c>)
 8000fc8:	f7ff febe 	bl	8000d48 <string_contains>
	{
		//Change your WiFi SSID credentials below
//		HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWJAP=\"MichelCel\",\"michel123\"\r\n", strlen("AT+CWJAP=\"MichelCel\",\"michel123\"\r\n"), 100);
	}
	handle = 0;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <messageHandler+0x208>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]

	ESP_Clear_Buffer();
 8000fd2:	f7ff fe77 	bl	8000cc4 <ESP_Clear_Buffer>
	__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <messageHandler+0x204>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <messageHandler+0x204>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0220 	orr.w	r2, r2, #32
 8000fe4:	60da      	str	r2, [r3, #12]
}
 8000fe6:	bf00      	nop
 8000fe8:	3720      	adds	r7, #32
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000ac 	.word	0x200000ac
 8000ff4:	2000009c 	.word	0x2000009c
 8000ff8:	20000180 	.word	0x20000180
 8000ffc:	200000f4 	.word	0x200000f4
 8001000:	200000f0 	.word	0x200000f0
 8001004:	08004648 	.word	0x08004648
 8001008:	40021000 	.word	0x40021000
 800100c:	20000090 	.word	0x20000090
 8001010:	08004654 	.word	0x08004654
 8001014:	08004658 	.word	0x08004658
 8001018:	08004660 	.word	0x08004660
 800101c:	08004664 	.word	0x08004664
 8001020:	08004668 	.word	0x08004668
 8001024:	0800466c 	.word	0x0800466c
 8001028:	08004670 	.word	0x08004670
 800102c:	08004674 	.word	0x08004674
 8001030:	08004678 	.word	0x08004678
 8001034:	0800467c 	.word	0x0800467c
 8001038:	08004680 	.word	0x08004680
 800103c:	08004684 	.word	0x08004684
 8001040:	0800468c 	.word	0x0800468c
 8001044:	08004694 	.word	0x08004694
 8001048:	0800469c 	.word	0x0800469c

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <HAL_MspInit+0x4c>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_MspInit+0x4c>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0320 	and.w	r3, r3, #32
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF7     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f000 fe53 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012200 	.word	0x40012200
 800111c:	40023800 	.word	0x40023800
 8001120:	40021400 	.word	0x40021400

08001124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a46      	ldr	r2, [pc, #280]	; (800125c <HAL_UART_MspInit+0x138>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d12d      	bne.n	80011a2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <HAL_UART_MspInit+0x13c>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a44      	ldr	r2, [pc, #272]	; (8001260 <HAL_UART_MspInit+0x13c>)
 8001150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b42      	ldr	r3, [pc, #264]	; (8001260 <HAL_UART_MspInit+0x13c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <HAL_UART_MspInit+0x13c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a3d      	ldr	r2, [pc, #244]	; (8001260 <HAL_UART_MspInit+0x13c>)
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <HAL_UART_MspInit+0x13c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PE7     ------> UART5_RX
    PE8     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800117e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001190:	2308      	movs	r3, #8
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4832      	ldr	r0, [pc, #200]	; (8001264 <HAL_UART_MspInit+0x140>)
 800119c:	f000 fe0a 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011a0:	e057      	b.n	8001252 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a30      	ldr	r2, [pc, #192]	; (8001268 <HAL_UART_MspInit+0x144>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d152      	bne.n	8001252 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_UART_MspInit+0x13c>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a2a      	ldr	r2, [pc, #168]	; (8001260 <HAL_UART_MspInit+0x13c>)
 80011b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <HAL_UART_MspInit+0x13c>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <HAL_UART_MspInit+0x13c>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	4a23      	ldr	r2, [pc, #140]	; (8001260 <HAL_UART_MspInit+0x13c>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6313      	str	r3, [r2, #48]	; 0x30
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_UART_MspInit+0x13c>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_UART_MspInit+0x13c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <HAL_UART_MspInit+0x13c>)
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_UART_MspInit+0x13c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001200:	2320      	movs	r3, #32
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001210:	2307      	movs	r3, #7
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	4814      	ldr	r0, [pc, #80]	; (800126c <HAL_UART_MspInit+0x148>)
 800121c:	f000 fdca 	bl	8001db4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001232:	2307      	movs	r3, #7
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <HAL_UART_MspInit+0x14c>)
 800123e:	f000 fdb9 	bl	8001db4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2027      	movs	r0, #39	; 0x27
 8001248:	f000 fceb 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800124c:	2027      	movs	r0, #39	; 0x27
 800124e:	f000 fd04 	bl	8001c5a <HAL_NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3730      	adds	r7, #48	; 0x30
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40005000 	.word	0x40005000
 8001260:	40023800 	.word	0x40023800
 8001264:	40021000 	.word	0x40021000
 8001268:	40004800 	.word	0x40004800
 800126c:	40020800 	.word	0x40020800
 8001270:	40020400 	.word	0x40020400

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <NMI_Handler+0x4>

0800127a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler+0x4>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <UsageFault_Handler+0x4>

08001292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c0:	f000 f91e 	bl	8001500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	timeout = 1;
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <USART3_IRQHandler+0x94>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	801a      	strh	r2, [r3, #0]
  	safeCounter = 0;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <USART3_IRQHandler+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

  	if(buffer_index < 2000)
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <USART3_IRQHandler+0x9c>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012e0:	d20e      	bcs.n	8001300 <USART3_IRQHandler+0x38>
  	{
  		HAL_UART_Receive(wifi_uart, &buffer[buffer_index++], 1, 10);
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <USART3_IRQHandler+0x9c>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	b291      	uxth	r1, r2
 80012ea:	4a1e      	ldr	r2, [pc, #120]	; (8001364 <USART3_IRQHandler+0x9c>)
 80012ec:	8011      	strh	r1, [r2, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <USART3_IRQHandler+0xa0>)
 80012f2:	18d1      	adds	r1, r2, r3
 80012f4:	230a      	movs	r3, #10
 80012f6:	2201      	movs	r2, #1
 80012f8:	481c      	ldr	r0, [pc, #112]	; (800136c <USART3_IRQHandler+0xa4>)
 80012fa:	f001 fcfc 	bl	8002cf6 <HAL_UART_Receive>
 80012fe:	e005      	b.n	800130c <USART3_IRQHandler+0x44>
//  		char vlue = buffer[buffer_index-1];
//  		HAL_UART_Transmit(pc_uart, vlue, 1, 10);
  	}
  	else
  	{
  		HAL_UART_Receive(wifi_uart, &buffer[1999], 1, 10);
 8001300:	230a      	movs	r3, #10
 8001302:	2201      	movs	r2, #1
 8001304:	491a      	ldr	r1, [pc, #104]	; (8001370 <USART3_IRQHandler+0xa8>)
 8001306:	4819      	ldr	r0, [pc, #100]	; (800136c <USART3_IRQHandler+0xa4>)
 8001308:	f001 fcf5 	bl	8002cf6 <HAL_UART_Receive>
//  		HAL_UART_Transmit(pc_uart, buffer[1999], 1, 10);
  	}

  	if(buffer_index > 5)
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <USART3_IRQHandler+0x9c>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	2b05      	cmp	r3, #5
 8001312:	d91e      	bls.n	8001352 <USART3_IRQHandler+0x8a>
  	{
  		if(buffer[buffer_index-4] == '\r' && buffer[buffer_index-3] == '\n' && buffer[buffer_index-2] == '\r' && buffer[buffer_index-1] == '\n')
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <USART3_IRQHandler+0x9c>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	3b04      	subs	r3, #4
 800131a:	4a13      	ldr	r2, [pc, #76]	; (8001368 <USART3_IRQHandler+0xa0>)
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	2b0d      	cmp	r3, #13
 8001320:	d117      	bne.n	8001352 <USART3_IRQHandler+0x8a>
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <USART3_IRQHandler+0x9c>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	3b03      	subs	r3, #3
 8001328:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <USART3_IRQHandler+0xa0>)
 800132a:	5cd3      	ldrb	r3, [r2, r3]
 800132c:	2b0a      	cmp	r3, #10
 800132e:	d110      	bne.n	8001352 <USART3_IRQHandler+0x8a>
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <USART3_IRQHandler+0x9c>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	3b02      	subs	r3, #2
 8001336:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <USART3_IRQHandler+0xa0>)
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	2b0d      	cmp	r3, #13
 800133c:	d109      	bne.n	8001352 <USART3_IRQHandler+0x8a>
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <USART3_IRQHandler+0x9c>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	4a08      	ldr	r2, [pc, #32]	; (8001368 <USART3_IRQHandler+0xa0>)
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	2b0a      	cmp	r3, #10
 800134a:	d102      	bne.n	8001352 <USART3_IRQHandler+0x8a>
  			messageHandlerFlag = 1;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <USART3_IRQHandler+0xac>)
 800134e:	2201      	movs	r2, #1
 8001350:	801a      	strh	r2, [r3, #0]
  	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <USART3_IRQHandler+0xa4>)
 8001354:	f001 fd72 	bl	8002e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000092 	.word	0x20000092
 8001360:	20000098 	.word	0x20000098
 8001364:	20000090 	.word	0x20000090
 8001368:	20000180 	.word	0x20000180
 800136c:	200000ac 	.word	0x200000ac
 8001370:	2000094f 	.word	0x2000094f
 8001374:	20000094 	.word	0x20000094

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f002 fbd0 	bl	8003b4c <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20020000 	.word	0x20020000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	200000a0 	.word	0x200000a0
 80013e0:	20000968 	.word	0x20000968

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <SystemInit+0x20>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <SystemInit+0x20>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800140e:	490e      	ldr	r1, [pc, #56]	; (8001448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001424:	4c0b      	ldr	r4, [pc, #44]	; (8001454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001432:	f7ff ffd7 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001436:	f002 fb8f 	bl	8003b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff f8bd 	bl	80005b8 <main>
  bx  lr    
 800143e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800144c:	080047e0 	.word	0x080047e0
  ldr r2, =_sbss
 8001450:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001454:	20000968 	.word	0x20000968

08001458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <HAL_Init+0x40>)
 8001466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_Init+0x40>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_Init+0x40>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 fbc1 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148a:	200f      	movs	r0, #15
 800148c:	f000 f808 	bl	80014a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff fddc 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x54>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x58>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fbd9 	bl	8001c76 <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00e      	b.n	80014ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d80a      	bhi.n	80014ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f000 fba1 	bl	8001c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_InitTick+0x5c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000004 	.word	0x20000004
 80014f8:	2000000c 	.word	0x2000000c
 80014fc:	20000008 	.word	0x20000008

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2000000c 	.word	0x2000000c
 8001524:	20000954 	.word	0x20000954

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000954 	.word	0x20000954

08001540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff ffee 	bl	8001528 <HAL_GetTick>
 800154c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d005      	beq.n	8001566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_Delay+0x44>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001566:	bf00      	nop
 8001568:	f7ff ffde 	bl	8001528 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d8f7      	bhi.n	8001568 <HAL_Delay+0x28>
  {
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000000c 	.word	0x2000000c

08001588 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e033      	b.n	8001606 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fd78 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ce:	f023 0302 	bic.w	r3, r3, #2
 80015d2:	f043 0202 	orr.w	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f94a 	bl	8001874 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f023 0303 	bic.w	r3, r3, #3
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
 80015f6:	e001      	b.n	80015fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1c>
 8001628:	2302      	movs	r3, #2
 800162a:	e113      	b.n	8001854 <HAL_ADC_ConfigChannel+0x244>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b09      	cmp	r3, #9
 800163a:	d925      	bls.n	8001688 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68d9      	ldr	r1, [r3, #12]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	3b1e      	subs	r3, #30
 8001652:	2207      	movs	r2, #7
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43da      	mvns	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	400a      	ands	r2, r1
 8001660:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68d9      	ldr	r1, [r3, #12]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	b29b      	uxth	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	4603      	mov	r3, r0
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4403      	add	r3, r0
 800167a:	3b1e      	subs	r3, #30
 800167c:	409a      	lsls	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	e022      	b.n	80016ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	2207      	movs	r2, #7
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	400a      	ands	r2, r1
 80016aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6919      	ldr	r1, [r3, #16]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4403      	add	r3, r0
 80016c4:	409a      	lsls	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d824      	bhi.n	8001720 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b05      	subs	r3, #5
 80016e8:	221f      	movs	r2, #31
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	400a      	ands	r2, r1
 80016f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b05      	subs	r3, #5
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	635a      	str	r2, [r3, #52]	; 0x34
 800171e:	e04c      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d824      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	3b23      	subs	r3, #35	; 0x23
 800173a:	221f      	movs	r2, #31
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43da      	mvns	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	400a      	ands	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b23      	subs	r3, #35	; 0x23
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
 8001770:	e023      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b41      	subs	r3, #65	; 0x41
 8001784:	221f      	movs	r2, #31
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	400a      	ands	r2, r1
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3b41      	subs	r3, #65	; 0x41
 80017ae:	fa00 f203 	lsl.w	r2, r0, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <HAL_ADC_ConfigChannel+0x250>)
 80017bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a28      	ldr	r2, [pc, #160]	; (8001864 <HAL_ADC_ConfigChannel+0x254>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d10f      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x1d8>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b12      	cmp	r3, #18
 80017ce:	d10b      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_ADC_ConfigChannel+0x254>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d12b      	bne.n	800184a <HAL_ADC_ConfigChannel+0x23a>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_ADC_ConfigChannel+0x258>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d003      	beq.n	8001804 <HAL_ADC_ConfigChannel+0x1f4>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b11      	cmp	r3, #17
 8001802:	d122      	bne.n	800184a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_ADC_ConfigChannel+0x258>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d111      	bne.n	800184a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_ADC_ConfigChannel+0x25c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <HAL_ADC_ConfigChannel+0x260>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9a      	lsrs	r2, r3, #18
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800183c:	e002      	b.n	8001844 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40012300 	.word	0x40012300
 8001864:	40012000 	.word	0x40012000
 8001868:	10000012 	.word	0x10000012
 800186c:	20000004 	.word	0x20000004
 8001870:	431bde83 	.word	0x431bde83

08001874 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800187c:	4b79      	ldr	r3, [pc, #484]	; (8001a64 <ADC_Init+0x1f0>)
 800187e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	431a      	orrs	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	021a      	lsls	r2, r3, #8
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6899      	ldr	r1, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <ADC_Init+0x1f4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d022      	beq.n	8001952 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800191a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6899      	ldr	r1, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800193c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6899      	ldr	r1, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	e00f      	b.n	8001972 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001970:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0202 	bic.w	r2, r2, #2
 8001980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6899      	ldr	r1, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7e1b      	ldrb	r3, [r3, #24]
 800198c:	005a      	lsls	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01b      	beq.n	80019d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6859      	ldr	r1, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	3b01      	subs	r3, #1
 80019cc:	035a      	lsls	r2, r3, #13
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	e007      	b.n	80019e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	051a      	lsls	r2, r3, #20
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a2a:	025a      	lsls	r2, r3, #9
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6899      	ldr	r1, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	029a      	lsls	r2, r3, #10
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40012300 	.word	0x40012300
 8001a68:	0f000001 	.word	0x0f000001

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4907      	ldr	r1, [pc, #28]	; (8001b08 <__NVIC_EnableIRQ+0x38>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	; (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	; (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd8:	d301      	bcc.n	8001bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <SysTick_Config+0x40>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be6:	210f      	movs	r1, #15
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f7ff ff8e 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <SysTick_Config+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SysTick_Config+0x40>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff29 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff3e 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff8e 	bl	8001b60 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff5d 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff31 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ffa2 	bl	8001bc8 <SysTick_Config>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff fc44 	bl	8001528 <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d008      	beq.n	8001cc0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e052      	b.n	8001d66 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0216 	bic.w	r2, r2, #22
 8001cce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cde:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d103      	bne.n	8001cf0 <HAL_DMA_Abort+0x62>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0208 	bic.w	r2, r2, #8
 8001cfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d10:	e013      	b.n	8001d3a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d12:	f7ff fc09 	bl	8001528 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d90c      	bls.n	8001d3a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2203      	movs	r2, #3
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e015      	b.n	8001d66 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e4      	bne.n	8001d12 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	223f      	movs	r2, #63	; 0x3f
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d004      	beq.n	8001d8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e00c      	b.n	8001da6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2205      	movs	r2, #5
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e165      	b.n	800209c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 8154 	bne.w	8002096 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d005      	beq.n	8001e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d130      	bne.n	8001e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 0201 	and.w	r2, r3, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d017      	beq.n	8001ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d123      	bne.n	8001ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80ae 	beq.w	8002096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a5c      	ldr	r2, [pc, #368]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b5a      	ldr	r3, [pc, #360]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f56:	4a58      	ldr	r2, [pc, #352]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4f      	ldr	r2, [pc, #316]	; (80020bc <HAL_GPIO_Init+0x308>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d025      	beq.n	8001fce <HAL_GPIO_Init+0x21a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4e      	ldr	r2, [pc, #312]	; (80020c0 <HAL_GPIO_Init+0x30c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01f      	beq.n	8001fca <HAL_GPIO_Init+0x216>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4d      	ldr	r2, [pc, #308]	; (80020c4 <HAL_GPIO_Init+0x310>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d019      	beq.n	8001fc6 <HAL_GPIO_Init+0x212>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <HAL_GPIO_Init+0x314>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_GPIO_Init+0x20e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4b      	ldr	r2, [pc, #300]	; (80020cc <HAL_GPIO_Init+0x318>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00d      	beq.n	8001fbe <HAL_GPIO_Init+0x20a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_GPIO_Init+0x31c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d007      	beq.n	8001fba <HAL_GPIO_Init+0x206>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <HAL_GPIO_Init+0x320>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_GPIO_Init+0x202>
 8001fb2:	2306      	movs	r3, #6
 8001fb4:	e00c      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	e00a      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fba:	2305      	movs	r3, #5
 8001fbc:	e008      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e004      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	f002 0203 	and.w	r2, r2, #3
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	4093      	lsls	r3, r2
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe0:	4935      	ldr	r1, [pc, #212]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fee:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002012:	4a31      	ldr	r2, [pc, #196]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_GPIO_Init+0x324>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800203c:	4a26      	ldr	r2, [pc, #152]	; (80020d8 <HAL_GPIO_Init+0x324>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002066:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_GPIO_Init+0x324>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002090:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3301      	adds	r3, #1
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	2b0f      	cmp	r3, #15
 80020a0:	f67f ae96 	bls.w	8001dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40013800 	.word	0x40013800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020c00 	.word	0x40020c00
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40021400 	.word	0x40021400
 80020d4:	40021800 	.word	0x40021800
 80020d8:	40013c00 	.word	0x40013c00

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0cc      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d90c      	bls.n	800214c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d044      	beq.n	8002230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d119      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e06f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e067      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4934      	ldr	r1, [pc, #208]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002200:	f7ff f992 	bl	8001528 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7ff f98e 	bl	8001528 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e04f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d20c      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f855 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	490a      	ldr	r1, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f8f2 	bl	80014a0 <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00
 80022cc:	40023800 	.word	0x40023800
 80022d0:	08004724 	.word	0x08004724
 80022d4:	20000004 	.word	0x20000004
 80022d8:	20000008 	.word	0x20000008

080022dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022f8:	f7ff fff0 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0a9b      	lsrs	r3, r3, #10
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4903      	ldr	r1, [pc, #12]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40023800 	.word	0x40023800
 8002318:	08004734 	.word	0x08004734

0800231c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002320:	f7ff ffdc 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0b5b      	lsrs	r3, r3, #13
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4903      	ldr	r1, [pc, #12]	; (8002340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	08004734 	.word	0x08004734

08002344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800234c:	2600      	movs	r6, #0
 800234e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002350:	2600      	movs	r6, #0
 8002352:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002354:	2600      	movs	r6, #0
 8002356:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002358:	2600      	movs	r6, #0
 800235a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235c:	2600      	movs	r6, #0
 800235e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002360:	4ea3      	ldr	r6, [pc, #652]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002362:	68b6      	ldr	r6, [r6, #8]
 8002364:	f006 060c 	and.w	r6, r6, #12
 8002368:	2e0c      	cmp	r6, #12
 800236a:	f200 8137 	bhi.w	80025dc <HAL_RCC_GetSysClockFreq+0x298>
 800236e:	f20f 0c08 	addw	ip, pc, #8
 8002372:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002376:	bf00      	nop
 8002378:	080023ad 	.word	0x080023ad
 800237c:	080025dd 	.word	0x080025dd
 8002380:	080025dd 	.word	0x080025dd
 8002384:	080025dd 	.word	0x080025dd
 8002388:	080023b3 	.word	0x080023b3
 800238c:	080025dd 	.word	0x080025dd
 8002390:	080025dd 	.word	0x080025dd
 8002394:	080025dd 	.word	0x080025dd
 8002398:	080023b9 	.word	0x080023b9
 800239c:	080025dd 	.word	0x080025dd
 80023a0:	080025dd 	.word	0x080025dd
 80023a4:	080025dd 	.word	0x080025dd
 80023a8:	080024cf 	.word	0x080024cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b91      	ldr	r3, [pc, #580]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80023ae:	613b      	str	r3, [r7, #16]
       break;
 80023b0:	e117      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b2:	4b91      	ldr	r3, [pc, #580]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80023b4:	613b      	str	r3, [r7, #16]
      break;
 80023b6:	e114      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b8:	4b8d      	ldr	r3, [pc, #564]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c2:	4b8b      	ldr	r3, [pc, #556]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d024      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ce:	4b88      	ldr	r3, [pc, #544]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	461a      	mov	r2, r3
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	f240 14ff 	movw	r4, #511	; 0x1ff
 80023de:	f04f 0500 	mov.w	r5, #0
 80023e2:	ea02 0004 	and.w	r0, r2, r4
 80023e6:	ea03 0105 	and.w	r1, r3, r5
 80023ea:	4b83      	ldr	r3, [pc, #524]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80023ec:	fb03 f201 	mul.w	r2, r3, r1
 80023f0:	2300      	movs	r3, #0
 80023f2:	fb03 f300 	mul.w	r3, r3, r0
 80023f6:	4413      	add	r3, r2
 80023f8:	4a7f      	ldr	r2, [pc, #508]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80023fa:	fba0 0102 	umull	r0, r1, r0, r2
 80023fe:	440b      	add	r3, r1
 8002400:	4619      	mov	r1, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	461a      	mov	r2, r3
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	f7fd ff59 	bl	80002c0 <__aeabi_uldivmod>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4613      	mov	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e04c      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002418:	4b75      	ldr	r3, [pc, #468]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	461a      	mov	r2, r3
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	ea02 0800 	and.w	r8, r2, r0
 8002430:	ea03 0901 	and.w	r9, r3, r1
 8002434:	4640      	mov	r0, r8
 8002436:	4649      	mov	r1, r9
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	014b      	lsls	r3, r1, #5
 8002442:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002446:	0142      	lsls	r2, r0, #5
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	ebb0 0008 	subs.w	r0, r0, r8
 8002450:	eb61 0109 	sbc.w	r1, r1, r9
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	018b      	lsls	r3, r1, #6
 800245e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002462:	0182      	lsls	r2, r0, #6
 8002464:	1a12      	subs	r2, r2, r0
 8002466:	eb63 0301 	sbc.w	r3, r3, r1
 800246a:	f04f 0000 	mov.w	r0, #0
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	00d9      	lsls	r1, r3, #3
 8002474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002478:	00d0      	lsls	r0, r2, #3
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	eb12 0208 	adds.w	r2, r2, r8
 8002482:	eb43 0309 	adc.w	r3, r3, r9
 8002486:	f04f 0000 	mov.w	r0, #0
 800248a:	f04f 0100 	mov.w	r1, #0
 800248e:	0299      	lsls	r1, r3, #10
 8002490:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002494:	0290      	lsls	r0, r2, #10
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	461a      	mov	r2, r3
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	f7fd ff0b 	bl	80002c0 <__aeabi_uldivmod>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4613      	mov	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024b2:	4b4f      	ldr	r3, [pc, #316]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	3301      	adds	r3, #1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	613b      	str	r3, [r7, #16]
      break;
 80024cc:	e089      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ce:	4948      	ldr	r1, [pc, #288]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80024d0:	6849      	ldr	r1, [r1, #4]
 80024d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80024d6:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d8:	4945      	ldr	r1, [pc, #276]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80024da:	6849      	ldr	r1, [r1, #4]
 80024dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80024e0:	2900      	cmp	r1, #0
 80024e2:	d024      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e4:	4942      	ldr	r1, [pc, #264]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80024e6:	6849      	ldr	r1, [r1, #4]
 80024e8:	0989      	lsrs	r1, r1, #6
 80024ea:	4608      	mov	r0, r1
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80024f4:	f04f 0500 	mov.w	r5, #0
 80024f8:	ea00 0204 	and.w	r2, r0, r4
 80024fc:	ea01 0305 	and.w	r3, r1, r5
 8002500:	493d      	ldr	r1, [pc, #244]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002502:	fb01 f003 	mul.w	r0, r1, r3
 8002506:	2100      	movs	r1, #0
 8002508:	fb01 f102 	mul.w	r1, r1, r2
 800250c:	1844      	adds	r4, r0, r1
 800250e:	493a      	ldr	r1, [pc, #232]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002510:	fba2 0101 	umull	r0, r1, r2, r1
 8002514:	1863      	adds	r3, r4, r1
 8002516:	4619      	mov	r1, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	461a      	mov	r2, r3
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	f7fd fece 	bl	80002c0 <__aeabi_uldivmod>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4613      	mov	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e04a      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252e:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	461a      	mov	r2, r3
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	ea02 0400 	and.w	r4, r2, r0
 8002546:	ea03 0501 	and.w	r5, r3, r1
 800254a:	4620      	mov	r0, r4
 800254c:	4629      	mov	r1, r5
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	014b      	lsls	r3, r1, #5
 8002558:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800255c:	0142      	lsls	r2, r0, #5
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	1b00      	subs	r0, r0, r4
 8002564:	eb61 0105 	sbc.w	r1, r1, r5
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	018b      	lsls	r3, r1, #6
 8002572:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002576:	0182      	lsls	r2, r0, #6
 8002578:	1a12      	subs	r2, r2, r0
 800257a:	eb63 0301 	sbc.w	r3, r3, r1
 800257e:	f04f 0000 	mov.w	r0, #0
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	00d9      	lsls	r1, r3, #3
 8002588:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800258c:	00d0      	lsls	r0, r2, #3
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	1912      	adds	r2, r2, r4
 8002594:	eb45 0303 	adc.w	r3, r5, r3
 8002598:	f04f 0000 	mov.w	r0, #0
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	0299      	lsls	r1, r3, #10
 80025a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025a6:	0290      	lsls	r0, r2, #10
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	f7fd fe82 	bl	80002c0 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4613      	mov	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	0f1b      	lsrs	r3, r3, #28
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	613b      	str	r3, [r7, #16]
      break;
 80025da:	e002      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80025de:	613b      	str	r3, [r7, #16]
      break;
 80025e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e2:	693b      	ldr	r3, [r7, #16]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	00f42400 	.word	0x00f42400
 80025f8:	017d7840 	.word	0x017d7840

080025fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e28d      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8083 	beq.w	8002722 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800261c:	4b94      	ldr	r3, [pc, #592]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b04      	cmp	r3, #4
 8002626:	d019      	beq.n	800265c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002628:	4b91      	ldr	r3, [pc, #580]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002630:	2b08      	cmp	r3, #8
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002634:	4b8e      	ldr	r3, [pc, #568]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002640:	d00c      	beq.n	800265c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d112      	bne.n	8002674 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4b84      	ldr	r3, [pc, #528]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05b      	beq.n	8002720 <HAL_RCC_OscConfig+0x124>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d157      	bne.n	8002720 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e25a      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x90>
 800267e:	4b7c      	ldr	r3, [pc, #496]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7b      	ldr	r2, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xcc>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0xb4>
 8002696:	4b76      	ldr	r3, [pc, #472]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a75      	ldr	r2, [pc, #468]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b73      	ldr	r3, [pc, #460]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a72      	ldr	r2, [pc, #456]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xcc>
 80026b0:	4b6f      	ldr	r3, [pc, #444]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a6e      	ldr	r2, [pc, #440]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a6b      	ldr	r2, [pc, #428]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe ff2a 	bl	8001528 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe ff26 	bl	8001528 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e21f      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b61      	ldr	r3, [pc, #388]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xdc>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe ff16 	bl	8001528 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe ff12 	bl	8001528 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e20b      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x104>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d06f      	beq.n	800280e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800272e:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d017      	beq.n	800276a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800273a:	4b4d      	ldr	r3, [pc, #308]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002742:	2b08      	cmp	r3, #8
 8002744:	d105      	bne.n	8002752 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002746:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002752:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d11c      	bne.n	8002798 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275e:	4b44      	ldr	r3, [pc, #272]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	4b41      	ldr	r3, [pc, #260]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x186>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1d3      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4937      	ldr	r1, [pc, #220]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	e03a      	b.n	800280e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a0:	4b34      	ldr	r3, [pc, #208]	; (8002874 <HAL_RCC_OscConfig+0x278>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe febf 	bl	8001528 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ae:	f7fe febb 	bl	8001528 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1b4      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4925      	ldr	r1, [pc, #148]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_OscConfig+0x278>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fe9e 	bl	8001528 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f0:	f7fe fe9a 	bl	8001528 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e193      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d036      	beq.n	8002888 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_RCC_OscConfig+0x27c>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fe7e 	bl	8001528 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002830:	f7fe fe7a 	bl	8001528 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e173      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x234>
 800284e:	e01b      	b.n	8002888 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_OscConfig+0x27c>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7fe fe67 	bl	8001528 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285c:	e00e      	b.n	800287c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285e:	f7fe fe63 	bl	8001528 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d907      	bls.n	800287c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e15c      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
 8002870:	40023800 	.word	0x40023800
 8002874:	42470000 	.word	0x42470000
 8002878:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4b8a      	ldr	r3, [pc, #552]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 800287e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ea      	bne.n	800285e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8097 	beq.w	80029c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b83      	ldr	r3, [pc, #524]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	4a7e      	ldr	r2, [pc, #504]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
 80028b6:	4b7c      	ldr	r3, [pc, #496]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	4b79      	ldr	r3, [pc, #484]	; (8002aac <HAL_RCC_OscConfig+0x4b0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d118      	bne.n	8002904 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d2:	4b76      	ldr	r3, [pc, #472]	; (8002aac <HAL_RCC_OscConfig+0x4b0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a75      	ldr	r2, [pc, #468]	; (8002aac <HAL_RCC_OscConfig+0x4b0>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028de:	f7fe fe23 	bl	8001528 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7fe fe1f 	bl	8001528 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e118      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b6c      	ldr	r3, [pc, #432]	; (8002aac <HAL_RCC_OscConfig+0x4b0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d106      	bne.n	800291a <HAL_RCC_OscConfig+0x31e>
 800290c:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a65      	ldr	r2, [pc, #404]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
 8002918:	e01c      	b.n	8002954 <HAL_RCC_OscConfig+0x358>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b05      	cmp	r3, #5
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0x340>
 8002922:	4b61      	ldr	r3, [pc, #388]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	4a60      	ldr	r2, [pc, #384]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	6713      	str	r3, [r2, #112]	; 0x70
 800292e:	4b5e      	ldr	r3, [pc, #376]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	4a5d      	ldr	r2, [pc, #372]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6713      	str	r3, [r2, #112]	; 0x70
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0x358>
 800293c:	4b5a      	ldr	r3, [pc, #360]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	4a59      	ldr	r2, [pc, #356]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	; 0x70
 8002948:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a56      	ldr	r2, [pc, #344]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 800294e:	f023 0304 	bic.w	r3, r3, #4
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fde4 	bl	8001528 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7fe fde0 	bl	8001528 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e0d7      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0ee      	beq.n	8002964 <HAL_RCC_OscConfig+0x368>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe fdce 	bl	8001528 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fe fdca 	bl	8001528 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e0c1      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a6:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1ee      	bne.n	8002990 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b8:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	4a3a      	ldr	r2, [pc, #232]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 80029be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80ad 	beq.w	8002b28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ce:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d060      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d145      	bne.n	8002a6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <HAL_RCC_OscConfig+0x4b4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fd9e 	bl	8001528 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fd9a 	bl	8001528 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e093      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	019b      	lsls	r3, r3, #6
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	085b      	lsrs	r3, r3, #1
 8002a26:	3b01      	subs	r3, #1
 8002a28:	041b      	lsls	r3, r3, #16
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	071b      	lsls	r3, r3, #28
 8002a3a:	491b      	ldr	r1, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <HAL_RCC_OscConfig+0x4b4>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a46:	f7fe fd6f 	bl	8001528 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4e:	f7fe fd6b 	bl	8001528 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e064      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x452>
 8002a6c:	e05c      	b.n	8002b28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_RCC_OscConfig+0x4b4>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fd58 	bl	8001528 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe fd54 	bl	8001528 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e04d      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_RCC_OscConfig+0x4ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x480>
 8002a9a:	e045      	b.n	8002b28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e040      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <HAL_RCC_OscConfig+0x538>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d030      	beq.n	8002b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d129      	bne.n	8002b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d122      	bne.n	8002b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d119      	bne.n	8002b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	085b      	lsrs	r3, r3, #1
 8002afc:	3b01      	subs	r3, #1
 8002afe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d10f      	bne.n	8002b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800

08002b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e03f      	b.n	8002bca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe fae0 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2224      	movs	r2, #36	; 0x24
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fe1d 	bl	80037bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b08a      	sub	sp, #40	; 0x28
 8002bd6:	af02      	add	r7, sp, #8
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d17c      	bne.n	8002cec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_UART_Transmit+0x2c>
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e075      	b.n	8002cee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_UART_Transmit+0x3e>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e06e      	b.n	8002cee <HAL_UART_Transmit+0x11c>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2221      	movs	r2, #33	; 0x21
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c26:	f7fe fc7f 	bl	8001528 <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c40:	d108      	bne.n	8002c54 <HAL_UART_Transmit+0x82>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e003      	b.n	8002c5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c64:	e02a      	b.n	8002cbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fb9b 	bl	80033ac <UART_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e036      	b.n	8002cee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3302      	adds	r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e007      	b.n	8002cae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	3301      	adds	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1cf      	bne.n	8002c66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2140      	movs	r1, #64	; 0x40
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fb6b 	bl	80033ac <UART_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e006      	b.n	8002cee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b08a      	sub	sp, #40	; 0x28
 8002cfa:	af02      	add	r7, sp, #8
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	f040 808c 	bne.w	8002e30 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_UART_Receive+0x2e>
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e084      	b.n	8002e32 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Receive+0x40>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e07d      	b.n	8002e32 <HAL_UART_Receive+0x13c>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2222      	movs	r2, #34	; 0x22
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d52:	f7fe fbe9 	bl	8001528 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	88fa      	ldrh	r2, [r7, #6]
 8002d5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6c:	d108      	bne.n	8002d80 <HAL_UART_Receive+0x8a>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d104      	bne.n	8002d80 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	e003      	b.n	8002d88 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002d90:	e043      	b.n	8002e1a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2120      	movs	r1, #32
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fb05 	bl	80033ac <UART_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e042      	b.n	8002e32 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	e01f      	b.n	8002e0c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd4:	d007      	beq.n	8002de6 <HAL_UART_Receive+0xf0>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <HAL_UART_Receive+0xfe>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e008      	b.n	8002e06 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1b6      	bne.n	8002d92 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b0ba      	sub	sp, #232	; 0xe8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x66>
 8002e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fbd3 	bl	8003646 <UART_Receive_IT>
      return;
 8002ea0:	e256      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80de 	beq.w	8003068 <HAL_UART_IRQHandler+0x22c>
 8002eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ebc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80d1 	beq.w	8003068 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_UART_IRQHandler+0xae>
 8002ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_UART_IRQHandler+0xd2>
 8002ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0202 	orr.w	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_UART_IRQHandler+0xf6>
 8002f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d011      	beq.n	8002f62 <HAL_UART_IRQHandler+0x126>
 8002f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f043 0208 	orr.w	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 81ed 	beq.w	8003346 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_UART_IRQHandler+0x14e>
 8002f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fb5e 	bl	8003646 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x17a>
 8002fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d04f      	beq.n	8003056 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa66 	bl	8003488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d141      	bne.n	800304e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fd8:	e853 3f00 	ldrex	r3, [r3]
 8002fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3314      	adds	r3, #20
 8002ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800300e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1d9      	bne.n	8002fca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	2b00      	cmp	r3, #0
 800301c:	d013      	beq.n	8003046 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	4a7d      	ldr	r2, [pc, #500]	; (8003218 <HAL_UART_IRQHandler+0x3dc>)
 8003024:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fe9f 	bl	8001d6e <HAL_DMA_Abort_IT>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003040:	4610      	mov	r0, r2
 8003042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	e00e      	b.n	8003064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f99a 	bl	8003380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304c:	e00a      	b.n	8003064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f996 	bl	8003380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	e006      	b.n	8003064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f992 	bl	8003380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003062:	e170      	b.n	8003346 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003064:	bf00      	nop
    return;
 8003066:	e16e      	b.n	8003346 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	2b01      	cmp	r3, #1
 800306e:	f040 814a 	bne.w	8003306 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8143 	beq.w	8003306 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 813c 	beq.w	8003306 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	f040 80b4 	bne.w	800321c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8140 	beq.w	800334a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030d2:	429a      	cmp	r2, r3
 80030d4:	f080 8139 	bcs.w	800334a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ea:	f000 8088 	beq.w	80031fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800310c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800311a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800311e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003126:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1d9      	bne.n	80030ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3314      	adds	r3, #20
 8003140:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800314a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800315e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003162:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003166:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e1      	bne.n	800313a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3314      	adds	r3, #20
 800317c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3314      	adds	r3, #20
 8003196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800319a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800319c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e3      	bne.n	8003176 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ce:	f023 0310 	bic.w	r3, r3, #16
 80031d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80031e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e3      	bne.n	80031bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe fd48 	bl	8001c8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003206:	b29b      	uxth	r3, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	b29b      	uxth	r3, r3
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8c0 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003214:	e099      	b.n	800334a <HAL_UART_IRQHandler+0x50e>
 8003216:	bf00      	nop
 8003218:	0800354f 	.word	0x0800354f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003224:	b29b      	uxth	r3, r3
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 808b 	beq.w	800334e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8086 	beq.w	800334e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003266:	647a      	str	r2, [r7, #68]	; 0x44
 8003268:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800326c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e3      	bne.n	8003242 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3314      	adds	r3, #20
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	623b      	str	r3, [r7, #32]
   return(result);
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800329e:	633a      	str	r2, [r7, #48]	; 0x30
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e3      	bne.n	800327a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0310 	bic.w	r3, r3, #16
 80032d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032e4:	61fa      	str	r2, [r7, #28]
 80032e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	69b9      	ldr	r1, [r7, #24]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	617b      	str	r3, [r7, #20]
   return(result);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e3      	bne.n	80032c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f848 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003304:	e023      	b.n	800334e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <HAL_UART_IRQHandler+0x4ea>
 8003312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f929 	bl	8003576 <UART_Transmit_IT>
    return;
 8003324:	e014      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00e      	beq.n	8003350 <HAL_UART_IRQHandler+0x514>
 8003332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f969 	bl	8003616 <UART_EndTransmit_IT>
    return;
 8003344:	e004      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
    return;
 8003346:	bf00      	nop
 8003348:	e002      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
      return;
 800334a:	bf00      	nop
 800334c:	e000      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
      return;
 800334e:	bf00      	nop
  }
}
 8003350:	37e8      	adds	r7, #232	; 0xe8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop

08003358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b090      	sub	sp, #64	; 0x40
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033bc:	e050      	b.n	8003460 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d04c      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <UART_WaitOnFlagUntilTimeout+0x30>
 80033cc:	f7fe f8ac 	bl	8001528 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033d8:	429a      	cmp	r2, r3
 80033da:	d241      	bcs.n	8003460 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033fc:	637a      	str	r2, [r7, #52]	; 0x34
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e5      	bne.n	80033dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3314      	adds	r3, #20
 8003416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	613b      	str	r3, [r7, #16]
   return(result);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3314      	adds	r3, #20
 800342e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003430:	623a      	str	r2, [r7, #32]
 8003432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	69f9      	ldr	r1, [r7, #28]
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	61bb      	str	r3, [r7, #24]
   return(result);
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e5      	bne.n	8003410 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e00f      	b.n	8003480 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	429a      	cmp	r2, r3
 800347c:	d09f      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3740      	adds	r7, #64	; 0x40
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b095      	sub	sp, #84	; 0x54
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034b0:	643a      	str	r2, [r7, #64]	; 0x40
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e5      	bne.n	8003490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3314      	adds	r3, #20
 80034ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	64bb      	str	r3, [r7, #72]	; 0x48
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3314      	adds	r3, #20
 80034e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e5      	bne.n	80034c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d119      	bne.n	8003534 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f023 0310 	bic.w	r3, r3, #16
 8003516:	647b      	str	r3, [r7, #68]	; 0x44
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003520:	61ba      	str	r2, [r7, #24]
 8003522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6979      	ldr	r1, [r7, #20]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	613b      	str	r3, [r7, #16]
   return(result);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003542:	bf00      	nop
 8003544:	3754      	adds	r7, #84	; 0x54
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff ff09 	bl	8003380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b21      	cmp	r3, #33	; 0x21
 8003588:	d13e      	bne.n	8003608 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	d114      	bne.n	80035be <UART_Transmit_IT+0x48>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d110      	bne.n	80035be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	1c9a      	adds	r2, r3, #2
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	621a      	str	r2, [r3, #32]
 80035bc:	e008      	b.n	80035d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	1c59      	adds	r1, r3, #1
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6211      	str	r1, [r2, #32]
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29b      	uxth	r3, r3
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4619      	mov	r1, r3
 80035de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10f      	bne.n	8003604 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003602:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800362c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fe8e 	bl	8003358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b08c      	sub	sp, #48	; 0x30
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b22      	cmp	r3, #34	; 0x22
 8003658:	f040 80ab 	bne.w	80037b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003664:	d117      	bne.n	8003696 <UART_Receive_IT+0x50>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d113      	bne.n	8003696 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	b29b      	uxth	r3, r3
 8003680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003684:	b29a      	uxth	r2, r3
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	1c9a      	adds	r2, r3, #2
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28
 8003694:	e026      	b.n	80036e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a8:	d007      	beq.n	80036ba <UART_Receive_IT+0x74>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <UART_Receive_IT+0x82>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e008      	b.n	80036da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4619      	mov	r1, r3
 80036f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d15a      	bne.n	80037ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0220 	bic.w	r2, r2, #32
 8003706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	2b01      	cmp	r3, #1
 8003736:	d135      	bne.n	80037a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	613b      	str	r3, [r7, #16]
   return(result);
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f023 0310 	bic.w	r3, r3, #16
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375e:	623a      	str	r2, [r7, #32]
 8003760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	69f9      	ldr	r1, [r7, #28]
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	61bb      	str	r3, [r7, #24]
   return(result);
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e5      	bne.n	800373e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b10      	cmp	r3, #16
 800377e:	d10a      	bne.n	8003796 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fdf9 	bl	8003394 <HAL_UARTEx_RxEventCallback>
 80037a2:	e002      	b.n	80037aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fde1 	bl	800336c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e002      	b.n	80037b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e000      	b.n	80037b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3730      	adds	r7, #48	; 0x30
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c0:	b09f      	sub	sp, #124	; 0x7c
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d2:	68d9      	ldr	r1, [r3, #12]
 80037d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	ea40 0301 	orr.w	r3, r0, r1
 80037dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80037f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003800:	f021 010c 	bic.w	r1, r1, #12
 8003804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800380a:	430b      	orrs	r3, r1
 800380c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800380e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381a:	6999      	ldr	r1, [r3, #24]
 800381c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	ea40 0301 	orr.w	r3, r0, r1
 8003824:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4bc5      	ldr	r3, [pc, #788]	; (8003b40 <UART_SetConfig+0x384>)
 800382c:	429a      	cmp	r2, r3
 800382e:	d004      	beq.n	800383a <UART_SetConfig+0x7e>
 8003830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4bc3      	ldr	r3, [pc, #780]	; (8003b44 <UART_SetConfig+0x388>)
 8003836:	429a      	cmp	r2, r3
 8003838:	d103      	bne.n	8003842 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800383a:	f7fe fd6f 	bl	800231c <HAL_RCC_GetPCLK2Freq>
 800383e:	6778      	str	r0, [r7, #116]	; 0x74
 8003840:	e002      	b.n	8003848 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003842:	f7fe fd57 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8003846:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003850:	f040 80b6 	bne.w	80039c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003856:	461c      	mov	r4, r3
 8003858:	f04f 0500 	mov.w	r5, #0
 800385c:	4622      	mov	r2, r4
 800385e:	462b      	mov	r3, r5
 8003860:	1891      	adds	r1, r2, r2
 8003862:	6439      	str	r1, [r7, #64]	; 0x40
 8003864:	415b      	adcs	r3, r3
 8003866:	647b      	str	r3, [r7, #68]	; 0x44
 8003868:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800386c:	1912      	adds	r2, r2, r4
 800386e:	eb45 0303 	adc.w	r3, r5, r3
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	00d9      	lsls	r1, r3, #3
 800387c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003880:	00d0      	lsls	r0, r2, #3
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	1911      	adds	r1, r2, r4
 8003888:	6639      	str	r1, [r7, #96]	; 0x60
 800388a:	416b      	adcs	r3, r5
 800388c:	667b      	str	r3, [r7, #100]	; 0x64
 800388e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	461a      	mov	r2, r3
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	1891      	adds	r1, r2, r2
 800389a:	63b9      	str	r1, [r7, #56]	; 0x38
 800389c:	415b      	adcs	r3, r3
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038a8:	f7fc fd0a 	bl	80002c0 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4ba5      	ldr	r3, [pc, #660]	; (8003b48 <UART_SetConfig+0x38c>)
 80038b2:	fba3 2302 	umull	r2, r3, r3, r2
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	011e      	lsls	r6, r3, #4
 80038ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038bc:	461c      	mov	r4, r3
 80038be:	f04f 0500 	mov.w	r5, #0
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	1891      	adds	r1, r2, r2
 80038c8:	6339      	str	r1, [r7, #48]	; 0x30
 80038ca:	415b      	adcs	r3, r3
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
 80038ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038d2:	1912      	adds	r2, r2, r4
 80038d4:	eb45 0303 	adc.w	r3, r5, r3
 80038d8:	f04f 0000 	mov.w	r0, #0
 80038dc:	f04f 0100 	mov.w	r1, #0
 80038e0:	00d9      	lsls	r1, r3, #3
 80038e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038e6:	00d0      	lsls	r0, r2, #3
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	1911      	adds	r1, r2, r4
 80038ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80038f0:	416b      	adcs	r3, r5
 80038f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	461a      	mov	r2, r3
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	1891      	adds	r1, r2, r2
 8003900:	62b9      	str	r1, [r7, #40]	; 0x28
 8003902:	415b      	adcs	r3, r3
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800390a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800390e:	f7fc fcd7 	bl	80002c0 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4b8c      	ldr	r3, [pc, #560]	; (8003b48 <UART_SetConfig+0x38c>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	3332      	adds	r3, #50	; 0x32
 800392a:	4a87      	ldr	r2, [pc, #540]	; (8003b48 <UART_SetConfig+0x38c>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003938:	441e      	add	r6, r3
 800393a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393c:	4618      	mov	r0, r3
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	1894      	adds	r4, r2, r2
 8003948:	623c      	str	r4, [r7, #32]
 800394a:	415b      	adcs	r3, r3
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
 800394e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003952:	1812      	adds	r2, r2, r0
 8003954:	eb41 0303 	adc.w	r3, r1, r3
 8003958:	f04f 0400 	mov.w	r4, #0
 800395c:	f04f 0500 	mov.w	r5, #0
 8003960:	00dd      	lsls	r5, r3, #3
 8003962:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003966:	00d4      	lsls	r4, r2, #3
 8003968:	4622      	mov	r2, r4
 800396a:	462b      	mov	r3, r5
 800396c:	1814      	adds	r4, r2, r0
 800396e:	653c      	str	r4, [r7, #80]	; 0x50
 8003970:	414b      	adcs	r3, r1
 8003972:	657b      	str	r3, [r7, #84]	; 0x54
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	461a      	mov	r2, r3
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	1891      	adds	r1, r2, r2
 8003980:	61b9      	str	r1, [r7, #24]
 8003982:	415b      	adcs	r3, r3
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800398a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800398e:	f7fc fc97 	bl	80002c0 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4b6c      	ldr	r3, [pc, #432]	; (8003b48 <UART_SetConfig+0x38c>)
 8003998:	fba3 1302 	umull	r1, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	2164      	movs	r1, #100	; 0x64
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	3332      	adds	r3, #50	; 0x32
 80039aa:	4a67      	ldr	r2, [pc, #412]	; (8003b48 <UART_SetConfig+0x38c>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	f003 0207 	and.w	r2, r3, #7
 80039b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4432      	add	r2, r6
 80039bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039be:	e0b9      	b.n	8003b34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c2:	461c      	mov	r4, r3
 80039c4:	f04f 0500 	mov.w	r5, #0
 80039c8:	4622      	mov	r2, r4
 80039ca:	462b      	mov	r3, r5
 80039cc:	1891      	adds	r1, r2, r2
 80039ce:	6139      	str	r1, [r7, #16]
 80039d0:	415b      	adcs	r3, r3
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039d8:	1912      	adds	r2, r2, r4
 80039da:	eb45 0303 	adc.w	r3, r5, r3
 80039de:	f04f 0000 	mov.w	r0, #0
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	00d9      	lsls	r1, r3, #3
 80039e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039ec:	00d0      	lsls	r0, r2, #3
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	eb12 0804 	adds.w	r8, r2, r4
 80039f6:	eb43 0905 	adc.w	r9, r3, r5
 80039fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	008b      	lsls	r3, r1, #2
 8003a0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a12:	0082      	lsls	r2, r0, #2
 8003a14:	4640      	mov	r0, r8
 8003a16:	4649      	mov	r1, r9
 8003a18:	f7fc fc52 	bl	80002c0 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4b49      	ldr	r3, [pc, #292]	; (8003b48 <UART_SetConfig+0x38c>)
 8003a22:	fba3 2302 	umull	r2, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	011e      	lsls	r6, r3, #4
 8003a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	1894      	adds	r4, r2, r2
 8003a38:	60bc      	str	r4, [r7, #8]
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a42:	1812      	adds	r2, r2, r0
 8003a44:	eb41 0303 	adc.w	r3, r1, r3
 8003a48:	f04f 0400 	mov.w	r4, #0
 8003a4c:	f04f 0500 	mov.w	r5, #0
 8003a50:	00dd      	lsls	r5, r3, #3
 8003a52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a56:	00d4      	lsls	r4, r2, #3
 8003a58:	4622      	mov	r2, r4
 8003a5a:	462b      	mov	r3, r5
 8003a5c:	1814      	adds	r4, r2, r0
 8003a5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a60:	414b      	adcs	r3, r1
 8003a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f04f 0100 	mov.w	r1, #0
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	008b      	lsls	r3, r1, #2
 8003a78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a7c:	0082      	lsls	r2, r0, #2
 8003a7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a82:	f7fc fc1d 	bl	80002c0 <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <UART_SetConfig+0x38c>)
 8003a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	2164      	movs	r1, #100	; 0x64
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	3332      	adds	r3, #50	; 0x32
 8003a9e:	4a2a      	ldr	r2, [pc, #168]	; (8003b48 <UART_SetConfig+0x38c>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aaa:	441e      	add	r6, r3
 8003aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	1894      	adds	r4, r2, r2
 8003aba:	603c      	str	r4, [r7, #0]
 8003abc:	415b      	adcs	r3, r3
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac4:	1812      	adds	r2, r2, r0
 8003ac6:	eb41 0303 	adc.w	r3, r1, r3
 8003aca:	f04f 0400 	mov.w	r4, #0
 8003ace:	f04f 0500 	mov.w	r5, #0
 8003ad2:	00dd      	lsls	r5, r3, #3
 8003ad4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ad8:	00d4      	lsls	r4, r2, #3
 8003ada:	4622      	mov	r2, r4
 8003adc:	462b      	mov	r3, r5
 8003ade:	eb12 0a00 	adds.w	sl, r2, r0
 8003ae2:	eb43 0b01 	adc.w	fp, r3, r1
 8003ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	008b      	lsls	r3, r1, #2
 8003afa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003afe:	0082      	lsls	r2, r0, #2
 8003b00:	4650      	mov	r0, sl
 8003b02:	4659      	mov	r1, fp
 8003b04:	f7fc fbdc 	bl	80002c0 <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <UART_SetConfig+0x38c>)
 8003b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2164      	movs	r1, #100	; 0x64
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	3332      	adds	r3, #50	; 0x32
 8003b20:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <UART_SetConfig+0x38c>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	f003 020f 	and.w	r2, r3, #15
 8003b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4432      	add	r2, r6
 8003b32:	609a      	str	r2, [r3, #8]
}
 8003b34:	bf00      	nop
 8003b36:	377c      	adds	r7, #124	; 0x7c
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3e:	bf00      	nop
 8003b40:	40011000 	.word	0x40011000
 8003b44:	40011400 	.word	0x40011400
 8003b48:	51eb851f 	.word	0x51eb851f

08003b4c <__errno>:
 8003b4c:	4b01      	ldr	r3, [pc, #4]	; (8003b54 <__errno+0x8>)
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000010 	.word	0x20000010

08003b58 <__libc_init_array>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	4d0d      	ldr	r5, [pc, #52]	; (8003b90 <__libc_init_array+0x38>)
 8003b5c:	4c0d      	ldr	r4, [pc, #52]	; (8003b94 <__libc_init_array+0x3c>)
 8003b5e:	1b64      	subs	r4, r4, r5
 8003b60:	10a4      	asrs	r4, r4, #2
 8003b62:	2600      	movs	r6, #0
 8003b64:	42a6      	cmp	r6, r4
 8003b66:	d109      	bne.n	8003b7c <__libc_init_array+0x24>
 8003b68:	4d0b      	ldr	r5, [pc, #44]	; (8003b98 <__libc_init_array+0x40>)
 8003b6a:	4c0c      	ldr	r4, [pc, #48]	; (8003b9c <__libc_init_array+0x44>)
 8003b6c:	f000 fc4e 	bl	800440c <_init>
 8003b70:	1b64      	subs	r4, r4, r5
 8003b72:	10a4      	asrs	r4, r4, #2
 8003b74:	2600      	movs	r6, #0
 8003b76:	42a6      	cmp	r6, r4
 8003b78:	d105      	bne.n	8003b86 <__libc_init_array+0x2e>
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b80:	4798      	blx	r3
 8003b82:	3601      	adds	r6, #1
 8003b84:	e7ee      	b.n	8003b64 <__libc_init_array+0xc>
 8003b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8a:	4798      	blx	r3
 8003b8c:	3601      	adds	r6, #1
 8003b8e:	e7f2      	b.n	8003b76 <__libc_init_array+0x1e>
 8003b90:	080047d8 	.word	0x080047d8
 8003b94:	080047d8 	.word	0x080047d8
 8003b98:	080047d8 	.word	0x080047d8
 8003b9c:	080047dc 	.word	0x080047dc

08003ba0 <memset>:
 8003ba0:	4402      	add	r2, r0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d100      	bne.n	8003baa <memset+0xa>
 8003ba8:	4770      	bx	lr
 8003baa:	f803 1b01 	strb.w	r1, [r3], #1
 8003bae:	e7f9      	b.n	8003ba4 <memset+0x4>

08003bb0 <siprintf>:
 8003bb0:	b40e      	push	{r1, r2, r3}
 8003bb2:	b500      	push	{lr}
 8003bb4:	b09c      	sub	sp, #112	; 0x70
 8003bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bb8:	9002      	str	r0, [sp, #8]
 8003bba:	9006      	str	r0, [sp, #24]
 8003bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bc0:	4809      	ldr	r0, [pc, #36]	; (8003be8 <siprintf+0x38>)
 8003bc2:	9107      	str	r1, [sp, #28]
 8003bc4:	9104      	str	r1, [sp, #16]
 8003bc6:	4909      	ldr	r1, [pc, #36]	; (8003bec <siprintf+0x3c>)
 8003bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bcc:	9105      	str	r1, [sp, #20]
 8003bce:	6800      	ldr	r0, [r0, #0]
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	a902      	add	r1, sp, #8
 8003bd4:	f000 f912 	bl	8003dfc <_svfiprintf_r>
 8003bd8:	9b02      	ldr	r3, [sp, #8]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	b01c      	add	sp, #112	; 0x70
 8003be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003be4:	b003      	add	sp, #12
 8003be6:	4770      	bx	lr
 8003be8:	20000010 	.word	0x20000010
 8003bec:	ffff0208 	.word	0xffff0208

08003bf0 <_free_r>:
 8003bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bf2:	2900      	cmp	r1, #0
 8003bf4:	d048      	beq.n	8003c88 <_free_r+0x98>
 8003bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bfa:	9001      	str	r0, [sp, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8003c02:	bfb8      	it	lt
 8003c04:	18e4      	addlt	r4, r4, r3
 8003c06:	f000 fbc7 	bl	8004398 <__malloc_lock>
 8003c0a:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <_free_r+0x9c>)
 8003c0c:	9801      	ldr	r0, [sp, #4]
 8003c0e:	6813      	ldr	r3, [r2, #0]
 8003c10:	4615      	mov	r5, r2
 8003c12:	b933      	cbnz	r3, 8003c22 <_free_r+0x32>
 8003c14:	6063      	str	r3, [r4, #4]
 8003c16:	6014      	str	r4, [r2, #0]
 8003c18:	b003      	add	sp, #12
 8003c1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c1e:	f000 bbc1 	b.w	80043a4 <__malloc_unlock>
 8003c22:	42a3      	cmp	r3, r4
 8003c24:	d90b      	bls.n	8003c3e <_free_r+0x4e>
 8003c26:	6821      	ldr	r1, [r4, #0]
 8003c28:	1862      	adds	r2, r4, r1
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	bf04      	itt	eq
 8003c2e:	681a      	ldreq	r2, [r3, #0]
 8003c30:	685b      	ldreq	r3, [r3, #4]
 8003c32:	6063      	str	r3, [r4, #4]
 8003c34:	bf04      	itt	eq
 8003c36:	1852      	addeq	r2, r2, r1
 8003c38:	6022      	streq	r2, [r4, #0]
 8003c3a:	602c      	str	r4, [r5, #0]
 8003c3c:	e7ec      	b.n	8003c18 <_free_r+0x28>
 8003c3e:	461a      	mov	r2, r3
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b10b      	cbz	r3, 8003c48 <_free_r+0x58>
 8003c44:	42a3      	cmp	r3, r4
 8003c46:	d9fa      	bls.n	8003c3e <_free_r+0x4e>
 8003c48:	6811      	ldr	r1, [r2, #0]
 8003c4a:	1855      	adds	r5, r2, r1
 8003c4c:	42a5      	cmp	r5, r4
 8003c4e:	d10b      	bne.n	8003c68 <_free_r+0x78>
 8003c50:	6824      	ldr	r4, [r4, #0]
 8003c52:	4421      	add	r1, r4
 8003c54:	1854      	adds	r4, r2, r1
 8003c56:	42a3      	cmp	r3, r4
 8003c58:	6011      	str	r1, [r2, #0]
 8003c5a:	d1dd      	bne.n	8003c18 <_free_r+0x28>
 8003c5c:	681c      	ldr	r4, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	6053      	str	r3, [r2, #4]
 8003c62:	4421      	add	r1, r4
 8003c64:	6011      	str	r1, [r2, #0]
 8003c66:	e7d7      	b.n	8003c18 <_free_r+0x28>
 8003c68:	d902      	bls.n	8003c70 <_free_r+0x80>
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	6003      	str	r3, [r0, #0]
 8003c6e:	e7d3      	b.n	8003c18 <_free_r+0x28>
 8003c70:	6825      	ldr	r5, [r4, #0]
 8003c72:	1961      	adds	r1, r4, r5
 8003c74:	428b      	cmp	r3, r1
 8003c76:	bf04      	itt	eq
 8003c78:	6819      	ldreq	r1, [r3, #0]
 8003c7a:	685b      	ldreq	r3, [r3, #4]
 8003c7c:	6063      	str	r3, [r4, #4]
 8003c7e:	bf04      	itt	eq
 8003c80:	1949      	addeq	r1, r1, r5
 8003c82:	6021      	streq	r1, [r4, #0]
 8003c84:	6054      	str	r4, [r2, #4]
 8003c86:	e7c7      	b.n	8003c18 <_free_r+0x28>
 8003c88:	b003      	add	sp, #12
 8003c8a:	bd30      	pop	{r4, r5, pc}
 8003c8c:	200000a4 	.word	0x200000a4

08003c90 <_malloc_r>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	1ccd      	adds	r5, r1, #3
 8003c94:	f025 0503 	bic.w	r5, r5, #3
 8003c98:	3508      	adds	r5, #8
 8003c9a:	2d0c      	cmp	r5, #12
 8003c9c:	bf38      	it	cc
 8003c9e:	250c      	movcc	r5, #12
 8003ca0:	2d00      	cmp	r5, #0
 8003ca2:	4606      	mov	r6, r0
 8003ca4:	db01      	blt.n	8003caa <_malloc_r+0x1a>
 8003ca6:	42a9      	cmp	r1, r5
 8003ca8:	d903      	bls.n	8003cb2 <_malloc_r+0x22>
 8003caa:	230c      	movs	r3, #12
 8003cac:	6033      	str	r3, [r6, #0]
 8003cae:	2000      	movs	r0, #0
 8003cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb2:	f000 fb71 	bl	8004398 <__malloc_lock>
 8003cb6:	4921      	ldr	r1, [pc, #132]	; (8003d3c <_malloc_r+0xac>)
 8003cb8:	680a      	ldr	r2, [r1, #0]
 8003cba:	4614      	mov	r4, r2
 8003cbc:	b99c      	cbnz	r4, 8003ce6 <_malloc_r+0x56>
 8003cbe:	4f20      	ldr	r7, [pc, #128]	; (8003d40 <_malloc_r+0xb0>)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	b923      	cbnz	r3, 8003cce <_malloc_r+0x3e>
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f000 fb2c 	bl	8004324 <_sbrk_r>
 8003ccc:	6038      	str	r0, [r7, #0]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f000 fb27 	bl	8004324 <_sbrk_r>
 8003cd6:	1c43      	adds	r3, r0, #1
 8003cd8:	d123      	bne.n	8003d22 <_malloc_r+0x92>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	6033      	str	r3, [r6, #0]
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f000 fb60 	bl	80043a4 <__malloc_unlock>
 8003ce4:	e7e3      	b.n	8003cae <_malloc_r+0x1e>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	1b5b      	subs	r3, r3, r5
 8003cea:	d417      	bmi.n	8003d1c <_malloc_r+0x8c>
 8003cec:	2b0b      	cmp	r3, #11
 8003cee:	d903      	bls.n	8003cf8 <_malloc_r+0x68>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	441c      	add	r4, r3
 8003cf4:	6025      	str	r5, [r4, #0]
 8003cf6:	e004      	b.n	8003d02 <_malloc_r+0x72>
 8003cf8:	6863      	ldr	r3, [r4, #4]
 8003cfa:	42a2      	cmp	r2, r4
 8003cfc:	bf0c      	ite	eq
 8003cfe:	600b      	streq	r3, [r1, #0]
 8003d00:	6053      	strne	r3, [r2, #4]
 8003d02:	4630      	mov	r0, r6
 8003d04:	f000 fb4e 	bl	80043a4 <__malloc_unlock>
 8003d08:	f104 000b 	add.w	r0, r4, #11
 8003d0c:	1d23      	adds	r3, r4, #4
 8003d0e:	f020 0007 	bic.w	r0, r0, #7
 8003d12:	1ac2      	subs	r2, r0, r3
 8003d14:	d0cc      	beq.n	8003cb0 <_malloc_r+0x20>
 8003d16:	1a1b      	subs	r3, r3, r0
 8003d18:	50a3      	str	r3, [r4, r2]
 8003d1a:	e7c9      	b.n	8003cb0 <_malloc_r+0x20>
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	6864      	ldr	r4, [r4, #4]
 8003d20:	e7cc      	b.n	8003cbc <_malloc_r+0x2c>
 8003d22:	1cc4      	adds	r4, r0, #3
 8003d24:	f024 0403 	bic.w	r4, r4, #3
 8003d28:	42a0      	cmp	r0, r4
 8003d2a:	d0e3      	beq.n	8003cf4 <_malloc_r+0x64>
 8003d2c:	1a21      	subs	r1, r4, r0
 8003d2e:	4630      	mov	r0, r6
 8003d30:	f000 faf8 	bl	8004324 <_sbrk_r>
 8003d34:	3001      	adds	r0, #1
 8003d36:	d1dd      	bne.n	8003cf4 <_malloc_r+0x64>
 8003d38:	e7cf      	b.n	8003cda <_malloc_r+0x4a>
 8003d3a:	bf00      	nop
 8003d3c:	200000a4 	.word	0x200000a4
 8003d40:	200000a8 	.word	0x200000a8

08003d44 <__ssputs_r>:
 8003d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	688e      	ldr	r6, [r1, #8]
 8003d4a:	429e      	cmp	r6, r3
 8003d4c:	4682      	mov	sl, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4690      	mov	r8, r2
 8003d52:	461f      	mov	r7, r3
 8003d54:	d838      	bhi.n	8003dc8 <__ssputs_r+0x84>
 8003d56:	898a      	ldrh	r2, [r1, #12]
 8003d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d5c:	d032      	beq.n	8003dc4 <__ssputs_r+0x80>
 8003d5e:	6825      	ldr	r5, [r4, #0]
 8003d60:	6909      	ldr	r1, [r1, #16]
 8003d62:	eba5 0901 	sub.w	r9, r5, r1
 8003d66:	6965      	ldr	r5, [r4, #20]
 8003d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d70:	3301      	adds	r3, #1
 8003d72:	444b      	add	r3, r9
 8003d74:	106d      	asrs	r5, r5, #1
 8003d76:	429d      	cmp	r5, r3
 8003d78:	bf38      	it	cc
 8003d7a:	461d      	movcc	r5, r3
 8003d7c:	0553      	lsls	r3, r2, #21
 8003d7e:	d531      	bpl.n	8003de4 <__ssputs_r+0xa0>
 8003d80:	4629      	mov	r1, r5
 8003d82:	f7ff ff85 	bl	8003c90 <_malloc_r>
 8003d86:	4606      	mov	r6, r0
 8003d88:	b950      	cbnz	r0, 8003da0 <__ssputs_r+0x5c>
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	f8ca 3000 	str.w	r3, [sl]
 8003d90:	89a3      	ldrh	r3, [r4, #12]
 8003d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d96:	81a3      	strh	r3, [r4, #12]
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da0:	6921      	ldr	r1, [r4, #16]
 8003da2:	464a      	mov	r2, r9
 8003da4:	f000 fad0 	bl	8004348 <memcpy>
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db2:	81a3      	strh	r3, [r4, #12]
 8003db4:	6126      	str	r6, [r4, #16]
 8003db6:	6165      	str	r5, [r4, #20]
 8003db8:	444e      	add	r6, r9
 8003dba:	eba5 0509 	sub.w	r5, r5, r9
 8003dbe:	6026      	str	r6, [r4, #0]
 8003dc0:	60a5      	str	r5, [r4, #8]
 8003dc2:	463e      	mov	r6, r7
 8003dc4:	42be      	cmp	r6, r7
 8003dc6:	d900      	bls.n	8003dca <__ssputs_r+0x86>
 8003dc8:	463e      	mov	r6, r7
 8003dca:	4632      	mov	r2, r6
 8003dcc:	6820      	ldr	r0, [r4, #0]
 8003dce:	4641      	mov	r1, r8
 8003dd0:	f000 fac8 	bl	8004364 <memmove>
 8003dd4:	68a3      	ldr	r3, [r4, #8]
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	1b9b      	subs	r3, r3, r6
 8003dda:	4432      	add	r2, r6
 8003ddc:	60a3      	str	r3, [r4, #8]
 8003dde:	6022      	str	r2, [r4, #0]
 8003de0:	2000      	movs	r0, #0
 8003de2:	e7db      	b.n	8003d9c <__ssputs_r+0x58>
 8003de4:	462a      	mov	r2, r5
 8003de6:	f000 fae3 	bl	80043b0 <_realloc_r>
 8003dea:	4606      	mov	r6, r0
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d1e1      	bne.n	8003db4 <__ssputs_r+0x70>
 8003df0:	6921      	ldr	r1, [r4, #16]
 8003df2:	4650      	mov	r0, sl
 8003df4:	f7ff fefc 	bl	8003bf0 <_free_r>
 8003df8:	e7c7      	b.n	8003d8a <__ssputs_r+0x46>
	...

08003dfc <_svfiprintf_r>:
 8003dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e00:	4698      	mov	r8, r3
 8003e02:	898b      	ldrh	r3, [r1, #12]
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	b09d      	sub	sp, #116	; 0x74
 8003e08:	4607      	mov	r7, r0
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	d50e      	bpl.n	8003e2e <_svfiprintf_r+0x32>
 8003e10:	690b      	ldr	r3, [r1, #16]
 8003e12:	b963      	cbnz	r3, 8003e2e <_svfiprintf_r+0x32>
 8003e14:	2140      	movs	r1, #64	; 0x40
 8003e16:	f7ff ff3b 	bl	8003c90 <_malloc_r>
 8003e1a:	6028      	str	r0, [r5, #0]
 8003e1c:	6128      	str	r0, [r5, #16]
 8003e1e:	b920      	cbnz	r0, 8003e2a <_svfiprintf_r+0x2e>
 8003e20:	230c      	movs	r3, #12
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	e0d1      	b.n	8003fce <_svfiprintf_r+0x1d2>
 8003e2a:	2340      	movs	r3, #64	; 0x40
 8003e2c:	616b      	str	r3, [r5, #20]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9309      	str	r3, [sp, #36]	; 0x24
 8003e32:	2320      	movs	r3, #32
 8003e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e3c:	2330      	movs	r3, #48	; 0x30
 8003e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003fe8 <_svfiprintf_r+0x1ec>
 8003e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e46:	f04f 0901 	mov.w	r9, #1
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	469a      	mov	sl, r3
 8003e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e52:	b10a      	cbz	r2, 8003e58 <_svfiprintf_r+0x5c>
 8003e54:	2a25      	cmp	r2, #37	; 0x25
 8003e56:	d1f9      	bne.n	8003e4c <_svfiprintf_r+0x50>
 8003e58:	ebba 0b04 	subs.w	fp, sl, r4
 8003e5c:	d00b      	beq.n	8003e76 <_svfiprintf_r+0x7a>
 8003e5e:	465b      	mov	r3, fp
 8003e60:	4622      	mov	r2, r4
 8003e62:	4629      	mov	r1, r5
 8003e64:	4638      	mov	r0, r7
 8003e66:	f7ff ff6d 	bl	8003d44 <__ssputs_r>
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	f000 80aa 	beq.w	8003fc4 <_svfiprintf_r+0x1c8>
 8003e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e72:	445a      	add	r2, fp
 8003e74:	9209      	str	r2, [sp, #36]	; 0x24
 8003e76:	f89a 3000 	ldrb.w	r3, [sl]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80a2 	beq.w	8003fc4 <_svfiprintf_r+0x1c8>
 8003e80:	2300      	movs	r3, #0
 8003e82:	f04f 32ff 	mov.w	r2, #4294967295
 8003e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e8a:	f10a 0a01 	add.w	sl, sl, #1
 8003e8e:	9304      	str	r3, [sp, #16]
 8003e90:	9307      	str	r3, [sp, #28]
 8003e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e96:	931a      	str	r3, [sp, #104]	; 0x68
 8003e98:	4654      	mov	r4, sl
 8003e9a:	2205      	movs	r2, #5
 8003e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea0:	4851      	ldr	r0, [pc, #324]	; (8003fe8 <_svfiprintf_r+0x1ec>)
 8003ea2:	f7fc f9bd 	bl	8000220 <memchr>
 8003ea6:	9a04      	ldr	r2, [sp, #16]
 8003ea8:	b9d8      	cbnz	r0, 8003ee2 <_svfiprintf_r+0xe6>
 8003eaa:	06d0      	lsls	r0, r2, #27
 8003eac:	bf44      	itt	mi
 8003eae:	2320      	movmi	r3, #32
 8003eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb4:	0711      	lsls	r1, r2, #28
 8003eb6:	bf44      	itt	mi
 8003eb8:	232b      	movmi	r3, #43	; 0x2b
 8003eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec4:	d015      	beq.n	8003ef2 <_svfiprintf_r+0xf6>
 8003ec6:	9a07      	ldr	r2, [sp, #28]
 8003ec8:	4654      	mov	r4, sl
 8003eca:	2000      	movs	r0, #0
 8003ecc:	f04f 0c0a 	mov.w	ip, #10
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ed6:	3b30      	subs	r3, #48	; 0x30
 8003ed8:	2b09      	cmp	r3, #9
 8003eda:	d94e      	bls.n	8003f7a <_svfiprintf_r+0x17e>
 8003edc:	b1b0      	cbz	r0, 8003f0c <_svfiprintf_r+0x110>
 8003ede:	9207      	str	r2, [sp, #28]
 8003ee0:	e014      	b.n	8003f0c <_svfiprintf_r+0x110>
 8003ee2:	eba0 0308 	sub.w	r3, r0, r8
 8003ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8003eea:	4313      	orrs	r3, r2
 8003eec:	9304      	str	r3, [sp, #16]
 8003eee:	46a2      	mov	sl, r4
 8003ef0:	e7d2      	b.n	8003e98 <_svfiprintf_r+0x9c>
 8003ef2:	9b03      	ldr	r3, [sp, #12]
 8003ef4:	1d19      	adds	r1, r3, #4
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	9103      	str	r1, [sp, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bfbb      	ittet	lt
 8003efe:	425b      	neglt	r3, r3
 8003f00:	f042 0202 	orrlt.w	r2, r2, #2
 8003f04:	9307      	strge	r3, [sp, #28]
 8003f06:	9307      	strlt	r3, [sp, #28]
 8003f08:	bfb8      	it	lt
 8003f0a:	9204      	strlt	r2, [sp, #16]
 8003f0c:	7823      	ldrb	r3, [r4, #0]
 8003f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f10:	d10c      	bne.n	8003f2c <_svfiprintf_r+0x130>
 8003f12:	7863      	ldrb	r3, [r4, #1]
 8003f14:	2b2a      	cmp	r3, #42	; 0x2a
 8003f16:	d135      	bne.n	8003f84 <_svfiprintf_r+0x188>
 8003f18:	9b03      	ldr	r3, [sp, #12]
 8003f1a:	1d1a      	adds	r2, r3, #4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	9203      	str	r2, [sp, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bfb8      	it	lt
 8003f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f28:	3402      	adds	r4, #2
 8003f2a:	9305      	str	r3, [sp, #20]
 8003f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ff8 <_svfiprintf_r+0x1fc>
 8003f30:	7821      	ldrb	r1, [r4, #0]
 8003f32:	2203      	movs	r2, #3
 8003f34:	4650      	mov	r0, sl
 8003f36:	f7fc f973 	bl	8000220 <memchr>
 8003f3a:	b140      	cbz	r0, 8003f4e <_svfiprintf_r+0x152>
 8003f3c:	2340      	movs	r3, #64	; 0x40
 8003f3e:	eba0 000a 	sub.w	r0, r0, sl
 8003f42:	fa03 f000 	lsl.w	r0, r3, r0
 8003f46:	9b04      	ldr	r3, [sp, #16]
 8003f48:	4303      	orrs	r3, r0
 8003f4a:	3401      	adds	r4, #1
 8003f4c:	9304      	str	r3, [sp, #16]
 8003f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f52:	4826      	ldr	r0, [pc, #152]	; (8003fec <_svfiprintf_r+0x1f0>)
 8003f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f58:	2206      	movs	r2, #6
 8003f5a:	f7fc f961 	bl	8000220 <memchr>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d038      	beq.n	8003fd4 <_svfiprintf_r+0x1d8>
 8003f62:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <_svfiprintf_r+0x1f4>)
 8003f64:	bb1b      	cbnz	r3, 8003fae <_svfiprintf_r+0x1b2>
 8003f66:	9b03      	ldr	r3, [sp, #12]
 8003f68:	3307      	adds	r3, #7
 8003f6a:	f023 0307 	bic.w	r3, r3, #7
 8003f6e:	3308      	adds	r3, #8
 8003f70:	9303      	str	r3, [sp, #12]
 8003f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f74:	4433      	add	r3, r6
 8003f76:	9309      	str	r3, [sp, #36]	; 0x24
 8003f78:	e767      	b.n	8003e4a <_svfiprintf_r+0x4e>
 8003f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f7e:	460c      	mov	r4, r1
 8003f80:	2001      	movs	r0, #1
 8003f82:	e7a5      	b.n	8003ed0 <_svfiprintf_r+0xd4>
 8003f84:	2300      	movs	r3, #0
 8003f86:	3401      	adds	r4, #1
 8003f88:	9305      	str	r3, [sp, #20]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f04f 0c0a 	mov.w	ip, #10
 8003f90:	4620      	mov	r0, r4
 8003f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f96:	3a30      	subs	r2, #48	; 0x30
 8003f98:	2a09      	cmp	r2, #9
 8003f9a:	d903      	bls.n	8003fa4 <_svfiprintf_r+0x1a8>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0c5      	beq.n	8003f2c <_svfiprintf_r+0x130>
 8003fa0:	9105      	str	r1, [sp, #20]
 8003fa2:	e7c3      	b.n	8003f2c <_svfiprintf_r+0x130>
 8003fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fa8:	4604      	mov	r4, r0
 8003faa:	2301      	movs	r3, #1
 8003fac:	e7f0      	b.n	8003f90 <_svfiprintf_r+0x194>
 8003fae:	ab03      	add	r3, sp, #12
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	462a      	mov	r2, r5
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <_svfiprintf_r+0x1f8>)
 8003fb6:	a904      	add	r1, sp, #16
 8003fb8:	4638      	mov	r0, r7
 8003fba:	f3af 8000 	nop.w
 8003fbe:	1c42      	adds	r2, r0, #1
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	d1d6      	bne.n	8003f72 <_svfiprintf_r+0x176>
 8003fc4:	89ab      	ldrh	r3, [r5, #12]
 8003fc6:	065b      	lsls	r3, r3, #25
 8003fc8:	f53f af2c 	bmi.w	8003e24 <_svfiprintf_r+0x28>
 8003fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fce:	b01d      	add	sp, #116	; 0x74
 8003fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd4:	ab03      	add	r3, sp, #12
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	462a      	mov	r2, r5
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <_svfiprintf_r+0x1f8>)
 8003fdc:	a904      	add	r1, sp, #16
 8003fde:	4638      	mov	r0, r7
 8003fe0:	f000 f87a 	bl	80040d8 <_printf_i>
 8003fe4:	e7eb      	b.n	8003fbe <_svfiprintf_r+0x1c2>
 8003fe6:	bf00      	nop
 8003fe8:	0800473c 	.word	0x0800473c
 8003fec:	08004746 	.word	0x08004746
 8003ff0:	00000000 	.word	0x00000000
 8003ff4:	08003d45 	.word	0x08003d45
 8003ff8:	08004742 	.word	0x08004742

08003ffc <_printf_common>:
 8003ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004000:	4616      	mov	r6, r2
 8004002:	4699      	mov	r9, r3
 8004004:	688a      	ldr	r2, [r1, #8]
 8004006:	690b      	ldr	r3, [r1, #16]
 8004008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800400c:	4293      	cmp	r3, r2
 800400e:	bfb8      	it	lt
 8004010:	4613      	movlt	r3, r2
 8004012:	6033      	str	r3, [r6, #0]
 8004014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004018:	4607      	mov	r7, r0
 800401a:	460c      	mov	r4, r1
 800401c:	b10a      	cbz	r2, 8004022 <_printf_common+0x26>
 800401e:	3301      	adds	r3, #1
 8004020:	6033      	str	r3, [r6, #0]
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	0699      	lsls	r1, r3, #26
 8004026:	bf42      	ittt	mi
 8004028:	6833      	ldrmi	r3, [r6, #0]
 800402a:	3302      	addmi	r3, #2
 800402c:	6033      	strmi	r3, [r6, #0]
 800402e:	6825      	ldr	r5, [r4, #0]
 8004030:	f015 0506 	ands.w	r5, r5, #6
 8004034:	d106      	bne.n	8004044 <_printf_common+0x48>
 8004036:	f104 0a19 	add.w	sl, r4, #25
 800403a:	68e3      	ldr	r3, [r4, #12]
 800403c:	6832      	ldr	r2, [r6, #0]
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	42ab      	cmp	r3, r5
 8004042:	dc26      	bgt.n	8004092 <_printf_common+0x96>
 8004044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004048:	1e13      	subs	r3, r2, #0
 800404a:	6822      	ldr	r2, [r4, #0]
 800404c:	bf18      	it	ne
 800404e:	2301      	movne	r3, #1
 8004050:	0692      	lsls	r2, r2, #26
 8004052:	d42b      	bmi.n	80040ac <_printf_common+0xb0>
 8004054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004058:	4649      	mov	r1, r9
 800405a:	4638      	mov	r0, r7
 800405c:	47c0      	blx	r8
 800405e:	3001      	adds	r0, #1
 8004060:	d01e      	beq.n	80040a0 <_printf_common+0xa4>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	68e5      	ldr	r5, [r4, #12]
 8004066:	6832      	ldr	r2, [r6, #0]
 8004068:	f003 0306 	and.w	r3, r3, #6
 800406c:	2b04      	cmp	r3, #4
 800406e:	bf08      	it	eq
 8004070:	1aad      	subeq	r5, r5, r2
 8004072:	68a3      	ldr	r3, [r4, #8]
 8004074:	6922      	ldr	r2, [r4, #16]
 8004076:	bf0c      	ite	eq
 8004078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800407c:	2500      	movne	r5, #0
 800407e:	4293      	cmp	r3, r2
 8004080:	bfc4      	itt	gt
 8004082:	1a9b      	subgt	r3, r3, r2
 8004084:	18ed      	addgt	r5, r5, r3
 8004086:	2600      	movs	r6, #0
 8004088:	341a      	adds	r4, #26
 800408a:	42b5      	cmp	r5, r6
 800408c:	d11a      	bne.n	80040c4 <_printf_common+0xc8>
 800408e:	2000      	movs	r0, #0
 8004090:	e008      	b.n	80040a4 <_printf_common+0xa8>
 8004092:	2301      	movs	r3, #1
 8004094:	4652      	mov	r2, sl
 8004096:	4649      	mov	r1, r9
 8004098:	4638      	mov	r0, r7
 800409a:	47c0      	blx	r8
 800409c:	3001      	adds	r0, #1
 800409e:	d103      	bne.n	80040a8 <_printf_common+0xac>
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295
 80040a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a8:	3501      	adds	r5, #1
 80040aa:	e7c6      	b.n	800403a <_printf_common+0x3e>
 80040ac:	18e1      	adds	r1, r4, r3
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	2030      	movs	r0, #48	; 0x30
 80040b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040b6:	4422      	add	r2, r4
 80040b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040c0:	3302      	adds	r3, #2
 80040c2:	e7c7      	b.n	8004054 <_printf_common+0x58>
 80040c4:	2301      	movs	r3, #1
 80040c6:	4622      	mov	r2, r4
 80040c8:	4649      	mov	r1, r9
 80040ca:	4638      	mov	r0, r7
 80040cc:	47c0      	blx	r8
 80040ce:	3001      	adds	r0, #1
 80040d0:	d0e6      	beq.n	80040a0 <_printf_common+0xa4>
 80040d2:	3601      	adds	r6, #1
 80040d4:	e7d9      	b.n	800408a <_printf_common+0x8e>
	...

080040d8 <_printf_i>:
 80040d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040dc:	460c      	mov	r4, r1
 80040de:	4691      	mov	r9, r2
 80040e0:	7e27      	ldrb	r7, [r4, #24]
 80040e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040e4:	2f78      	cmp	r7, #120	; 0x78
 80040e6:	4680      	mov	r8, r0
 80040e8:	469a      	mov	sl, r3
 80040ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040ee:	d807      	bhi.n	8004100 <_printf_i+0x28>
 80040f0:	2f62      	cmp	r7, #98	; 0x62
 80040f2:	d80a      	bhi.n	800410a <_printf_i+0x32>
 80040f4:	2f00      	cmp	r7, #0
 80040f6:	f000 80d8 	beq.w	80042aa <_printf_i+0x1d2>
 80040fa:	2f58      	cmp	r7, #88	; 0x58
 80040fc:	f000 80a3 	beq.w	8004246 <_printf_i+0x16e>
 8004100:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004108:	e03a      	b.n	8004180 <_printf_i+0xa8>
 800410a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800410e:	2b15      	cmp	r3, #21
 8004110:	d8f6      	bhi.n	8004100 <_printf_i+0x28>
 8004112:	a001      	add	r0, pc, #4	; (adr r0, 8004118 <_printf_i+0x40>)
 8004114:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004118:	08004171 	.word	0x08004171
 800411c:	08004185 	.word	0x08004185
 8004120:	08004101 	.word	0x08004101
 8004124:	08004101 	.word	0x08004101
 8004128:	08004101 	.word	0x08004101
 800412c:	08004101 	.word	0x08004101
 8004130:	08004185 	.word	0x08004185
 8004134:	08004101 	.word	0x08004101
 8004138:	08004101 	.word	0x08004101
 800413c:	08004101 	.word	0x08004101
 8004140:	08004101 	.word	0x08004101
 8004144:	08004291 	.word	0x08004291
 8004148:	080041b5 	.word	0x080041b5
 800414c:	08004273 	.word	0x08004273
 8004150:	08004101 	.word	0x08004101
 8004154:	08004101 	.word	0x08004101
 8004158:	080042b3 	.word	0x080042b3
 800415c:	08004101 	.word	0x08004101
 8004160:	080041b5 	.word	0x080041b5
 8004164:	08004101 	.word	0x08004101
 8004168:	08004101 	.word	0x08004101
 800416c:	0800427b 	.word	0x0800427b
 8004170:	680b      	ldr	r3, [r1, #0]
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	600a      	str	r2, [r1, #0]
 8004178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800417c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004180:	2301      	movs	r3, #1
 8004182:	e0a3      	b.n	80042cc <_printf_i+0x1f4>
 8004184:	6825      	ldr	r5, [r4, #0]
 8004186:	6808      	ldr	r0, [r1, #0]
 8004188:	062e      	lsls	r6, r5, #24
 800418a:	f100 0304 	add.w	r3, r0, #4
 800418e:	d50a      	bpl.n	80041a6 <_printf_i+0xce>
 8004190:	6805      	ldr	r5, [r0, #0]
 8004192:	600b      	str	r3, [r1, #0]
 8004194:	2d00      	cmp	r5, #0
 8004196:	da03      	bge.n	80041a0 <_printf_i+0xc8>
 8004198:	232d      	movs	r3, #45	; 0x2d
 800419a:	426d      	negs	r5, r5
 800419c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a0:	485e      	ldr	r0, [pc, #376]	; (800431c <_printf_i+0x244>)
 80041a2:	230a      	movs	r3, #10
 80041a4:	e019      	b.n	80041da <_printf_i+0x102>
 80041a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041aa:	6805      	ldr	r5, [r0, #0]
 80041ac:	600b      	str	r3, [r1, #0]
 80041ae:	bf18      	it	ne
 80041b0:	b22d      	sxthne	r5, r5
 80041b2:	e7ef      	b.n	8004194 <_printf_i+0xbc>
 80041b4:	680b      	ldr	r3, [r1, #0]
 80041b6:	6825      	ldr	r5, [r4, #0]
 80041b8:	1d18      	adds	r0, r3, #4
 80041ba:	6008      	str	r0, [r1, #0]
 80041bc:	0628      	lsls	r0, r5, #24
 80041be:	d501      	bpl.n	80041c4 <_printf_i+0xec>
 80041c0:	681d      	ldr	r5, [r3, #0]
 80041c2:	e002      	b.n	80041ca <_printf_i+0xf2>
 80041c4:	0669      	lsls	r1, r5, #25
 80041c6:	d5fb      	bpl.n	80041c0 <_printf_i+0xe8>
 80041c8:	881d      	ldrh	r5, [r3, #0]
 80041ca:	4854      	ldr	r0, [pc, #336]	; (800431c <_printf_i+0x244>)
 80041cc:	2f6f      	cmp	r7, #111	; 0x6f
 80041ce:	bf0c      	ite	eq
 80041d0:	2308      	moveq	r3, #8
 80041d2:	230a      	movne	r3, #10
 80041d4:	2100      	movs	r1, #0
 80041d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041da:	6866      	ldr	r6, [r4, #4]
 80041dc:	60a6      	str	r6, [r4, #8]
 80041de:	2e00      	cmp	r6, #0
 80041e0:	bfa2      	ittt	ge
 80041e2:	6821      	ldrge	r1, [r4, #0]
 80041e4:	f021 0104 	bicge.w	r1, r1, #4
 80041e8:	6021      	strge	r1, [r4, #0]
 80041ea:	b90d      	cbnz	r5, 80041f0 <_printf_i+0x118>
 80041ec:	2e00      	cmp	r6, #0
 80041ee:	d04d      	beq.n	800428c <_printf_i+0x1b4>
 80041f0:	4616      	mov	r6, r2
 80041f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80041f6:	fb03 5711 	mls	r7, r3, r1, r5
 80041fa:	5dc7      	ldrb	r7, [r0, r7]
 80041fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004200:	462f      	mov	r7, r5
 8004202:	42bb      	cmp	r3, r7
 8004204:	460d      	mov	r5, r1
 8004206:	d9f4      	bls.n	80041f2 <_printf_i+0x11a>
 8004208:	2b08      	cmp	r3, #8
 800420a:	d10b      	bne.n	8004224 <_printf_i+0x14c>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	07df      	lsls	r7, r3, #31
 8004210:	d508      	bpl.n	8004224 <_printf_i+0x14c>
 8004212:	6923      	ldr	r3, [r4, #16]
 8004214:	6861      	ldr	r1, [r4, #4]
 8004216:	4299      	cmp	r1, r3
 8004218:	bfde      	ittt	le
 800421a:	2330      	movle	r3, #48	; 0x30
 800421c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004220:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004224:	1b92      	subs	r2, r2, r6
 8004226:	6122      	str	r2, [r4, #16]
 8004228:	f8cd a000 	str.w	sl, [sp]
 800422c:	464b      	mov	r3, r9
 800422e:	aa03      	add	r2, sp, #12
 8004230:	4621      	mov	r1, r4
 8004232:	4640      	mov	r0, r8
 8004234:	f7ff fee2 	bl	8003ffc <_printf_common>
 8004238:	3001      	adds	r0, #1
 800423a:	d14c      	bne.n	80042d6 <_printf_i+0x1fe>
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	b004      	add	sp, #16
 8004242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004246:	4835      	ldr	r0, [pc, #212]	; (800431c <_printf_i+0x244>)
 8004248:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	680e      	ldr	r6, [r1, #0]
 8004250:	061f      	lsls	r7, r3, #24
 8004252:	f856 5b04 	ldr.w	r5, [r6], #4
 8004256:	600e      	str	r6, [r1, #0]
 8004258:	d514      	bpl.n	8004284 <_printf_i+0x1ac>
 800425a:	07d9      	lsls	r1, r3, #31
 800425c:	bf44      	itt	mi
 800425e:	f043 0320 	orrmi.w	r3, r3, #32
 8004262:	6023      	strmi	r3, [r4, #0]
 8004264:	b91d      	cbnz	r5, 800426e <_printf_i+0x196>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	f023 0320 	bic.w	r3, r3, #32
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	2310      	movs	r3, #16
 8004270:	e7b0      	b.n	80041d4 <_printf_i+0xfc>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	f043 0320 	orr.w	r3, r3, #32
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	2378      	movs	r3, #120	; 0x78
 800427c:	4828      	ldr	r0, [pc, #160]	; (8004320 <_printf_i+0x248>)
 800427e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004282:	e7e3      	b.n	800424c <_printf_i+0x174>
 8004284:	065e      	lsls	r6, r3, #25
 8004286:	bf48      	it	mi
 8004288:	b2ad      	uxthmi	r5, r5
 800428a:	e7e6      	b.n	800425a <_printf_i+0x182>
 800428c:	4616      	mov	r6, r2
 800428e:	e7bb      	b.n	8004208 <_printf_i+0x130>
 8004290:	680b      	ldr	r3, [r1, #0]
 8004292:	6826      	ldr	r6, [r4, #0]
 8004294:	6960      	ldr	r0, [r4, #20]
 8004296:	1d1d      	adds	r5, r3, #4
 8004298:	600d      	str	r5, [r1, #0]
 800429a:	0635      	lsls	r5, r6, #24
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	d501      	bpl.n	80042a4 <_printf_i+0x1cc>
 80042a0:	6018      	str	r0, [r3, #0]
 80042a2:	e002      	b.n	80042aa <_printf_i+0x1d2>
 80042a4:	0671      	lsls	r1, r6, #25
 80042a6:	d5fb      	bpl.n	80042a0 <_printf_i+0x1c8>
 80042a8:	8018      	strh	r0, [r3, #0]
 80042aa:	2300      	movs	r3, #0
 80042ac:	6123      	str	r3, [r4, #16]
 80042ae:	4616      	mov	r6, r2
 80042b0:	e7ba      	b.n	8004228 <_printf_i+0x150>
 80042b2:	680b      	ldr	r3, [r1, #0]
 80042b4:	1d1a      	adds	r2, r3, #4
 80042b6:	600a      	str	r2, [r1, #0]
 80042b8:	681e      	ldr	r6, [r3, #0]
 80042ba:	6862      	ldr	r2, [r4, #4]
 80042bc:	2100      	movs	r1, #0
 80042be:	4630      	mov	r0, r6
 80042c0:	f7fb ffae 	bl	8000220 <memchr>
 80042c4:	b108      	cbz	r0, 80042ca <_printf_i+0x1f2>
 80042c6:	1b80      	subs	r0, r0, r6
 80042c8:	6060      	str	r0, [r4, #4]
 80042ca:	6863      	ldr	r3, [r4, #4]
 80042cc:	6123      	str	r3, [r4, #16]
 80042ce:	2300      	movs	r3, #0
 80042d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042d4:	e7a8      	b.n	8004228 <_printf_i+0x150>
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	4632      	mov	r2, r6
 80042da:	4649      	mov	r1, r9
 80042dc:	4640      	mov	r0, r8
 80042de:	47d0      	blx	sl
 80042e0:	3001      	adds	r0, #1
 80042e2:	d0ab      	beq.n	800423c <_printf_i+0x164>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	079b      	lsls	r3, r3, #30
 80042e8:	d413      	bmi.n	8004312 <_printf_i+0x23a>
 80042ea:	68e0      	ldr	r0, [r4, #12]
 80042ec:	9b03      	ldr	r3, [sp, #12]
 80042ee:	4298      	cmp	r0, r3
 80042f0:	bfb8      	it	lt
 80042f2:	4618      	movlt	r0, r3
 80042f4:	e7a4      	b.n	8004240 <_printf_i+0x168>
 80042f6:	2301      	movs	r3, #1
 80042f8:	4632      	mov	r2, r6
 80042fa:	4649      	mov	r1, r9
 80042fc:	4640      	mov	r0, r8
 80042fe:	47d0      	blx	sl
 8004300:	3001      	adds	r0, #1
 8004302:	d09b      	beq.n	800423c <_printf_i+0x164>
 8004304:	3501      	adds	r5, #1
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	9903      	ldr	r1, [sp, #12]
 800430a:	1a5b      	subs	r3, r3, r1
 800430c:	42ab      	cmp	r3, r5
 800430e:	dcf2      	bgt.n	80042f6 <_printf_i+0x21e>
 8004310:	e7eb      	b.n	80042ea <_printf_i+0x212>
 8004312:	2500      	movs	r5, #0
 8004314:	f104 0619 	add.w	r6, r4, #25
 8004318:	e7f5      	b.n	8004306 <_printf_i+0x22e>
 800431a:	bf00      	nop
 800431c:	0800474d 	.word	0x0800474d
 8004320:	0800475e 	.word	0x0800475e

08004324 <_sbrk_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4d06      	ldr	r5, [pc, #24]	; (8004340 <_sbrk_r+0x1c>)
 8004328:	2300      	movs	r3, #0
 800432a:	4604      	mov	r4, r0
 800432c:	4608      	mov	r0, r1
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	f7fd f822 	bl	8001378 <_sbrk>
 8004334:	1c43      	adds	r3, r0, #1
 8004336:	d102      	bne.n	800433e <_sbrk_r+0x1a>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	b103      	cbz	r3, 800433e <_sbrk_r+0x1a>
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	bd38      	pop	{r3, r4, r5, pc}
 8004340:	20000964 	.word	0x20000964

08004344 <__retarget_lock_acquire_recursive>:
 8004344:	4770      	bx	lr

08004346 <__retarget_lock_release_recursive>:
 8004346:	4770      	bx	lr

08004348 <memcpy>:
 8004348:	440a      	add	r2, r1
 800434a:	4291      	cmp	r1, r2
 800434c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004350:	d100      	bne.n	8004354 <memcpy+0xc>
 8004352:	4770      	bx	lr
 8004354:	b510      	push	{r4, lr}
 8004356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800435a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800435e:	4291      	cmp	r1, r2
 8004360:	d1f9      	bne.n	8004356 <memcpy+0xe>
 8004362:	bd10      	pop	{r4, pc}

08004364 <memmove>:
 8004364:	4288      	cmp	r0, r1
 8004366:	b510      	push	{r4, lr}
 8004368:	eb01 0402 	add.w	r4, r1, r2
 800436c:	d902      	bls.n	8004374 <memmove+0x10>
 800436e:	4284      	cmp	r4, r0
 8004370:	4623      	mov	r3, r4
 8004372:	d807      	bhi.n	8004384 <memmove+0x20>
 8004374:	1e43      	subs	r3, r0, #1
 8004376:	42a1      	cmp	r1, r4
 8004378:	d008      	beq.n	800438c <memmove+0x28>
 800437a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800437e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004382:	e7f8      	b.n	8004376 <memmove+0x12>
 8004384:	4402      	add	r2, r0
 8004386:	4601      	mov	r1, r0
 8004388:	428a      	cmp	r2, r1
 800438a:	d100      	bne.n	800438e <memmove+0x2a>
 800438c:	bd10      	pop	{r4, pc}
 800438e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004396:	e7f7      	b.n	8004388 <memmove+0x24>

08004398 <__malloc_lock>:
 8004398:	4801      	ldr	r0, [pc, #4]	; (80043a0 <__malloc_lock+0x8>)
 800439a:	f7ff bfd3 	b.w	8004344 <__retarget_lock_acquire_recursive>
 800439e:	bf00      	nop
 80043a0:	2000095c 	.word	0x2000095c

080043a4 <__malloc_unlock>:
 80043a4:	4801      	ldr	r0, [pc, #4]	; (80043ac <__malloc_unlock+0x8>)
 80043a6:	f7ff bfce 	b.w	8004346 <__retarget_lock_release_recursive>
 80043aa:	bf00      	nop
 80043ac:	2000095c 	.word	0x2000095c

080043b0 <_realloc_r>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	4607      	mov	r7, r0
 80043b4:	4614      	mov	r4, r2
 80043b6:	460e      	mov	r6, r1
 80043b8:	b921      	cbnz	r1, 80043c4 <_realloc_r+0x14>
 80043ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043be:	4611      	mov	r1, r2
 80043c0:	f7ff bc66 	b.w	8003c90 <_malloc_r>
 80043c4:	b922      	cbnz	r2, 80043d0 <_realloc_r+0x20>
 80043c6:	f7ff fc13 	bl	8003bf0 <_free_r>
 80043ca:	4625      	mov	r5, r4
 80043cc:	4628      	mov	r0, r5
 80043ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043d0:	f000 f814 	bl	80043fc <_malloc_usable_size_r>
 80043d4:	42a0      	cmp	r0, r4
 80043d6:	d20f      	bcs.n	80043f8 <_realloc_r+0x48>
 80043d8:	4621      	mov	r1, r4
 80043da:	4638      	mov	r0, r7
 80043dc:	f7ff fc58 	bl	8003c90 <_malloc_r>
 80043e0:	4605      	mov	r5, r0
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d0f2      	beq.n	80043cc <_realloc_r+0x1c>
 80043e6:	4631      	mov	r1, r6
 80043e8:	4622      	mov	r2, r4
 80043ea:	f7ff ffad 	bl	8004348 <memcpy>
 80043ee:	4631      	mov	r1, r6
 80043f0:	4638      	mov	r0, r7
 80043f2:	f7ff fbfd 	bl	8003bf0 <_free_r>
 80043f6:	e7e9      	b.n	80043cc <_realloc_r+0x1c>
 80043f8:	4635      	mov	r5, r6
 80043fa:	e7e7      	b.n	80043cc <_realloc_r+0x1c>

080043fc <_malloc_usable_size_r>:
 80043fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004400:	1f18      	subs	r0, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	bfbc      	itt	lt
 8004406:	580b      	ldrlt	r3, [r1, r0]
 8004408:	18c0      	addlt	r0, r0, r3
 800440a:	4770      	bx	lr

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

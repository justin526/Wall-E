
real_battery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea0  08003ea0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ea0  08003ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea8  08003ea8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08003ebc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003ebc  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3d6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001993  00000000  00000000  0002b412  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0002cda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002da48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021652  00000000  00000000  0002e610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000091ae  00000000  00000000  0004fc62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfe09  00000000  00000000  00058e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128c19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003680  00000000  00000000  00128c94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003e70 	.word	0x08003e70

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003e70 	.word	0x08003e70

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000342:	f1a4 0401 	sub.w	r4, r4, #1
 8000346:	d1e9      	bne.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2iz>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a8:	d215      	bcs.n	80009d6 <__aeabi_d2iz+0x36>
 80009aa:	d511      	bpl.n	80009d0 <__aeabi_d2iz+0x30>
 80009ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d912      	bls.n	80009dc <__aeabi_d2iz+0x3c>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	bf18      	it	ne
 80009cc:	4240      	negne	r0, r0
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009da:	d105      	bne.n	80009e8 <__aeabi_d2iz+0x48>
 80009dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	bf08      	it	eq
 80009e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_uldivmod>:
 80009f0:	b953      	cbnz	r3, 8000a08 <__aeabi_uldivmod+0x18>
 80009f2:	b94a      	cbnz	r2, 8000a08 <__aeabi_uldivmod+0x18>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	bf08      	it	eq
 80009f8:	2800      	cmpeq	r0, #0
 80009fa:	bf1c      	itt	ne
 80009fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000a00:	f04f 30ff 	movne.w	r0, #4294967295
 8000a04:	f000 b972 	b.w	8000cec <__aeabi_idiv0>
 8000a08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a10:	f000 f806 	bl	8000a20 <__udivmoddi4>
 8000a14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a1c:	b004      	add	sp, #16
 8000a1e:	4770      	bx	lr

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9e08      	ldr	r6, [sp, #32]
 8000a26:	4604      	mov	r4, r0
 8000a28:	4688      	mov	r8, r1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d14b      	bne.n	8000ac6 <__udivmoddi4+0xa6>
 8000a2e:	428a      	cmp	r2, r1
 8000a30:	4615      	mov	r5, r2
 8000a32:	d967      	bls.n	8000b04 <__udivmoddi4+0xe4>
 8000a34:	fab2 f282 	clz	r2, r2
 8000a38:	b14a      	cbz	r2, 8000a4e <__udivmoddi4+0x2e>
 8000a3a:	f1c2 0720 	rsb	r7, r2, #32
 8000a3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a42:	fa20 f707 	lsr.w	r7, r0, r7
 8000a46:	4095      	lsls	r5, r2
 8000a48:	ea47 0803 	orr.w	r8, r7, r3
 8000a4c:	4094      	lsls	r4, r2
 8000a4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a52:	0c23      	lsrs	r3, r4, #16
 8000a54:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a58:	fa1f fc85 	uxth.w	ip, r5
 8000a5c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a64:	fb07 f10c 	mul.w	r1, r7, ip
 8000a68:	4299      	cmp	r1, r3
 8000a6a:	d909      	bls.n	8000a80 <__udivmoddi4+0x60>
 8000a6c:	18eb      	adds	r3, r5, r3
 8000a6e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a72:	f080 811b 	bcs.w	8000cac <__udivmoddi4+0x28c>
 8000a76:	4299      	cmp	r1, r3
 8000a78:	f240 8118 	bls.w	8000cac <__udivmoddi4+0x28c>
 8000a7c:	3f02      	subs	r7, #2
 8000a7e:	442b      	add	r3, r5
 8000a80:	1a5b      	subs	r3, r3, r1
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a90:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a94:	45a4      	cmp	ip, r4
 8000a96:	d909      	bls.n	8000aac <__udivmoddi4+0x8c>
 8000a98:	192c      	adds	r4, r5, r4
 8000a9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a9e:	f080 8107 	bcs.w	8000cb0 <__udivmoddi4+0x290>
 8000aa2:	45a4      	cmp	ip, r4
 8000aa4:	f240 8104 	bls.w	8000cb0 <__udivmoddi4+0x290>
 8000aa8:	3802      	subs	r0, #2
 8000aaa:	442c      	add	r4, r5
 8000aac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ab0:	eba4 040c 	sub.w	r4, r4, ip
 8000ab4:	2700      	movs	r7, #0
 8000ab6:	b11e      	cbz	r6, 8000ac0 <__udivmoddi4+0xa0>
 8000ab8:	40d4      	lsrs	r4, r2
 8000aba:	2300      	movs	r3, #0
 8000abc:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac0:	4639      	mov	r1, r7
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0xbe>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	f000 80eb 	beq.w	8000ca6 <__udivmoddi4+0x286>
 8000ad0:	2700      	movs	r7, #0
 8000ad2:	e9c6 0100 	strd	r0, r1, [r6]
 8000ad6:	4638      	mov	r0, r7
 8000ad8:	4639      	mov	r1, r7
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	fab3 f783 	clz	r7, r3
 8000ae2:	2f00      	cmp	r7, #0
 8000ae4:	d147      	bne.n	8000b76 <__udivmoddi4+0x156>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xd0>
 8000aea:	4282      	cmp	r2, r0
 8000aec:	f200 80fa 	bhi.w	8000ce4 <__udivmoddi4+0x2c4>
 8000af0:	1a84      	subs	r4, r0, r2
 8000af2:	eb61 0303 	sbc.w	r3, r1, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	4698      	mov	r8, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d0e0      	beq.n	8000ac0 <__udivmoddi4+0xa0>
 8000afe:	e9c6 4800 	strd	r4, r8, [r6]
 8000b02:	e7dd      	b.n	8000ac0 <__udivmoddi4+0xa0>
 8000b04:	b902      	cbnz	r2, 8000b08 <__udivmoddi4+0xe8>
 8000b06:	deff      	udf	#255	; 0xff
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	f040 808f 	bne.w	8000c30 <__udivmoddi4+0x210>
 8000b12:	1b49      	subs	r1, r1, r5
 8000b14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b18:	fa1f f885 	uxth.w	r8, r5
 8000b1c:	2701      	movs	r7, #1
 8000b1e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b22:	0c23      	lsrs	r3, r4, #16
 8000b24:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2c:	fb08 f10c 	mul.w	r1, r8, ip
 8000b30:	4299      	cmp	r1, r3
 8000b32:	d907      	bls.n	8000b44 <__udivmoddi4+0x124>
 8000b34:	18eb      	adds	r3, r5, r3
 8000b36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b3a:	d202      	bcs.n	8000b42 <__udivmoddi4+0x122>
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	f200 80cd 	bhi.w	8000cdc <__udivmoddi4+0x2bc>
 8000b42:	4684      	mov	ip, r0
 8000b44:	1a59      	subs	r1, r3, r1
 8000b46:	b2a3      	uxth	r3, r4
 8000b48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b4c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b54:	fb08 f800 	mul.w	r8, r8, r0
 8000b58:	45a0      	cmp	r8, r4
 8000b5a:	d907      	bls.n	8000b6c <__udivmoddi4+0x14c>
 8000b5c:	192c      	adds	r4, r5, r4
 8000b5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b62:	d202      	bcs.n	8000b6a <__udivmoddi4+0x14a>
 8000b64:	45a0      	cmp	r8, r4
 8000b66:	f200 80b6 	bhi.w	8000cd6 <__udivmoddi4+0x2b6>
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	eba4 0408 	sub.w	r4, r4, r8
 8000b70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b74:	e79f      	b.n	8000ab6 <__udivmoddi4+0x96>
 8000b76:	f1c7 0c20 	rsb	ip, r7, #32
 8000b7a:	40bb      	lsls	r3, r7
 8000b7c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b80:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b84:	fa01 f407 	lsl.w	r4, r1, r7
 8000b88:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b8c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b90:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b94:	4325      	orrs	r5, r4
 8000b96:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b9a:	0c2c      	lsrs	r4, r5, #16
 8000b9c:	fb08 3319 	mls	r3, r8, r9, r3
 8000ba0:	fa1f fa8e 	uxth.w	sl, lr
 8000ba4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ba8:	fb09 f40a 	mul.w	r4, r9, sl
 8000bac:	429c      	cmp	r4, r3
 8000bae:	fa02 f207 	lsl.w	r2, r2, r7
 8000bb2:	fa00 f107 	lsl.w	r1, r0, r7
 8000bb6:	d90b      	bls.n	8000bd0 <__udivmoddi4+0x1b0>
 8000bb8:	eb1e 0303 	adds.w	r3, lr, r3
 8000bbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bc0:	f080 8087 	bcs.w	8000cd2 <__udivmoddi4+0x2b2>
 8000bc4:	429c      	cmp	r4, r3
 8000bc6:	f240 8084 	bls.w	8000cd2 <__udivmoddi4+0x2b2>
 8000bca:	f1a9 0902 	sub.w	r9, r9, #2
 8000bce:	4473      	add	r3, lr
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	b2ad      	uxth	r5, r5
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000be0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000be4:	45a2      	cmp	sl, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x1da>
 8000be8:	eb1e 0404 	adds.w	r4, lr, r4
 8000bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf0:	d26b      	bcs.n	8000cca <__udivmoddi4+0x2aa>
 8000bf2:	45a2      	cmp	sl, r4
 8000bf4:	d969      	bls.n	8000cca <__udivmoddi4+0x2aa>
 8000bf6:	3802      	subs	r0, #2
 8000bf8:	4474      	add	r4, lr
 8000bfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000c02:	eba4 040a 	sub.w	r4, r4, sl
 8000c06:	454c      	cmp	r4, r9
 8000c08:	46c2      	mov	sl, r8
 8000c0a:	464b      	mov	r3, r9
 8000c0c:	d354      	bcc.n	8000cb8 <__udivmoddi4+0x298>
 8000c0e:	d051      	beq.n	8000cb4 <__udivmoddi4+0x294>
 8000c10:	2e00      	cmp	r6, #0
 8000c12:	d069      	beq.n	8000ce8 <__udivmoddi4+0x2c8>
 8000c14:	ebb1 050a 	subs.w	r5, r1, sl
 8000c18:	eb64 0403 	sbc.w	r4, r4, r3
 8000c1c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c20:	40fd      	lsrs	r5, r7
 8000c22:	40fc      	lsrs	r4, r7
 8000c24:	ea4c 0505 	orr.w	r5, ip, r5
 8000c28:	e9c6 5400 	strd	r5, r4, [r6]
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	e747      	b.n	8000ac0 <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f703 	lsr.w	r7, r0, r3
 8000c38:	4095      	lsls	r5, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8000c42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c46:	4338      	orrs	r0, r7
 8000c48:	0c01      	lsrs	r1, r0, #16
 8000c4a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c4e:	fa1f f885 	uxth.w	r8, r5
 8000c52:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5a:	fb07 f308 	mul.w	r3, r7, r8
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	fa04 f402 	lsl.w	r4, r4, r2
 8000c64:	d907      	bls.n	8000c76 <__udivmoddi4+0x256>
 8000c66:	1869      	adds	r1, r5, r1
 8000c68:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c6c:	d22f      	bcs.n	8000cce <__udivmoddi4+0x2ae>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d92d      	bls.n	8000cce <__udivmoddi4+0x2ae>
 8000c72:	3f02      	subs	r7, #2
 8000c74:	4429      	add	r1, r5
 8000c76:	1acb      	subs	r3, r1, r3
 8000c78:	b281      	uxth	r1, r0
 8000c7a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c7e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c86:	fb00 f308 	mul.w	r3, r0, r8
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x27e>
 8000c8e:	1869      	adds	r1, r5, r1
 8000c90:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c94:	d217      	bcs.n	8000cc6 <__udivmoddi4+0x2a6>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d915      	bls.n	8000cc6 <__udivmoddi4+0x2a6>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4429      	add	r1, r5
 8000c9e:	1ac9      	subs	r1, r1, r3
 8000ca0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ca4:	e73b      	b.n	8000b1e <__udivmoddi4+0xfe>
 8000ca6:	4637      	mov	r7, r6
 8000ca8:	4630      	mov	r0, r6
 8000caa:	e709      	b.n	8000ac0 <__udivmoddi4+0xa0>
 8000cac:	4607      	mov	r7, r0
 8000cae:	e6e7      	b.n	8000a80 <__udivmoddi4+0x60>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6fb      	b.n	8000aac <__udivmoddi4+0x8c>
 8000cb4:	4541      	cmp	r1, r8
 8000cb6:	d2ab      	bcs.n	8000c10 <__udivmoddi4+0x1f0>
 8000cb8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cbc:	eb69 020e 	sbc.w	r2, r9, lr
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	e7a4      	b.n	8000c10 <__udivmoddi4+0x1f0>
 8000cc6:	4660      	mov	r0, ip
 8000cc8:	e7e9      	b.n	8000c9e <__udivmoddi4+0x27e>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	e795      	b.n	8000bfa <__udivmoddi4+0x1da>
 8000cce:	4667      	mov	r7, ip
 8000cd0:	e7d1      	b.n	8000c76 <__udivmoddi4+0x256>
 8000cd2:	4681      	mov	r9, r0
 8000cd4:	e77c      	b.n	8000bd0 <__udivmoddi4+0x1b0>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	442c      	add	r4, r5
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0x14c>
 8000cdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ce0:	442b      	add	r3, r5
 8000ce2:	e72f      	b.n	8000b44 <__udivmoddi4+0x124>
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	e708      	b.n	8000afa <__udivmoddi4+0xda>
 8000ce8:	4637      	mov	r7, r6
 8000cea:	e6e9      	b.n	8000ac0 <__udivmoddi4+0xa0>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <moveServos>:
 * 		- 2000 = top of range
 *
 * 	length: length of both servoNum array and angles array
 */
void moveServos(uint8_t* servos, uint32_t* angles, uint8_t length)
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	466b      	mov	r3, sp
 8000d00:	461d      	mov	r5, r3
	uint16_t time = 1000; //default time because why not
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	837b      	strh	r3, [r7, #26]

	uint8_t data[7 + (length * 3)];
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	1dd8      	adds	r0, r3, #7
 8000d12:	1e43      	subs	r3, r0, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	4603      	mov	r3, r0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	f04f 0400 	mov.w	r4, #0
 8000d26:	00d4      	lsls	r4, r2, #3
 8000d28:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d2c:	00cb      	lsls	r3, r1, #3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	f04f 0400 	mov.w	r4, #0
 8000d3e:	00d4      	lsls	r4, r2, #3
 8000d40:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d44:	00cb      	lsls	r3, r1, #3
 8000d46:	4603      	mov	r3, r0
 8000d48:	3307      	adds	r3, #7
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d52:	466b      	mov	r3, sp
 8000d54:	3300      	adds	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
	data[0] = 0x55; //header 1
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	2255      	movs	r2, #85	; 0x55
 8000d5c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x55; //header 2
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	2255      	movs	r2, #85	; 0x55
 8000d62:	705a      	strb	r2, [r3, #1]
	data[2] = 0x05 + (length * 3); //length
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	461a      	mov	r2, r3
 8000d68:	0052      	lsls	r2, r2, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	3305      	adds	r3, #5
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	709a      	strb	r2, [r3, #2]
	data[3] = 0x03; //cmd
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	2203      	movs	r2, #3
 8000d7a:	70da      	strb	r2, [r3, #3]
	data[4] = length; //# servos
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	79fa      	ldrb	r2, [r7, #7]
 8000d80:	711a      	strb	r2, [r3, #4]
	data[5] = GET_LOW_BYTE(time); //lower 8 time
 8000d82:	8b7b      	ldrh	r3, [r7, #26]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	715a      	strb	r2, [r3, #5]
	data[6] = GET_HIGH_BYTE(time); //upper 8 time
 8000d8a:	8b7b      	ldrh	r3, [r7, #26]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < length; i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e028      	b.n	8000dee <moveServos+0xfe>
	{
		data[7 + (i * 3)] = servos[i];
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	18d1      	adds	r1, r2, r3
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	3307      	adds	r3, #7
 8000dac:	7809      	ldrb	r1, [r1, #0]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	54d1      	strb	r1, [r2, r3]
		data[8 + (i * 3)] = GET_LOW_BYTE(angles[i]);
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	4413      	add	r3, r2
 8000dba:	6819      	ldr	r1, [r3, #0]
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3308      	adds	r3, #8
 8000dc6:	b2c9      	uxtb	r1, r1
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	54d1      	strb	r1, [r2, r3]
		data[9 + (i * 3)] = GET_HIGH_BYTE(angles[i]);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	0a19      	lsrs	r1, r3, #8
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	3309      	adds	r3, #9
 8000de2:	b2c9      	uxtb	r1, r1
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < length; i++)
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	3301      	adds	r3, #1
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dbd2      	blt.n	8000d9c <moveServos+0xac>
	}
	HAL_UART_Transmit(&huart1, data, 7 + (length * 3), time + 250);
 8000df6:	6939      	ldr	r1, [r7, #16]
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	0052      	lsls	r2, r2, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3307      	adds	r3, #7
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	8b7b      	ldrh	r3, [r7, #26]
 8000e0a:	33fa      	adds	r3, #250	; 0xfa
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <moveServos+0x12c>)
 8000e0e:	f002 fba4 	bl	800355a <HAL_UART_Transmit>
 8000e12:	46ad      	mov	sp, r5
	//	HAL_Delay(3000);
}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e1c:	200000f0 	.word	0x200000f0

08000e20 <resetServos>:

void resetServos()
{
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	466b      	mov	r3, sp
 8000e28:	461d      	mov	r5, r3
	uint8_t length = 5;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	74fb      	strb	r3, [r7, #19]
	uint8_t servos[length];
 8000e2e:	7cf8      	ldrb	r0, [r7, #19]
 8000e30:	4603      	mov	r3, r0
 8000e32:	3b01      	subs	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	b2c1      	uxtb	r1, r0
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	f04f 0400 	mov.w	r4, #0
 8000e44:	00d4      	lsls	r4, r2, #3
 8000e46:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e4a:	00cb      	lsls	r3, r1, #3
 8000e4c:	b2c1      	uxtb	r1, r0
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	f04f 0400 	mov.w	r4, #0
 8000e5a:	00d4      	lsls	r4, r2, #3
 8000e5c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e60:	00cb      	lsls	r3, r1, #3
 8000e62:	4603      	mov	r3, r0
 8000e64:	3307      	adds	r3, #7
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e6e:	466b      	mov	r3, sp
 8000e70:	3300      	adds	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
	uint32_t angles[length];
 8000e74:	7cf8      	ldrb	r0, [r7, #19]
 8000e76:	4603      	mov	r3, r0
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	b2c1      	uxtb	r1, r0
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	f04f 0400 	mov.w	r4, #0
 8000e8a:	0154      	lsls	r4, r2, #5
 8000e8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e90:	014b      	lsls	r3, r1, #5
 8000e92:	b2c1      	uxtb	r1, r0
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	f04f 0400 	mov.w	r4, #0
 8000ea0:	0154      	lsls	r4, r2, #5
 8000ea2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ea6:	014b      	lsls	r3, r1, #5
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	3303      	adds	r3, #3
 8000eae:	3307      	adds	r3, #7
 8000eb0:	08db      	lsrs	r3, r3, #3
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	ebad 0d03 	sub.w	sp, sp, r3
 8000eb8:	466b      	mov	r3, sp
 8000eba:	3303      	adds	r3, #3
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < length; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	e011      	b.n	8000eec <resetServos+0xcc>
	{
		servos[i] = i + 2;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	3302      	adds	r3, #2
 8000ece:	b2d9      	uxtb	r1, r3
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
		angles[i] = 1500;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < length; i++)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	7cfb      	ldrb	r3, [r7, #19]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbe9      	blt.n	8000ec8 <resetServos+0xa8>
	}
	//	angles[1] = 600;
	angles[4] = 2000;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000efa:	611a      	str	r2, [r3, #16]
	moveServos(servos, angles, length);
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	7cfa      	ldrb	r2, [r7, #19]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fef4 	bl	8000cf0 <moveServos>
 8000f08:	46ad      	mov	sp, r5
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b598      	push	{r3, r4, r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f000 fc74 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1c:	f000 f84e 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f000 fa1c 	bl	800135c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000f24:	f000 f8aa 	bl	800107c <MX_ADC3_Init>
  MX_TIM2_Init();
 8000f28:	f000 f8fa 	bl	8001120 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f2c:	f000 f95c 	bl	80011e8 <MX_TIM3_Init>
  MX_UART5_Init();
 8000f30:	f000 f9c0 	bl	80012b4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000f34:	f000 f9e8 	bl	8001308 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <main+0x90>)
 8000f3c:	f001 feca 	bl	8002cd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f40:	2104      	movs	r1, #4
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <main+0x90>)
 8000f44:	f001 fec6 	bl	8002cd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4817      	ldr	r0, [pc, #92]	; (8000fa8 <main+0x94>)
 8000f4c:	f001 fec2 	bl	8002cd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f50:	2104      	movs	r1, #4
 8000f52:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <main+0x94>)
 8000f54:	f001 febe 	bl	8002cd4 <HAL_TIM_PWM_Start>

	speed = 25;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <main+0x98>)
 8000f5a:	2219      	movs	r2, #25
 8000f5c:	601a      	str	r2, [r3, #0]
	speed = (speed / 100.0) * 500;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <main+0x98>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff faa0 	bl	80004a8 <__aeabi_i2d>
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <main+0x9c>)
 8000f6e:	f7ff fc2f 	bl	80007d0 <__aeabi_ddiv>
 8000f72:	4603      	mov	r3, r0
 8000f74:	460c      	mov	r4, r1
 8000f76:	4618      	mov	r0, r3
 8000f78:	4621      	mov	r1, r4
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <main+0xa0>)
 8000f80:	f7ff fafc 	bl	800057c <__aeabi_dmul>
 8000f84:	4603      	mov	r3, r0
 8000f86:	460c      	mov	r4, r1
 8000f88:	4618      	mov	r0, r3
 8000f8a:	4621      	mov	r1, r4
 8000f8c:	f7ff fd08 	bl	80009a0 <__aeabi_d2iz>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <main+0x98>)
 8000f94:	601a      	str	r2, [r3, #0]
	dir = FL;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <main+0xa4>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//	  BMS_update();
		//		drive_PWM();
		resetServos();
 8000f9c:	f7ff ff40 	bl	8000e20 <resetServos>
 8000fa0:	e7fc      	b.n	8000f9c <main+0x88>
 8000fa2:	bf00      	nop
 8000fa4:	20000138 	.word	0x20000138
 8000fa8:	20000028 	.word	0x20000028
 8000fac:	20000134 	.word	0x20000134
 8000fb0:	40590000 	.word	0x40590000
 8000fb4:	407f4000 	.word	0x407f4000
 8000fb8:	20000130 	.word	0x20000130

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b094      	sub	sp, #80	; 0x50
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	2234      	movs	r2, #52	; 0x34
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 ff48 	bl	8003e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <SystemClock_Config+0xb8>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a22      	ldr	r2, [pc, #136]	; (8001074 <SystemClock_Config+0xb8>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <SystemClock_Config+0xb8>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <SystemClock_Config+0xbc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <SystemClock_Config+0xbc>)
 800100a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <SystemClock_Config+0xbc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800101c:	2302      	movs	r3, #2
 800101e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001020:	2301      	movs	r3, #1
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001024:	2310      	movs	r3, #16
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001028:	2300      	movs	r3, #0
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fbc9 	bl	80027c8 <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800103c:	f000 f9ec 	bl	8001418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f001 f948 	bl	80022f0 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001066:	f000 f9d7 	bl	8001418 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	; 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_ADC3_Init+0x98>)
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <MX_ADC3_Init+0x9c>)
 8001092:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_ADC3_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_ADC3_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_ADC3_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_ADC3_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_ADC3_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_ADC3_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_ADC3_Init+0x98>)
 80010bc:	4a17      	ldr	r2, [pc, #92]	; (800111c <MX_ADC3_Init+0xa0>)
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_ADC3_Init+0x98>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_ADC3_Init+0x98>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_ADC3_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_ADC3_Init+0x98>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <MX_ADC3_Init+0x98>)
 80010dc:	f000 fc04 	bl	80018e8 <HAL_ADC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80010e6:	f000 f997 	bl	8001418 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010ea:	2305      	movs	r3, #5
 80010ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010f6:	463b      	mov	r3, r7
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <MX_ADC3_Init+0x98>)
 80010fc:	f000 fc38 	bl	8001970 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001106:	f000 f987 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200000a8 	.word	0x200000a8
 8001118:	40012200 	.word	0x40012200
 800111c:	0f000001 	.word	0x0f000001

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <MX_TIM2_Init+0xc4>)
 8001144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001148:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_TIM2_Init+0xc4>)
 800114c:	f240 321f 	movw	r2, #799	; 0x31f
 8001150:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_TIM2_Init+0xc4>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_TIM2_Init+0xc4>)
 800115a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800115e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_TIM2_Init+0xc4>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_TIM2_Init+0xc4>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800116c:	481d      	ldr	r0, [pc, #116]	; (80011e4 <MX_TIM2_Init+0xc4>)
 800116e:	f001 fd85 	bl	8002c7c <HAL_TIM_PWM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001178:	f000 f94e 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4619      	mov	r1, r3
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <MX_TIM2_Init+0xc4>)
 800118c:	f002 f91c 	bl	80033c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001196:	f000 f93f 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119a:	2360      	movs	r3, #96	; 0x60
 800119c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800119e:	23fa      	movs	r3, #250	; 0xfa
 80011a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_TIM2_Init+0xc4>)
 80011b2:	f001 fdcd 	bl	8002d50 <HAL_TIM_PWM_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011bc:	f000 f92c 	bl	8001418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2204      	movs	r2, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <MX_TIM2_Init+0xc4>)
 80011c8:	f001 fdc2 	bl	8002d50 <HAL_TIM_PWM_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80011d2:	f000 f921 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011d6:	4803      	ldr	r0, [pc, #12]	; (80011e4 <MX_TIM2_Init+0xc4>)
 80011d8:	f000 f9c8 	bl	800156c <HAL_TIM_MspPostInit>

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000138 	.word	0x20000138

080011e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ee:	f107 0320 	add.w	r3, r7, #32
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	615a      	str	r2, [r3, #20]
 8001208:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <MX_TIM3_Init+0xc4>)
 800120c:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <MX_TIM3_Init+0xc8>)
 800120e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_TIM3_Init+0xc4>)
 8001212:	f240 321f 	movw	r2, #799	; 0x31f
 8001216:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_TIM3_Init+0xc4>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <MX_TIM3_Init+0xc4>)
 8001220:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001224:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_TIM3_Init+0xc4>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_TIM3_Init+0xc4>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001232:	481e      	ldr	r0, [pc, #120]	; (80012ac <MX_TIM3_Init+0xc4>)
 8001234:	f001 fd22 	bl	8002c7c <HAL_TIM_PWM_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800123e:	f000 f8eb 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	4619      	mov	r1, r3
 8001250:	4816      	ldr	r0, [pc, #88]	; (80012ac <MX_TIM3_Init+0xc4>)
 8001252:	f002 f8b9 	bl	80033c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800125c:	f000 f8dc 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001260:	2360      	movs	r3, #96	; 0x60
 8001262:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 8001264:	23fa      	movs	r3, #250	; 0xfa
 8001266:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_TIM3_Init+0xc4>)
 8001278:	f001 fd6a 	bl	8002d50 <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001282:	f000 f8c9 	bl	8001418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2204      	movs	r2, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_TIM3_Init+0xc4>)
 800128e:	f001 fd5f 	bl	8002d50 <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001298:	f000 f8be 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <MX_TIM3_Init+0xc4>)
 800129e:	f000 f965 	bl	800156c <HAL_TIM_MspPostInit>

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000028 	.word	0x20000028
 80012b0:	40000400 	.word	0x40000400

080012b4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_UART5_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_UART5_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_UART5_Init+0x4c>)
 80012c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_UART5_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_UART5_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_UART5_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_UART5_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_UART5_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_UART5_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_UART5_Init+0x4c>)
 80012ec:	f002 f8e8 	bl	80034c0 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80012f6:	f000 f88f 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000068 	.word	0x20000068
 8001304:	40005000 	.word	0x40005000

08001308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_USART1_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 8001314:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 8001340:	f002 f8be 	bl	80034c0 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800134a:	f000 f865 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000f0 	.word	0x200000f0
 8001358:	40011000 	.word	0x40011000

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <MX_GPIO_Init+0xb4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a25      	ldr	r2, [pc, #148]	; (8001410 <MX_GPIO_Init+0xb4>)
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <MX_GPIO_Init+0xb4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_GPIO_Init+0xb4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <MX_GPIO_Init+0xb4>)
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_GPIO_Init+0xb4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_GPIO_Init+0xb4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <MX_GPIO_Init+0xb4>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_GPIO_Init+0xb4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_GPIO_Init+0xb4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <MX_GPIO_Init+0xb4>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_GPIO_Init+0xb4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80013e2:	2200      	movs	r2, #0
 80013e4:	217c      	movs	r1, #124	; 0x7c
 80013e6:	480b      	ldr	r0, [pc, #44]	; (8001414 <MX_GPIO_Init+0xb8>)
 80013e8:	f000 ff68 	bl	80022bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80013ec:	237c      	movs	r3, #124	; 0x7c
 80013ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_GPIO_Init+0xb8>)
 8001404:	f000 fdc8 	bl	8001f98 <HAL_GPIO_Init>

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40021000 	.word	0x40021000

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_MspInit+0x4c>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x4c>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_ADC_MspInit+0x7c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d127      	bne.n	80014ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF7     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d6:	2303      	movs	r3, #3
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_ADC_MspInit+0x84>)
 80014e6:	f000 fd57 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40012200 	.word	0x40012200
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40021400 	.word	0x40021400

08001500 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001510:	d10e      	bne.n	8001530 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_TIM_PWM_MspInit+0x64>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_TIM_PWM_MspInit+0x64>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_TIM_PWM_MspInit+0x64>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800152e:	e012      	b.n	8001556 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0c      	ldr	r2, [pc, #48]	; (8001568 <HAL_TIM_PWM_MspInit+0x68>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10d      	bne.n	8001556 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_TIM_PWM_MspInit+0x64>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_TIM_PWM_MspInit+0x64>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_TIM_PWM_MspInit+0x64>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40000400 	.word	0x40000400

0800156c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800158c:	d11f      	bne.n	80015ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_TIM_MspPostInit+0xb0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <HAL_TIM_MspPostInit+0xb0>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <HAL_TIM_MspPostInit+0xb0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015bc:	2301      	movs	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4816      	ldr	r0, [pc, #88]	; (8001620 <HAL_TIM_MspPostInit+0xb4>)
 80015c8:	f000 fce6 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015cc:	e022      	b.n	8001614 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <HAL_TIM_MspPostInit+0xb8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d11d      	bne.n	8001614 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_TIM_MspPostInit+0xb0>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_TIM_MspPostInit+0xb0>)
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_TIM_MspPostInit+0xb0>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015f4:	2330      	movs	r3, #48	; 0x30
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001604:	2302      	movs	r3, #2
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4804      	ldr	r0, [pc, #16]	; (8001620 <HAL_TIM_MspPostInit+0xb4>)
 8001610:	f000 fcc2 	bl	8001f98 <HAL_GPIO_Init>
}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40020400 	.word	0x40020400
 8001624:	40000400 	.word	0x40000400

08001628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a33      	ldr	r2, [pc, #204]	; (8001714 <HAL_UART_MspInit+0xec>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12d      	bne.n	80016a6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HAL_UART_MspInit+0xf0>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a31      	ldr	r2, [pc, #196]	; (8001718 <HAL_UART_MspInit+0xf0>)
 8001654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_UART_MspInit+0xf0>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_UART_MspInit+0xf0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a2a      	ldr	r2, [pc, #168]	; (8001718 <HAL_UART_MspInit+0xf0>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <HAL_UART_MspInit+0xf0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PE7     ------> UART5_RX
    PE8     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001682:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168c:	2301      	movs	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001694:	2308      	movs	r3, #8
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	481f      	ldr	r0, [pc, #124]	; (800171c <HAL_UART_MspInit+0xf4>)
 80016a0:	f000 fc7a 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016a4:	e031      	b.n	800170a <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <HAL_UART_MspInit+0xf8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d12c      	bne.n	800170a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_UART_MspInit+0xf0>)
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_UART_MspInit+0xf0>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6453      	str	r3, [r2, #68]	; 0x44
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_UART_MspInit+0xf0>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_UART_MspInit+0xf0>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_UART_MspInit+0xf0>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6313      	str	r3, [r2, #48]	; 0x30
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_UART_MspInit+0xf0>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016fa:	2307      	movs	r3, #7
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4619      	mov	r1, r3
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <HAL_UART_MspInit+0xfc>)
 8001706:	f000 fc47 	bl	8001f98 <HAL_GPIO_Init>
}
 800170a:	bf00      	nop
 800170c:	3730      	adds	r7, #48	; 0x30
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40005000 	.word	0x40005000
 8001718:	40023800 	.word	0x40023800
 800171c:	40021000 	.word	0x40021000
 8001720:	40011000 	.word	0x40011000
 8001724:	40020000 	.word	0x40020000

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler+0x4>

0800174e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177c:	f000 f894 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <SystemInit+0x28>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <SystemInit+0x28>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SystemInit+0x28>)
 800179a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800179e:	609a      	str	r2, [r3, #8]
#endif
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017b6:	e003      	b.n	80017c0 <LoopCopyDataInit>

080017b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017be:	3104      	adds	r1, #4

080017c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017c0:	480b      	ldr	r0, [pc, #44]	; (80017f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017c8:	d3f6      	bcc.n	80017b8 <CopyDataInit>
  ldr  r2, =_sbss
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017cc:	e002      	b.n	80017d4 <LoopFillZerobss>

080017ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017d0:	f842 3b04 	str.w	r3, [r2], #4

080017d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017d8:	d3f9      	bcc.n	80017ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017da:	f7ff ffd3 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017de:	f002 fb1b 	bl	8003e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e2:	f7ff fb97 	bl	8000f14 <main>
  bx  lr    
 80017e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017ec:	08003eb0 	.word	0x08003eb0
  ldr  r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017f4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80017f8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80017fc:	2000017c 	.word	0x2000017c

08001800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC_IRQHandler>
	...

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <HAL_Init+0x40>)
 800180e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_Init+0x40>)
 800181a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_Init+0x40>)
 8001826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 fb7f 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	2000      	movs	r0, #0
 8001834:	f000 f808 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff fdf6 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023c00 	.word	0x40023c00

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x54>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x58>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fb89 	bl	8001f7e <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d80a      	bhi.n	8001892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f000 fb5f 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_InitTick+0x5c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000178 	.word	0x20000178

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000178 	.word	0x20000178

080018e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e033      	b.n	8001966 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fdb6 	bl	8001478 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	d118      	bne.n	8001958 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800192e:	f023 0302 	bic.w	r3, r3, #2
 8001932:	f043 0202 	orr.w	r2, r3, #2
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f94a 	bl	8001bd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f023 0303 	bic.w	r3, r3, #3
 800194e:	f043 0201 	orr.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
 8001956:	e001      	b.n	800195c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1c>
 8001988:	2302      	movs	r3, #2
 800198a:	e113      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x244>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b09      	cmp	r3, #9
 800199a:	d925      	bls.n	80019e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68d9      	ldr	r1, [r3, #12]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	3b1e      	subs	r3, #30
 80019b2:	2207      	movs	r2, #7
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43da      	mvns	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	400a      	ands	r2, r1
 80019c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68d9      	ldr	r1, [r3, #12]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4403      	add	r3, r0
 80019da:	3b1e      	subs	r3, #30
 80019dc:	409a      	lsls	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	e022      	b.n	8001a2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6919      	ldr	r1, [r3, #16]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	2207      	movs	r2, #7
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	400a      	ands	r2, r1
 8001a0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6919      	ldr	r1, [r3, #16]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4403      	add	r3, r0
 8001a24:	409a      	lsls	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d824      	bhi.n	8001a80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3b05      	subs	r3, #5
 8001a48:	221f      	movs	r2, #31
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	400a      	ands	r2, r1
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	3b05      	subs	r3, #5
 8001a72:	fa00 f203 	lsl.w	r2, r0, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a7e:	e04c      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d824      	bhi.n	8001ad2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b23      	subs	r3, #35	; 0x23
 8001a9a:	221f      	movs	r2, #31
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b23      	subs	r3, #35	; 0x23
 8001ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad0:	e023      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3b41      	subs	r3, #65	; 0x41
 8001ae4:	221f      	movs	r2, #31
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	400a      	ands	r2, r1
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b41      	subs	r3, #65	; 0x41
 8001b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_ADC_ConfigChannel+0x250>)
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <HAL_ADC_ConfigChannel+0x254>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d10f      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1d8>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b12      	cmp	r3, #18
 8001b2e:	d10b      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_ADC_ConfigChannel+0x254>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d12b      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x23a>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <HAL_ADC_ConfigChannel+0x258>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <HAL_ADC_ConfigChannel+0x1f4>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b11      	cmp	r3, #17
 8001b62:	d122      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <HAL_ADC_ConfigChannel+0x258>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d111      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_ADC_ConfigChannel+0x25c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <HAL_ADC_ConfigChannel+0x260>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0c9a      	lsrs	r2, r3, #18
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40012300 	.word	0x40012300
 8001bc4:	40012000 	.word	0x40012000
 8001bc8:	10000012 	.word	0x10000012
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	431bde83 	.word	0x431bde83

08001bd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bdc:	4b79      	ldr	r3, [pc, #484]	; (8001dc4 <ADC_Init+0x1f0>)
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	021a      	lsls	r2, r3, #8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6899      	ldr	r1, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <ADC_Init+0x1f4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d022      	beq.n	8001cb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6899      	ldr	r1, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	e00f      	b.n	8001cd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0202 	bic.w	r2, r2, #2
 8001ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6899      	ldr	r1, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7e1b      	ldrb	r3, [r3, #24]
 8001cec:	005a      	lsls	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	035a      	lsls	r2, r3, #13
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	e007      	b.n	8001d48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	051a      	lsls	r2, r3, #20
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6899      	ldr	r1, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d8a:	025a      	lsls	r2, r3, #9
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6899      	ldr	r1, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	029a      	lsls	r2, r3, #10
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	609a      	str	r2, [r3, #8]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40012300 	.word	0x40012300
 8001dc8:	0f000001 	.word	0x0f000001

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff47 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff5c 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffb0 	bl	8001eec <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e165      	b.n	8002280 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f040 8154 	bne.w	800227a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_GPIO_Init+0x5a>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d007      	beq.n	8001ff2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fe6:	2b11      	cmp	r3, #17
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b12      	cmp	r3, #18
 8001ff0:	d130      	bne.n	8002054 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 0201 	and.w	r2, r3, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0xfc>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b12      	cmp	r3, #18
 8002092:	d123      	bne.n	80020dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80ae 	beq.w	800227a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <HAL_GPIO_Init+0x2fc>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4a5b      	ldr	r2, [pc, #364]	; (8002294 <HAL_GPIO_Init+0x2fc>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_GPIO_Init+0x2fc>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213a:	4a57      	ldr	r2, [pc, #348]	; (8002298 <HAL_GPIO_Init+0x300>)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	3302      	adds	r3, #2
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4e      	ldr	r2, [pc, #312]	; (800229c <HAL_GPIO_Init+0x304>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_Init+0x21a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4d      	ldr	r2, [pc, #308]	; (80022a0 <HAL_GPIO_Init+0x308>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x216>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4c      	ldr	r2, [pc, #304]	; (80022a4 <HAL_GPIO_Init+0x30c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x212>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4b      	ldr	r2, [pc, #300]	; (80022a8 <HAL_GPIO_Init+0x310>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x20e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4a      	ldr	r2, [pc, #296]	; (80022ac <HAL_GPIO_Init+0x314>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x20a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a49      	ldr	r2, [pc, #292]	; (80022b0 <HAL_GPIO_Init+0x318>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x206>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_GPIO_Init+0x31c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x202>
 8002196:	2306      	movs	r3, #6
 8002198:	e00c      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 800219a:	2307      	movs	r3, #7
 800219c:	e00a      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 800219e:	2305      	movs	r3, #5
 80021a0:	e008      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 80021a2:	2304      	movs	r3, #4
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 80021a6:	2303      	movs	r3, #3
 80021a8:	e004      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 80021b2:	2300      	movs	r3, #0
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4093      	lsls	r3, r2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c4:	4934      	ldr	r1, [pc, #208]	; (8002298 <HAL_GPIO_Init+0x300>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d2:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <HAL_GPIO_Init+0x320>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f6:	4a30      	ldr	r2, [pc, #192]	; (80022b8 <HAL_GPIO_Init+0x320>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_GPIO_Init+0x320>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002220:	4a25      	ldr	r2, [pc, #148]	; (80022b8 <HAL_GPIO_Init+0x320>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_GPIO_Init+0x320>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800224a:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_GPIO_Init+0x320>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_GPIO_Init+0x320>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002274:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_GPIO_Init+0x320>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	f67f ae96 	bls.w	8001fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002288:	bf00      	nop
 800228a:	3724      	adds	r7, #36	; 0x24
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40023800 	.word	0x40023800
 8002298:	40013800 	.word	0x40013800
 800229c:	40020000 	.word	0x40020000
 80022a0:	40020400 	.word	0x40020400
 80022a4:	40020800 	.word	0x40020800
 80022a8:	40020c00 	.word	0x40020c00
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40021400 	.word	0x40021400
 80022b4:	40021800 	.word	0x40021800
 80022b8:	40013c00 	.word	0x40013c00

080022bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
 80022c8:	4613      	mov	r3, r2
 80022ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022cc:	787b      	ldrb	r3, [r7, #1]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d8:	e003      	b.n	80022e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022da:	887b      	ldrh	r3, [r7, #2]
 80022dc:	041a      	lsls	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	619a      	str	r2, [r3, #24]
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0cc      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d90c      	bls.n	800232c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b65      	ldr	r3, [pc, #404]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b8      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d044      	beq.n	8002410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d119      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e067      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4934      	ldr	r1, [pc, #208]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e0:	f7ff fa76 	bl	80018d0 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7ff fa72 	bl	80018d0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e04f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d20c      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e032      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4916      	ldr	r1, [pc, #88]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002476:	f000 f855 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 800247a:	4601      	mov	r1, r0
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	5cd3      	ldrb	r3, [r2, r3]
 800248a:	fa21 f303 	lsr.w	r3, r1, r3
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff f9d6 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08003e88 	.word	0x08003e88
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000004 	.word	0x20000004

080024bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000000 	.word	0x20000000

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024d8:	f7ff fff0 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 80024dc:	4601      	mov	r1, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0a9b      	lsrs	r3, r3, #10
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	08003e98 	.word	0x08003e98

080024fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002500:	f7ff ffdc 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8002504:	4601      	mov	r1, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0b5b      	lsrs	r3, r3, #13
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4a03      	ldr	r2, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	08003e98 	.word	0x08003e98

08002524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253e:	4b9f      	ldr	r3, [pc, #636]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b0c      	cmp	r3, #12
 8002548:	f200 8130 	bhi.w	80027ac <HAL_RCC_GetSysClockFreq+0x288>
 800254c:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <HAL_RCC_GetSysClockFreq+0x30>)
 800254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002552:	bf00      	nop
 8002554:	08002589 	.word	0x08002589
 8002558:	080027ad 	.word	0x080027ad
 800255c:	080027ad 	.word	0x080027ad
 8002560:	080027ad 	.word	0x080027ad
 8002564:	0800258f 	.word	0x0800258f
 8002568:	080027ad 	.word	0x080027ad
 800256c:	080027ad 	.word	0x080027ad
 8002570:	080027ad 	.word	0x080027ad
 8002574:	08002595 	.word	0x08002595
 8002578:	080027ad 	.word	0x080027ad
 800257c:	080027ad 	.word	0x080027ad
 8002580:	080027ad 	.word	0x080027ad
 8002584:	080026a3 	.word	0x080026a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002588:	4b8d      	ldr	r3, [pc, #564]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x29c>)
 800258a:	613b      	str	r3, [r7, #16]
       break;
 800258c:	e111      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800258e:	4b8d      	ldr	r3, [pc, #564]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002590:	613b      	str	r3, [r7, #16]
      break;
 8002592:	e10e      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002594:	4b89      	ldr	r3, [pc, #548]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800259c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259e:	4b87      	ldr	r3, [pc, #540]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d023      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025aa:	4b84      	ldr	r3, [pc, #528]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	f04f 0400 	mov.w	r4, #0
 80025b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	ea03 0501 	and.w	r5, r3, r1
 80025c0:	ea04 0602 	and.w	r6, r4, r2
 80025c4:	4a7f      	ldr	r2, [pc, #508]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80025c6:	fb02 f106 	mul.w	r1, r2, r6
 80025ca:	2200      	movs	r2, #0
 80025cc:	fb02 f205 	mul.w	r2, r2, r5
 80025d0:	440a      	add	r2, r1
 80025d2:	497c      	ldr	r1, [pc, #496]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80025d4:	fba5 0101 	umull	r0, r1, r5, r1
 80025d8:	1853      	adds	r3, r2, r1
 80025da:	4619      	mov	r1, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f04f 0400 	mov.w	r4, #0
 80025e2:	461a      	mov	r2, r3
 80025e4:	4623      	mov	r3, r4
 80025e6:	f7fe fa03 	bl	80009f0 <__aeabi_uldivmod>
 80025ea:	4603      	mov	r3, r0
 80025ec:	460c      	mov	r4, r1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e049      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f2:	4b72      	ldr	r3, [pc, #456]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	f04f 0400 	mov.w	r4, #0
 80025fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	ea03 0501 	and.w	r5, r3, r1
 8002608:	ea04 0602 	and.w	r6, r4, r2
 800260c:	4629      	mov	r1, r5
 800260e:	4632      	mov	r2, r6
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	f04f 0400 	mov.w	r4, #0
 8002618:	0154      	lsls	r4, r2, #5
 800261a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800261e:	014b      	lsls	r3, r1, #5
 8002620:	4619      	mov	r1, r3
 8002622:	4622      	mov	r2, r4
 8002624:	1b49      	subs	r1, r1, r5
 8002626:	eb62 0206 	sbc.w	r2, r2, r6
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	f04f 0400 	mov.w	r4, #0
 8002632:	0194      	lsls	r4, r2, #6
 8002634:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002638:	018b      	lsls	r3, r1, #6
 800263a:	1a5b      	subs	r3, r3, r1
 800263c:	eb64 0402 	sbc.w	r4, r4, r2
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	00e2      	lsls	r2, r4, #3
 800264a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800264e:	00d9      	lsls	r1, r3, #3
 8002650:	460b      	mov	r3, r1
 8002652:	4614      	mov	r4, r2
 8002654:	195b      	adds	r3, r3, r5
 8002656:	eb44 0406 	adc.w	r4, r4, r6
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	02a2      	lsls	r2, r4, #10
 8002664:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002668:	0299      	lsls	r1, r3, #10
 800266a:	460b      	mov	r3, r1
 800266c:	4614      	mov	r4, r2
 800266e:	4618      	mov	r0, r3
 8002670:	4621      	mov	r1, r4
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f04f 0400 	mov.w	r4, #0
 8002678:	461a      	mov	r2, r3
 800267a:	4623      	mov	r3, r4
 800267c:	f7fe f9b8 	bl	80009f0 <__aeabi_uldivmod>
 8002680:	4603      	mov	r3, r0
 8002682:	460c      	mov	r4, r1
 8002684:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002686:	4b4d      	ldr	r3, [pc, #308]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	0c1b      	lsrs	r3, r3, #16
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	3301      	adds	r3, #1
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	613b      	str	r3, [r7, #16]
      break;
 80026a0:	e087      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a2:	4b46      	ldr	r3, [pc, #280]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026aa:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ac:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d023      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b8:	4b40      	ldr	r3, [pc, #256]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	f04f 0400 	mov.w	r4, #0
 80026c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	ea03 0501 	and.w	r5, r3, r1
 80026ce:	ea04 0602 	and.w	r6, r4, r2
 80026d2:	4a3c      	ldr	r2, [pc, #240]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80026d4:	fb02 f106 	mul.w	r1, r2, r6
 80026d8:	2200      	movs	r2, #0
 80026da:	fb02 f205 	mul.w	r2, r2, r5
 80026de:	440a      	add	r2, r1
 80026e0:	4938      	ldr	r1, [pc, #224]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80026e2:	fba5 0101 	umull	r0, r1, r5, r1
 80026e6:	1853      	adds	r3, r2, r1
 80026e8:	4619      	mov	r1, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f04f 0400 	mov.w	r4, #0
 80026f0:	461a      	mov	r2, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	f7fe f97c 	bl	80009f0 <__aeabi_uldivmod>
 80026f8:	4603      	mov	r3, r0
 80026fa:	460c      	mov	r4, r1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e049      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002700:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	f04f 0400 	mov.w	r4, #0
 800270a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	ea03 0501 	and.w	r5, r3, r1
 8002716:	ea04 0602 	and.w	r6, r4, r2
 800271a:	4629      	mov	r1, r5
 800271c:	4632      	mov	r2, r6
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	f04f 0400 	mov.w	r4, #0
 8002726:	0154      	lsls	r4, r2, #5
 8002728:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800272c:	014b      	lsls	r3, r1, #5
 800272e:	4619      	mov	r1, r3
 8002730:	4622      	mov	r2, r4
 8002732:	1b49      	subs	r1, r1, r5
 8002734:	eb62 0206 	sbc.w	r2, r2, r6
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	f04f 0400 	mov.w	r4, #0
 8002740:	0194      	lsls	r4, r2, #6
 8002742:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002746:	018b      	lsls	r3, r1, #6
 8002748:	1a5b      	subs	r3, r3, r1
 800274a:	eb64 0402 	sbc.w	r4, r4, r2
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	00e2      	lsls	r2, r4, #3
 8002758:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800275c:	00d9      	lsls	r1, r3, #3
 800275e:	460b      	mov	r3, r1
 8002760:	4614      	mov	r4, r2
 8002762:	195b      	adds	r3, r3, r5
 8002764:	eb44 0406 	adc.w	r4, r4, r6
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	02a2      	lsls	r2, r4, #10
 8002772:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002776:	0299      	lsls	r1, r3, #10
 8002778:	460b      	mov	r3, r1
 800277a:	4614      	mov	r4, r2
 800277c:	4618      	mov	r0, r3
 800277e:	4621      	mov	r1, r4
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f04f 0400 	mov.w	r4, #0
 8002786:	461a      	mov	r2, r3
 8002788:	4623      	mov	r3, r4
 800278a:	f7fe f931 	bl	80009f0 <__aeabi_uldivmod>
 800278e:	4603      	mov	r3, r0
 8002790:	460c      	mov	r4, r1
 8002792:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_GetSysClockFreq+0x298>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0f1b      	lsrs	r3, r3, #28
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	613b      	str	r3, [r7, #16]
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x29c>)
 80027ae:	613b      	str	r3, [r7, #16]
      break;
 80027b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b2:	693b      	ldr	r3, [r7, #16]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	00f42400 	.word	0x00f42400
 80027c4:	017d7840 	.word	0x017d7840

080027c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8083 	beq.w	80028e8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027e2:	4b95      	ldr	r3, [pc, #596]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d019      	beq.n	8002822 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027ee:	4b92      	ldr	r3, [pc, #584]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027fa:	4b8f      	ldr	r3, [pc, #572]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002806:	d00c      	beq.n	8002822 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002808:	4b8b      	ldr	r3, [pc, #556]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d112      	bne.n	800283a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002814:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002820:	d10b      	bne.n	800283a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002822:	4b85      	ldr	r3, [pc, #532]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d05b      	beq.n	80028e6 <HAL_RCC_OscConfig+0x11e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d157      	bne.n	80028e6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e216      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x8a>
 8002844:	4b7c      	ldr	r3, [pc, #496]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a7b      	ldr	r2, [pc, #492]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	e01d      	b.n	800288e <HAL_RCC_OscConfig+0xc6>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800285a:	d10c      	bne.n	8002876 <HAL_RCC_OscConfig+0xae>
 800285c:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a75      	ldr	r2, [pc, #468]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b73      	ldr	r3, [pc, #460]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a72      	ldr	r2, [pc, #456]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e00b      	b.n	800288e <HAL_RCC_OscConfig+0xc6>
 8002876:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6f      	ldr	r2, [pc, #444]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6c      	ldr	r2, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d013      	beq.n	80028be <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7ff f81b 	bl	80018d0 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289e:	f7ff f817 	bl	80018d0 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	; 0x64
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e1db      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b0:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0xd6>
 80028bc:	e014      	b.n	80028e8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7ff f807 	bl	80018d0 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c6:	f7ff f803 	bl	80018d0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	; 0x64
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1c7      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d8:	4b57      	ldr	r3, [pc, #348]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0xfe>
 80028e4:	e000      	b.n	80028e8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d06f      	beq.n	80029d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028f4:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d017      	beq.n	8002930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002900:	4b4d      	ldr	r3, [pc, #308]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002908:	2b08      	cmp	r3, #8
 800290a:	d105      	bne.n	8002918 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800290c:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002918:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d11c      	bne.n	800295e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002924:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d116      	bne.n	800295e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002930:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_OscConfig+0x180>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e18f      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4938      	ldr	r1, [pc, #224]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295c:	e03a      	b.n	80029d4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d020      	beq.n	80029a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002966:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <HAL_RCC_OscConfig+0x274>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe ffb0 	bl	80018d0 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe ffac 	bl	80018d0 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e170      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002986:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002992:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4925      	ldr	r1, [pc, #148]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
 80029a6:	e015      	b.n	80029d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a8:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_RCC_OscConfig+0x274>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe ff8f 	bl	80018d0 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b6:	f7fe ff8b 	bl	80018d0 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e14f      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d037      	beq.n	8002a50 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d016      	beq.n	8002a16 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e8:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_RCC_OscConfig+0x278>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fe ff6f 	bl	80018d0 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f6:	f7fe ff6b 	bl	80018d0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e12f      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x22e>
 8002a14:	e01c      	b.n	8002a50 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_RCC_OscConfig+0x278>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe ff58 	bl	80018d0 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a22:	e00f      	b.n	8002a44 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a24:	f7fe ff54 	bl	80018d0 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d908      	bls.n	8002a44 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e118      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470000 	.word	0x42470000
 8002a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	4b8a      	ldr	r3, [pc, #552]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e9      	bne.n	8002a24 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8097 	beq.w	8002b8c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a62:	4b83      	ldr	r3, [pc, #524]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b7f      	ldr	r3, [pc, #508]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a7e      	ldr	r2, [pc, #504]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	4b79      	ldr	r3, [pc, #484]	; (8002c74 <HAL_RCC_OscConfig+0x4ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d118      	bne.n	8002acc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9a:	4b76      	ldr	r3, [pc, #472]	; (8002c74 <HAL_RCC_OscConfig+0x4ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a75      	ldr	r2, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x4ac>)
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe ff13 	bl	80018d0 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7fe ff0f 	bl	80018d0 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e0d3      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	4b6c      	ldr	r3, [pc, #432]	; (8002c74 <HAL_RCC_OscConfig+0x4ac>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x31a>
 8002ad4:	4b66      	ldr	r3, [pc, #408]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a65      	ldr	r2, [pc, #404]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x354>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x33c>
 8002aea:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a60      	ldr	r2, [pc, #384]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0x354>
 8002b04:	4b5a      	ldr	r3, [pc, #360]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a59      	ldr	r2, [pc, #356]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	4b57      	ldr	r3, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a56      	ldr	r2, [pc, #344]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe fed4 	bl	80018d0 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fed0 	bl	80018d0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e092      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b42:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0ee      	beq.n	8002b2c <HAL_RCC_OscConfig+0x364>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe febe 	bl	80018d0 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe feba 	bl	80018d0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e07c      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6e:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ee      	bne.n	8002b58 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a3a      	ldr	r2, [pc, #232]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d068      	beq.n	8002c66 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d060      	beq.n	8002c62 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d145      	bne.n	8002c34 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_RCC_OscConfig+0x4b0>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe fe8f 	bl	80018d0 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe fe8b 	bl	80018d0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e04f      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc8:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	019b      	lsls	r3, r3, #6
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	071b      	lsls	r3, r3, #28
 8002c00:	491b      	ldr	r1, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <HAL_RCC_OscConfig+0x4b0>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fe60 	bl	80018d0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fe5c 	bl	80018d0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e020      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x44c>
 8002c32:	e018      	b.n	8002c66 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCC_OscConfig+0x4b0>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fe49 	bl	80018d0 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe fe45 	bl	80018d0 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e009      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x4a8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x47a>
 8002c60:	e001      	b.n	8002c66 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000
 8002c78:	42470060 	.word	0x42470060

08002c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e01d      	b.n	8002cca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fc2c 	bl	8001500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 f90e 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	6839      	ldr	r1, [r7, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fb48 	bl	800337c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_TIM_PWM_Start+0x74>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_TIM_PWM_Start+0x2c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_TIM_PWM_Start+0x78>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_TIM_PWM_Start+0x30>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_TIM_PWM_Start+0x32>
 8002d04:	2300      	movs	r3, #0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d007      	beq.n	8002d3c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40010400 	.word	0x40010400

08002d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e0b4      	b.n	8002ed4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	f200 809f 	bhi.w	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d82:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002dbd 	.word	0x08002dbd
 8002d8c:	08002ec1 	.word	0x08002ec1
 8002d90:	08002ec1 	.word	0x08002ec1
 8002d94:	08002ec1 	.word	0x08002ec1
 8002d98:	08002dfd 	.word	0x08002dfd
 8002d9c:	08002ec1 	.word	0x08002ec1
 8002da0:	08002ec1 	.word	0x08002ec1
 8002da4:	08002ec1 	.word	0x08002ec1
 8002da8:	08002e3f 	.word	0x08002e3f
 8002dac:	08002ec1 	.word	0x08002ec1
 8002db0:	08002ec1 	.word	0x08002ec1
 8002db4:	08002ec1 	.word	0x08002ec1
 8002db8:	08002e7f 	.word	0x08002e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f92a 	bl	800301c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0208 	orr.w	r2, r2, #8
 8002dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6999      	ldr	r1, [r3, #24]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	619a      	str	r2, [r3, #24]
      break;
 8002dfa:	e062      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f97a 	bl	80030fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6999      	ldr	r1, [r3, #24]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	021a      	lsls	r2, r3, #8
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	619a      	str	r2, [r3, #24]
      break;
 8002e3c:	e041      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f9cf 	bl	80031e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0208 	orr.w	r2, r2, #8
 8002e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0204 	bic.w	r2, r2, #4
 8002e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69d9      	ldr	r1, [r3, #28]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	61da      	str	r2, [r3, #28]
      break;
 8002e7c:	e021      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fa23 	bl	80032d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69d9      	ldr	r1, [r3, #28]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	021a      	lsls	r2, r3, #8
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	61da      	str	r2, [r3, #28]
      break;
 8002ebe:	e000      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ec0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a40      	ldr	r2, [pc, #256]	; (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efa:	d00f      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3d      	ldr	r2, [pc, #244]	; (8002ff4 <TIM_Base_SetConfig+0x118>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3c      	ldr	r2, [pc, #240]	; (8002ff8 <TIM_Base_SetConfig+0x11c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <TIM_Base_SetConfig+0x120>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3a      	ldr	r2, [pc, #232]	; (8003000 <TIM_Base_SetConfig+0x124>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d108      	bne.n	8002f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2f      	ldr	r2, [pc, #188]	; (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d02b      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d027      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2c      	ldr	r2, [pc, #176]	; (8002ff4 <TIM_Base_SetConfig+0x118>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d023      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <TIM_Base_SetConfig+0x11c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01f      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <TIM_Base_SetConfig+0x120>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01b      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a29      	ldr	r2, [pc, #164]	; (8003000 <TIM_Base_SetConfig+0x124>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d017      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a28      	ldr	r2, [pc, #160]	; (8003004 <TIM_Base_SetConfig+0x128>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <TIM_Base_SetConfig+0x12c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00f      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a26      	ldr	r2, [pc, #152]	; (800300c <TIM_Base_SetConfig+0x130>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a25      	ldr	r2, [pc, #148]	; (8003010 <TIM_Base_SetConfig+0x134>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a24      	ldr	r2, [pc, #144]	; (8003014 <TIM_Base_SetConfig+0x138>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a23      	ldr	r2, [pc, #140]	; (8003018 <TIM_Base_SetConfig+0x13c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0xf8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <TIM_Base_SetConfig+0x124>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	615a      	str	r2, [r3, #20]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40010400 	.word	0x40010400
 8003004:	40014000 	.word	0x40014000
 8003008:	40014400 	.word	0x40014400
 800300c:	40014800 	.word	0x40014800
 8003010:	40001800 	.word	0x40001800
 8003014:	40001c00 	.word	0x40001c00
 8003018:	40002000 	.word	0x40002000

0800301c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0303 	bic.w	r3, r3, #3
 8003052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f023 0302 	bic.w	r3, r3, #2
 8003064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <TIM_OC1_SetConfig+0xd8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_OC1_SetConfig+0x64>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <TIM_OC1_SetConfig+0xdc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10c      	bne.n	800309a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0308 	bic.w	r3, r3, #8
 8003086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <TIM_OC1_SetConfig+0xd8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_OC1_SetConfig+0x8e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <TIM_OC1_SetConfig+0xdc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d111      	bne.n	80030ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	621a      	str	r2, [r3, #32]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40010400 	.word	0x40010400

080030fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0210 	bic.w	r2, r3, #16
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0320 	bic.w	r3, r3, #32
 8003146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <TIM_OC2_SetConfig+0xe4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_OC2_SetConfig+0x68>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a21      	ldr	r2, [pc, #132]	; (80031e4 <TIM_OC2_SetConfig+0xe8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d10d      	bne.n	8003180 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800316a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a17      	ldr	r2, [pc, #92]	; (80031e0 <TIM_OC2_SetConfig+0xe4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_OC2_SetConfig+0x94>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <TIM_OC2_SetConfig+0xe8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d113      	bne.n	80031b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800319e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40010000 	.word	0x40010000
 80031e4:	40010400 	.word	0x40010400

080031e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0303 	bic.w	r3, r3, #3
 800321e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <TIM_OC3_SetConfig+0xe0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d003      	beq.n	800324e <TIM_OC3_SetConfig+0x66>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a20      	ldr	r2, [pc, #128]	; (80032cc <TIM_OC3_SetConfig+0xe4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10d      	bne.n	800326a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <TIM_OC3_SetConfig+0xe0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <TIM_OC3_SetConfig+0x92>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <TIM_OC3_SetConfig+0xe4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d113      	bne.n	80032a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	621a      	str	r2, [r3, #32]
}
 80032bc:	bf00      	nop
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40010400 	.word	0x40010400

080032d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800331a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	031b      	lsls	r3, r3, #12
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a12      	ldr	r2, [pc, #72]	; (8003374 <TIM_OC4_SetConfig+0xa4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_OC4_SetConfig+0x68>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a11      	ldr	r2, [pc, #68]	; (8003378 <TIM_OC4_SetConfig+0xa8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d109      	bne.n	800334c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800333e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40010400 	.word	0x40010400

0800337c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	2201      	movs	r2, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	43db      	mvns	r3, r3
 800339e:	401a      	ands	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033dc:	2302      	movs	r3, #2
 80033de:	e05a      	b.n	8003496 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d022      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d01d      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d018      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1b      	ldr	r2, [pc, #108]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a17      	ldr	r2, [pc, #92]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a15      	ldr	r2, [pc, #84]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10c      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4313      	orrs	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40010000 	.word	0x40010000
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800
 80034b0:	40000c00 	.word	0x40000c00
 80034b4:	40010400 	.word	0x40010400
 80034b8:	40014000 	.word	0x40014000
 80034bc:	40001800 	.word	0x40001800

080034c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e03f      	b.n	8003552 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe f89e 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2224      	movs	r2, #36	; 0x24
 80034f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f90b 	bl	8003720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b088      	sub	sp, #32
 800355e:	af02      	add	r7, sp, #8
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b20      	cmp	r3, #32
 8003578:	f040 8083 	bne.w	8003682 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_UART_Transmit+0x2e>
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e07b      	b.n	8003684 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_UART_Transmit+0x40>
 8003596:	2302      	movs	r3, #2
 8003598:	e074      	b.n	8003684 <HAL_UART_Transmit+0x12a>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2221      	movs	r2, #33	; 0x21
 80035ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035b0:	f7fe f98e 	bl	80018d0 <HAL_GetTick>
 80035b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80035ca:	e042      	b.n	8003652 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	d122      	bne.n	800362a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f84c 	bl	800368c <UART_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e042      	b.n	8003684 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003610:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	3302      	adds	r3, #2
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	e017      	b.n	8003652 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3301      	adds	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	e013      	b.n	8003652 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2200      	movs	r2, #0
 8003632:	2180      	movs	r1, #128	; 0x80
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f829 	bl	800368c <UART_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e01f      	b.n	8003684 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	60ba      	str	r2, [r7, #8]
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1b7      	bne.n	80035cc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2200      	movs	r2, #0
 8003664:	2140      	movs	r1, #64	; 0x40
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f810 	bl	800368c <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e006      	b.n	8003684 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
  }
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369c:	e02c      	b.n	80036f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d028      	beq.n	80036f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <UART_WaitOnFlagUntilTimeout+0x30>
 80036ac:	f7fe f910 	bl	80018d0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d21d      	bcs.n	80036f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e00f      	b.n	8003718 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	429a      	cmp	r2, r3
 8003714:	d0c3      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003762:	f023 030c 	bic.w	r3, r3, #12
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	430b      	orrs	r3, r1
 800376e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378e:	f040 818b 	bne.w	8003aa8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4ac1      	ldr	r2, [pc, #772]	; (8003a9c <UART_SetConfig+0x37c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d005      	beq.n	80037a8 <UART_SetConfig+0x88>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4abf      	ldr	r2, [pc, #764]	; (8003aa0 <UART_SetConfig+0x380>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	f040 80bd 	bne.w	8003922 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037a8:	f7fe fea8 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 80037ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	461d      	mov	r5, r3
 80037b2:	f04f 0600 	mov.w	r6, #0
 80037b6:	46a8      	mov	r8, r5
 80037b8:	46b1      	mov	r9, r6
 80037ba:	eb18 0308 	adds.w	r3, r8, r8
 80037be:	eb49 0409 	adc.w	r4, r9, r9
 80037c2:	4698      	mov	r8, r3
 80037c4:	46a1      	mov	r9, r4
 80037c6:	eb18 0805 	adds.w	r8, r8, r5
 80037ca:	eb49 0906 	adc.w	r9, r9, r6
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037e2:	4688      	mov	r8, r1
 80037e4:	4691      	mov	r9, r2
 80037e6:	eb18 0005 	adds.w	r0, r8, r5
 80037ea:	eb49 0106 	adc.w	r1, r9, r6
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	461d      	mov	r5, r3
 80037f4:	f04f 0600 	mov.w	r6, #0
 80037f8:	196b      	adds	r3, r5, r5
 80037fa:	eb46 0406 	adc.w	r4, r6, r6
 80037fe:	461a      	mov	r2, r3
 8003800:	4623      	mov	r3, r4
 8003802:	f7fd f8f5 	bl	80009f0 <__aeabi_uldivmod>
 8003806:	4603      	mov	r3, r0
 8003808:	460c      	mov	r4, r1
 800380a:	461a      	mov	r2, r3
 800380c:	4ba5      	ldr	r3, [pc, #660]	; (8003aa4 <UART_SetConfig+0x384>)
 800380e:	fba3 2302 	umull	r2, r3, r3, r2
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	461d      	mov	r5, r3
 800381c:	f04f 0600 	mov.w	r6, #0
 8003820:	46a9      	mov	r9, r5
 8003822:	46b2      	mov	sl, r6
 8003824:	eb19 0309 	adds.w	r3, r9, r9
 8003828:	eb4a 040a 	adc.w	r4, sl, sl
 800382c:	4699      	mov	r9, r3
 800382e:	46a2      	mov	sl, r4
 8003830:	eb19 0905 	adds.w	r9, r9, r5
 8003834:	eb4a 0a06 	adc.w	sl, sl, r6
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003844:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003848:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800384c:	4689      	mov	r9, r1
 800384e:	4692      	mov	sl, r2
 8003850:	eb19 0005 	adds.w	r0, r9, r5
 8003854:	eb4a 0106 	adc.w	r1, sl, r6
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	461d      	mov	r5, r3
 800385e:	f04f 0600 	mov.w	r6, #0
 8003862:	196b      	adds	r3, r5, r5
 8003864:	eb46 0406 	adc.w	r4, r6, r6
 8003868:	461a      	mov	r2, r3
 800386a:	4623      	mov	r3, r4
 800386c:	f7fd f8c0 	bl	80009f0 <__aeabi_uldivmod>
 8003870:	4603      	mov	r3, r0
 8003872:	460c      	mov	r4, r1
 8003874:	461a      	mov	r2, r3
 8003876:	4b8b      	ldr	r3, [pc, #556]	; (8003aa4 <UART_SetConfig+0x384>)
 8003878:	fba3 1302 	umull	r1, r3, r3, r2
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2164      	movs	r1, #100	; 0x64
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	3332      	adds	r3, #50	; 0x32
 800388a:	4a86      	ldr	r2, [pc, #536]	; (8003aa4 <UART_SetConfig+0x384>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003898:	4498      	add	r8, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	461d      	mov	r5, r3
 800389e:	f04f 0600 	mov.w	r6, #0
 80038a2:	46a9      	mov	r9, r5
 80038a4:	46b2      	mov	sl, r6
 80038a6:	eb19 0309 	adds.w	r3, r9, r9
 80038aa:	eb4a 040a 	adc.w	r4, sl, sl
 80038ae:	4699      	mov	r9, r3
 80038b0:	46a2      	mov	sl, r4
 80038b2:	eb19 0905 	adds.w	r9, r9, r5
 80038b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ce:	4689      	mov	r9, r1
 80038d0:	4692      	mov	sl, r2
 80038d2:	eb19 0005 	adds.w	r0, r9, r5
 80038d6:	eb4a 0106 	adc.w	r1, sl, r6
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	461d      	mov	r5, r3
 80038e0:	f04f 0600 	mov.w	r6, #0
 80038e4:	196b      	adds	r3, r5, r5
 80038e6:	eb46 0406 	adc.w	r4, r6, r6
 80038ea:	461a      	mov	r2, r3
 80038ec:	4623      	mov	r3, r4
 80038ee:	f7fd f87f 	bl	80009f0 <__aeabi_uldivmod>
 80038f2:	4603      	mov	r3, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <UART_SetConfig+0x384>)
 80038fa:	fba3 1302 	umull	r1, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2164      	movs	r1, #100	; 0x64
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	3332      	adds	r3, #50	; 0x32
 800390c:	4a65      	ldr	r2, [pc, #404]	; (8003aa4 <UART_SetConfig+0x384>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	f003 0207 	and.w	r2, r3, #7
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4442      	add	r2, r8
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	e26f      	b.n	8003e02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003922:	f7fe fdd7 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8003926:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	461d      	mov	r5, r3
 800392c:	f04f 0600 	mov.w	r6, #0
 8003930:	46a8      	mov	r8, r5
 8003932:	46b1      	mov	r9, r6
 8003934:	eb18 0308 	adds.w	r3, r8, r8
 8003938:	eb49 0409 	adc.w	r4, r9, r9
 800393c:	4698      	mov	r8, r3
 800393e:	46a1      	mov	r9, r4
 8003940:	eb18 0805 	adds.w	r8, r8, r5
 8003944:	eb49 0906 	adc.w	r9, r9, r6
 8003948:	f04f 0100 	mov.w	r1, #0
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003954:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003958:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800395c:	4688      	mov	r8, r1
 800395e:	4691      	mov	r9, r2
 8003960:	eb18 0005 	adds.w	r0, r8, r5
 8003964:	eb49 0106 	adc.w	r1, r9, r6
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	461d      	mov	r5, r3
 800396e:	f04f 0600 	mov.w	r6, #0
 8003972:	196b      	adds	r3, r5, r5
 8003974:	eb46 0406 	adc.w	r4, r6, r6
 8003978:	461a      	mov	r2, r3
 800397a:	4623      	mov	r3, r4
 800397c:	f7fd f838 	bl	80009f0 <__aeabi_uldivmod>
 8003980:	4603      	mov	r3, r0
 8003982:	460c      	mov	r4, r1
 8003984:	461a      	mov	r2, r3
 8003986:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <UART_SetConfig+0x384>)
 8003988:	fba3 2302 	umull	r2, r3, r3, r2
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	461d      	mov	r5, r3
 8003996:	f04f 0600 	mov.w	r6, #0
 800399a:	46a9      	mov	r9, r5
 800399c:	46b2      	mov	sl, r6
 800399e:	eb19 0309 	adds.w	r3, r9, r9
 80039a2:	eb4a 040a 	adc.w	r4, sl, sl
 80039a6:	4699      	mov	r9, r3
 80039a8:	46a2      	mov	sl, r4
 80039aa:	eb19 0905 	adds.w	r9, r9, r5
 80039ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80039b2:	f04f 0100 	mov.w	r1, #0
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039c6:	4689      	mov	r9, r1
 80039c8:	4692      	mov	sl, r2
 80039ca:	eb19 0005 	adds.w	r0, r9, r5
 80039ce:	eb4a 0106 	adc.w	r1, sl, r6
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	461d      	mov	r5, r3
 80039d8:	f04f 0600 	mov.w	r6, #0
 80039dc:	196b      	adds	r3, r5, r5
 80039de:	eb46 0406 	adc.w	r4, r6, r6
 80039e2:	461a      	mov	r2, r3
 80039e4:	4623      	mov	r3, r4
 80039e6:	f7fd f803 	bl	80009f0 <__aeabi_uldivmod>
 80039ea:	4603      	mov	r3, r0
 80039ec:	460c      	mov	r4, r1
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <UART_SetConfig+0x384>)
 80039f2:	fba3 1302 	umull	r1, r3, r3, r2
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2164      	movs	r1, #100	; 0x64
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	3332      	adds	r3, #50	; 0x32
 8003a04:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <UART_SetConfig+0x384>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a12:	4498      	add	r8, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	461d      	mov	r5, r3
 8003a18:	f04f 0600 	mov.w	r6, #0
 8003a1c:	46a9      	mov	r9, r5
 8003a1e:	46b2      	mov	sl, r6
 8003a20:	eb19 0309 	adds.w	r3, r9, r9
 8003a24:	eb4a 040a 	adc.w	r4, sl, sl
 8003a28:	4699      	mov	r9, r3
 8003a2a:	46a2      	mov	sl, r4
 8003a2c:	eb19 0905 	adds.w	r9, r9, r5
 8003a30:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a34:	f04f 0100 	mov.w	r1, #0
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a48:	4689      	mov	r9, r1
 8003a4a:	4692      	mov	sl, r2
 8003a4c:	eb19 0005 	adds.w	r0, r9, r5
 8003a50:	eb4a 0106 	adc.w	r1, sl, r6
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	461d      	mov	r5, r3
 8003a5a:	f04f 0600 	mov.w	r6, #0
 8003a5e:	196b      	adds	r3, r5, r5
 8003a60:	eb46 0406 	adc.w	r4, r6, r6
 8003a64:	461a      	mov	r2, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	f7fc ffc2 	bl	80009f0 <__aeabi_uldivmod>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	460c      	mov	r4, r1
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <UART_SetConfig+0x384>)
 8003a74:	fba3 1302 	umull	r1, r3, r3, r2
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	2164      	movs	r1, #100	; 0x64
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	3332      	adds	r3, #50	; 0x32
 8003a86:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <UART_SetConfig+0x384>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	f003 0207 	and.w	r2, r3, #7
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4442      	add	r2, r8
 8003a98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a9a:	e1b2      	b.n	8003e02 <UART_SetConfig+0x6e2>
 8003a9c:	40011000 	.word	0x40011000
 8003aa0:	40011400 	.word	0x40011400
 8003aa4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4ad7      	ldr	r2, [pc, #860]	; (8003e0c <UART_SetConfig+0x6ec>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d005      	beq.n	8003abe <UART_SetConfig+0x39e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4ad6      	ldr	r2, [pc, #856]	; (8003e10 <UART_SetConfig+0x6f0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	f040 80d1 	bne.w	8003c60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003abe:	f7fe fd1d 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 8003ac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	469a      	mov	sl, r3
 8003ac8:	f04f 0b00 	mov.w	fp, #0
 8003acc:	46d0      	mov	r8, sl
 8003ace:	46d9      	mov	r9, fp
 8003ad0:	eb18 0308 	adds.w	r3, r8, r8
 8003ad4:	eb49 0409 	adc.w	r4, r9, r9
 8003ad8:	4698      	mov	r8, r3
 8003ada:	46a1      	mov	r9, r4
 8003adc:	eb18 080a 	adds.w	r8, r8, sl
 8003ae0:	eb49 090b 	adc.w	r9, r9, fp
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003af0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003af4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003af8:	4688      	mov	r8, r1
 8003afa:	4691      	mov	r9, r2
 8003afc:	eb1a 0508 	adds.w	r5, sl, r8
 8003b00:	eb4b 0609 	adc.w	r6, fp, r9
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	f04f 0400 	mov.w	r4, #0
 8003b16:	0094      	lsls	r4, r2, #2
 8003b18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b1c:	008b      	lsls	r3, r1, #2
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4623      	mov	r3, r4
 8003b22:	4628      	mov	r0, r5
 8003b24:	4631      	mov	r1, r6
 8003b26:	f7fc ff63 	bl	80009f0 <__aeabi_uldivmod>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4bb8      	ldr	r3, [pc, #736]	; (8003e14 <UART_SetConfig+0x6f4>)
 8003b32:	fba3 2302 	umull	r2, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	469b      	mov	fp, r3
 8003b40:	f04f 0c00 	mov.w	ip, #0
 8003b44:	46d9      	mov	r9, fp
 8003b46:	46e2      	mov	sl, ip
 8003b48:	eb19 0309 	adds.w	r3, r9, r9
 8003b4c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b50:	4699      	mov	r9, r3
 8003b52:	46a2      	mov	sl, r4
 8003b54:	eb19 090b 	adds.w	r9, r9, fp
 8003b58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b5c:	f04f 0100 	mov.w	r1, #0
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b70:	4689      	mov	r9, r1
 8003b72:	4692      	mov	sl, r2
 8003b74:	eb1b 0509 	adds.w	r5, fp, r9
 8003b78:	eb4c 060a 	adc.w	r6, ip, sl
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4619      	mov	r1, r3
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	f04f 0400 	mov.w	r4, #0
 8003b8e:	0094      	lsls	r4, r2, #2
 8003b90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b94:	008b      	lsls	r3, r1, #2
 8003b96:	461a      	mov	r2, r3
 8003b98:	4623      	mov	r3, r4
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	4631      	mov	r1, r6
 8003b9e:	f7fc ff27 	bl	80009f0 <__aeabi_uldivmod>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b9a      	ldr	r3, [pc, #616]	; (8003e14 <UART_SetConfig+0x6f4>)
 8003baa:	fba3 1302 	umull	r1, r3, r3, r2
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2164      	movs	r1, #100	; 0x64
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	3332      	adds	r3, #50	; 0x32
 8003bbc:	4a95      	ldr	r2, [pc, #596]	; (8003e14 <UART_SetConfig+0x6f4>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc8:	4498      	add	r8, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	469b      	mov	fp, r3
 8003bce:	f04f 0c00 	mov.w	ip, #0
 8003bd2:	46d9      	mov	r9, fp
 8003bd4:	46e2      	mov	sl, ip
 8003bd6:	eb19 0309 	adds.w	r3, r9, r9
 8003bda:	eb4a 040a 	adc.w	r4, sl, sl
 8003bde:	4699      	mov	r9, r3
 8003be0:	46a2      	mov	sl, r4
 8003be2:	eb19 090b 	adds.w	r9, r9, fp
 8003be6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bfe:	4689      	mov	r9, r1
 8003c00:	4692      	mov	sl, r2
 8003c02:	eb1b 0509 	adds.w	r5, fp, r9
 8003c06:	eb4c 060a 	adc.w	r6, ip, sl
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	f04f 0400 	mov.w	r4, #0
 8003c1c:	0094      	lsls	r4, r2, #2
 8003c1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c22:	008b      	lsls	r3, r1, #2
 8003c24:	461a      	mov	r2, r3
 8003c26:	4623      	mov	r3, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	4631      	mov	r1, r6
 8003c2c:	f7fc fee0 	bl	80009f0 <__aeabi_uldivmod>
 8003c30:	4603      	mov	r3, r0
 8003c32:	460c      	mov	r4, r1
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b77      	ldr	r3, [pc, #476]	; (8003e14 <UART_SetConfig+0x6f4>)
 8003c38:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	2164      	movs	r1, #100	; 0x64
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	3332      	adds	r3, #50	; 0x32
 8003c4a:	4a72      	ldr	r2, [pc, #456]	; (8003e14 <UART_SetConfig+0x6f4>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	f003 020f 	and.w	r2, r3, #15
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4442      	add	r2, r8
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	e0d0      	b.n	8003e02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c60:	f7fe fc38 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8003c64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	469a      	mov	sl, r3
 8003c6a:	f04f 0b00 	mov.w	fp, #0
 8003c6e:	46d0      	mov	r8, sl
 8003c70:	46d9      	mov	r9, fp
 8003c72:	eb18 0308 	adds.w	r3, r8, r8
 8003c76:	eb49 0409 	adc.w	r4, r9, r9
 8003c7a:	4698      	mov	r8, r3
 8003c7c:	46a1      	mov	r9, r4
 8003c7e:	eb18 080a 	adds.w	r8, r8, sl
 8003c82:	eb49 090b 	adc.w	r9, r9, fp
 8003c86:	f04f 0100 	mov.w	r1, #0
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c9a:	4688      	mov	r8, r1
 8003c9c:	4691      	mov	r9, r2
 8003c9e:	eb1a 0508 	adds.w	r5, sl, r8
 8003ca2:	eb4b 0609 	adc.w	r6, fp, r9
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4619      	mov	r1, r3
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	f04f 0400 	mov.w	r4, #0
 8003cb8:	0094      	lsls	r4, r2, #2
 8003cba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cbe:	008b      	lsls	r3, r1, #2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4623      	mov	r3, r4
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	4631      	mov	r1, r6
 8003cc8:	f7fc fe92 	bl	80009f0 <__aeabi_uldivmod>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <UART_SetConfig+0x6f4>)
 8003cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	469b      	mov	fp, r3
 8003ce2:	f04f 0c00 	mov.w	ip, #0
 8003ce6:	46d9      	mov	r9, fp
 8003ce8:	46e2      	mov	sl, ip
 8003cea:	eb19 0309 	adds.w	r3, r9, r9
 8003cee:	eb4a 040a 	adc.w	r4, sl, sl
 8003cf2:	4699      	mov	r9, r3
 8003cf4:	46a2      	mov	sl, r4
 8003cf6:	eb19 090b 	adds.w	r9, r9, fp
 8003cfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d12:	4689      	mov	r9, r1
 8003d14:	4692      	mov	sl, r2
 8003d16:	eb1b 0509 	adds.w	r5, fp, r9
 8003d1a:	eb4c 060a 	adc.w	r6, ip, sl
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4619      	mov	r1, r3
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	f04f 0400 	mov.w	r4, #0
 8003d30:	0094      	lsls	r4, r2, #2
 8003d32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d36:	008b      	lsls	r3, r1, #2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	4631      	mov	r1, r6
 8003d40:	f7fc fe56 	bl	80009f0 <__aeabi_uldivmod>
 8003d44:	4603      	mov	r3, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <UART_SetConfig+0x6f4>)
 8003d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	2164      	movs	r1, #100	; 0x64
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	3332      	adds	r3, #50	; 0x32
 8003d5e:	4a2d      	ldr	r2, [pc, #180]	; (8003e14 <UART_SetConfig+0x6f4>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d6a:	4498      	add	r8, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	469b      	mov	fp, r3
 8003d70:	f04f 0c00 	mov.w	ip, #0
 8003d74:	46d9      	mov	r9, fp
 8003d76:	46e2      	mov	sl, ip
 8003d78:	eb19 0309 	adds.w	r3, r9, r9
 8003d7c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d80:	4699      	mov	r9, r3
 8003d82:	46a2      	mov	sl, r4
 8003d84:	eb19 090b 	adds.w	r9, r9, fp
 8003d88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d8c:	f04f 0100 	mov.w	r1, #0
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003da0:	4689      	mov	r9, r1
 8003da2:	4692      	mov	sl, r2
 8003da4:	eb1b 0509 	adds.w	r5, fp, r9
 8003da8:	eb4c 060a 	adc.w	r6, ip, sl
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4619      	mov	r1, r3
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	f04f 0400 	mov.w	r4, #0
 8003dbe:	0094      	lsls	r4, r2, #2
 8003dc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dc4:	008b      	lsls	r3, r1, #2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4623      	mov	r3, r4
 8003dca:	4628      	mov	r0, r5
 8003dcc:	4631      	mov	r1, r6
 8003dce:	f7fc fe0f 	bl	80009f0 <__aeabi_uldivmod>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <UART_SetConfig+0x6f4>)
 8003dda:	fba3 1302 	umull	r1, r3, r3, r2
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2164      	movs	r1, #100	; 0x64
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	3332      	adds	r3, #50	; 0x32
 8003dec:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <UART_SetConfig+0x6f4>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4442      	add	r2, r8
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	e7ff      	b.n	8003e02 <UART_SetConfig+0x6e2>
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0c:	40011000 	.word	0x40011000
 8003e10:	40011400 	.word	0x40011400
 8003e14:	51eb851f 	.word	0x51eb851f

08003e18 <__libc_init_array>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	4e0d      	ldr	r6, [pc, #52]	; (8003e50 <__libc_init_array+0x38>)
 8003e1c:	4c0d      	ldr	r4, [pc, #52]	; (8003e54 <__libc_init_array+0x3c>)
 8003e1e:	1ba4      	subs	r4, r4, r6
 8003e20:	10a4      	asrs	r4, r4, #2
 8003e22:	2500      	movs	r5, #0
 8003e24:	42a5      	cmp	r5, r4
 8003e26:	d109      	bne.n	8003e3c <__libc_init_array+0x24>
 8003e28:	4e0b      	ldr	r6, [pc, #44]	; (8003e58 <__libc_init_array+0x40>)
 8003e2a:	4c0c      	ldr	r4, [pc, #48]	; (8003e5c <__libc_init_array+0x44>)
 8003e2c:	f000 f820 	bl	8003e70 <_init>
 8003e30:	1ba4      	subs	r4, r4, r6
 8003e32:	10a4      	asrs	r4, r4, #2
 8003e34:	2500      	movs	r5, #0
 8003e36:	42a5      	cmp	r5, r4
 8003e38:	d105      	bne.n	8003e46 <__libc_init_array+0x2e>
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e40:	4798      	blx	r3
 8003e42:	3501      	adds	r5, #1
 8003e44:	e7ee      	b.n	8003e24 <__libc_init_array+0xc>
 8003e46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e4a:	4798      	blx	r3
 8003e4c:	3501      	adds	r5, #1
 8003e4e:	e7f2      	b.n	8003e36 <__libc_init_array+0x1e>
 8003e50:	08003ea8 	.word	0x08003ea8
 8003e54:	08003ea8 	.word	0x08003ea8
 8003e58:	08003ea8 	.word	0x08003ea8
 8003e5c:	08003eac 	.word	0x08003eac

08003e60 <memset>:
 8003e60:	4402      	add	r2, r0
 8003e62:	4603      	mov	r3, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <_init>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr

08003e7c <_fini>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr

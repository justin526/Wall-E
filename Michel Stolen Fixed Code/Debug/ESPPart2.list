
ESPPart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005124  08005124  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800512c  0800512c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000ac8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b38  20000b38  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011af8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002335  00000000  00000000  00031b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00033ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c80  00000000  00000000  00034c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225b7  00000000  00000000  00035898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f637  00000000  00000000  00057e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cce23  00000000  00000000  00067486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001342a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004284  00000000  00000000  001342fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e4c 	.word	0x08004e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004e4c 	.word	0x08004e4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f001 f8b0 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f824 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f8e0 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f88a 	bl	80006a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800058c:	f000 f8b2 	bl	80006f4 <MX_USART3_UART_Init>
//  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <main+0x48>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	68da      	ldr	r2, [r3, #12]
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <main+0x48>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f042 0220 	orr.w	r2, r2, #32
 800059e:	60da      	str	r2, [r3, #12]
  	ESP_Server_Init();
 80005a0:	f000 fa84 	bl	8000aac <ESP_Server_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(messageHandlerFlag)
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <main+0x4c>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0fb      	beq.n	80005a4 <main+0x2c>
	  	{
	  	  messageHandlerFlag = 0;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <main+0x4c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	801a      	strh	r2, [r3, #0]
	  	  netTimeout = 0;
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <main+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	801a      	strh	r2, [r3, #0]
	  	  messageHandler();
 80005b8:	f000 fb72 	bl	8000ca0 <messageHandler>
	  if(messageHandlerFlag)
 80005bc:	e7f2      	b.n	80005a4 <main+0x2c>
 80005be:	bf00      	nop
 80005c0:	200000a4 	.word	0x200000a4
 80005c4:	20000090 	.word	0x20000090
 80005c8:	20000092 	.word	0x20000092

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fa5a 	bl	8003a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800063c:	2308      	movs	r3, #8
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fc28 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065e:	f000 f9e1 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2105      	movs	r1, #5
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fe89 	bl	8002398 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800068c:	f000 f9ca 	bl	8000a24 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f002 f9a8 	bl	8002a2c <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f99f 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000900 	.word	0x20000900
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART3_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800072c:	f002 f97e 	bl	8002a2c <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f975 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000a4 	.word	0x200000a4
 8000744:	40004800 	.word	0x40004800

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	4baa      	ldr	r3, [pc, #680]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4aa9      	ldr	r2, [pc, #676]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4ba7      	ldr	r3, [pc, #668]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4ba3      	ldr	r3, [pc, #652]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4aa2      	ldr	r2, [pc, #648]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4ba0      	ldr	r3, [pc, #640]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b9c      	ldr	r3, [pc, #624]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a9b      	ldr	r2, [pc, #620]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b99      	ldr	r3, [pc, #612]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b95      	ldr	r3, [pc, #596]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a94      	ldr	r2, [pc, #592]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b92      	ldr	r3, [pc, #584]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b8e      	ldr	r3, [pc, #568]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a8d      	ldr	r2, [pc, #564]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b8b      	ldr	r3, [pc, #556]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b87      	ldr	r3, [pc, #540]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a86      	ldr	r2, [pc, #536]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b84      	ldr	r3, [pc, #528]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2108      	movs	r1, #8
 800080a:	4881      	ldr	r0, [pc, #516]	; (8000a10 <MX_GPIO_Init+0x2c8>)
 800080c:	f001 fb32 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2101      	movs	r1, #1
 8000814:	487f      	ldr	r0, [pc, #508]	; (8000a14 <MX_GPIO_Init+0x2cc>)
 8000816:	f001 fb2d 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800081a:	2200      	movs	r2, #0
 800081c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000820:	487d      	ldr	r0, [pc, #500]	; (8000a18 <MX_GPIO_Init+0x2d0>)
 8000822:	f001 fb27 	bl	8001e74 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000826:	2308      	movs	r3, #8
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4874      	ldr	r0, [pc, #464]	; (8000a10 <MX_GPIO_Init+0x2c8>)
 800083e:	f001 f97d 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	486e      	ldr	r0, [pc, #440]	; (8000a14 <MX_GPIO_Init+0x2cc>)
 800085a:	f001 f96f 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800085e:	2308      	movs	r3, #8
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086e:	2305      	movs	r3, #5
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4866      	ldr	r0, [pc, #408]	; (8000a14 <MX_GPIO_Init+0x2cc>)
 800087a:	f001 f95f 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000882:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4862      	ldr	r0, [pc, #392]	; (8000a1c <MX_GPIO_Init+0x2d4>)
 8000894:	f001 f952 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000898:	2310      	movs	r3, #16
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a8:	2306      	movs	r3, #6
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	485a      	ldr	r0, [pc, #360]	; (8000a1c <MX_GPIO_Init+0x2d4>)
 80008b4:	f001 f942 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008b8:	23e0      	movs	r3, #224	; 0xe0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c8:	2305      	movs	r3, #5
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4852      	ldr	r0, [pc, #328]	; (8000a1c <MX_GPIO_Init+0x2d4>)
 80008d4:	f001 f932 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d8:	2304      	movs	r3, #4
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	484d      	ldr	r0, [pc, #308]	; (8000a20 <MX_GPIO_Init+0x2d8>)
 80008ec:	f001 f926 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000902:	2305      	movs	r3, #5
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4844      	ldr	r0, [pc, #272]	; (8000a20 <MX_GPIO_Init+0x2d8>)
 800090e:	f001 f915 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000912:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000916:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	483b      	ldr	r0, [pc, #236]	; (8000a18 <MX_GPIO_Init+0x2d0>)
 800092c:	f001 f906 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000930:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000942:	2306      	movs	r3, #6
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4831      	ldr	r0, [pc, #196]	; (8000a14 <MX_GPIO_Init+0x2cc>)
 800094e:	f001 f8f5 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	482d      	ldr	r0, [pc, #180]	; (8000a1c <MX_GPIO_Init+0x2d4>)
 8000968:	f001 f8e8 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800096c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800097e:	230a      	movs	r3, #10
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4824      	ldr	r0, [pc, #144]	; (8000a1c <MX_GPIO_Init+0x2d4>)
 800098a:	f001 f8d7 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800098e:	2320      	movs	r3, #32
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	481d      	ldr	r0, [pc, #116]	; (8000a18 <MX_GPIO_Init+0x2d0>)
 80009a2:	f001 f8cb 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009a6:	23c0      	movs	r3, #192	; 0xc0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b6:	2307      	movs	r3, #7
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4817      	ldr	r0, [pc, #92]	; (8000a20 <MX_GPIO_Init+0x2d8>)
 80009c2:	f001 f8bb 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80009c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d8:	2304      	movs	r3, #4
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <MX_GPIO_Init+0x2d8>)
 80009e4:	f001 f8aa 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_GPIO_Init+0x2c8>)
 80009fe:	f001 f89d 	bl	8001b3c <HAL_GPIO_Init>

}
 8000a02:	bf00      	nop
 8000a04:	3730      	adds	r7, #48	; 0x30
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40020400 	.word	0x40020400

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a34:	f3bf 8f4f 	dsb	sy
}
 8000a38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <__NVIC_SystemReset+0x24>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a42:	4904      	ldr	r1, [pc, #16]	; (8000a54 <__NVIC_SystemReset+0x24>)
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_SystemReset+0x28>)
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a4a:	f3bf 8f4f 	dsb	sy
}
 8000a4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <__NVIC_SystemReset+0x20>
 8000a54:	e000ed00 	.word	0xe000ed00
 8000a58:	05fa0004 	.word	0x05fa0004

08000a5c <ESP_RESET>:
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
	__enable_irq();
}

void ESP_RESET()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2120      	movs	r1, #32
 8000a64:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <ESP_RESET+0x44>)
 8000a66:	f001 fa05 	bl	8001e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <ESP_RESET+0x44>)
 8000a70:	f001 fa00 	bl	8001e74 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8000a74:	201e      	movs	r0, #30
 8000a76:	f000 fe99 	bl	80017ac <HAL_Delay>
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <ESP_RESET+0x44>)
 8000a80:	f001 f9f8 	bl	8001e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2110      	movs	r1, #16
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <ESP_RESET+0x44>)
 8000a8a:	f001 f9f3 	bl	8001e74 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(pc_uart, "ESP Reset\r\n", strlen( "ESP Reset\r\n"), 100);
 8000a8e:	2364      	movs	r3, #100	; 0x64
 8000a90:	220b      	movs	r2, #11
 8000a92:	4904      	ldr	r1, [pc, #16]	; (8000aa4 <ESP_RESET+0x48>)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <ESP_RESET+0x4c>)
 8000a96:	f002 f816 	bl	8002ac6 <HAL_UART_Transmit>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	08004e64 	.word	0x08004e64
 8000aa8:	20000900 	.word	0x20000900

08000aac <ESP_Server_Init>:

void ESP_Server_Init()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	ESP_RESET();
 8000ab0:	f7ff ffd4 	bl	8000a5c <ESP_RESET>
	HAL_Delay(2000);
 8000ab4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab8:	f000 fe78 	bl	80017ac <HAL_Delay>
	HAL_UART_Transmit(pc_uart, "Start\r\n", strlen( "Start\r\n"), 100);
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	2207      	movs	r2, #7
 8000ac0:	4927      	ldr	r1, [pc, #156]	; (8000b60 <ESP_Server_Init+0xb4>)
 8000ac2:	4828      	ldr	r0, [pc, #160]	; (8000b64 <ESP_Server_Init+0xb8>)
 8000ac4:	f001 ffff 	bl	8002ac6 <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8000ac8:	f000 f85e 	bl	8000b88 <ESP_Clear_Buffer>
//	huart3.Init.BaudRate = 115200;
//	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CIOBAUD=115200\r\n", strlen("AT+CIOBAUD=115200\r\n"), 100);
//	huart3.Init.BaudRate = 115200;

//	HAL_Delay(1000);
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+RST\r\n", strlen("AT+RST\r\n"), 100);
 8000acc:	2364      	movs	r3, #100	; 0x64
 8000ace:	2208      	movs	r2, #8
 8000ad0:	4925      	ldr	r1, [pc, #148]	; (8000b68 <ESP_Server_Init+0xbc>)
 8000ad2:	4826      	ldr	r0, [pc, #152]	; (8000b6c <ESP_Server_Init+0xc0>)
 8000ad4:	f001 fff7 	bl	8002ac6 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8000ad8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000adc:	f000 fe66 	bl	80017ac <HAL_Delay>
//	HAL_UART_Transmit(pc_uart, (uint8_t*)"AT+RST\r\n", strlen("AT+RST\r\n"), 100);
	ESP_Clear_Buffer();
 8000ae0:	f000 f852 	bl	8000b88 <ESP_Clear_Buffer>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"), 100);
 8000ae4:	2364      	movs	r3, #100	; 0x64
 8000ae6:	220d      	movs	r2, #13
 8000ae8:	4921      	ldr	r1, [pc, #132]	; (8000b70 <ESP_Server_Init+0xc4>)
 8000aea:	4820      	ldr	r0, [pc, #128]	; (8000b6c <ESP_Server_Init+0xc0>)
 8000aec:	f001 ffeb 	bl	8002ac6 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000af0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000af4:	f000 fe5a 	bl	80017ac <HAL_Delay>
	ESP_Clear_Buffer();
 8000af8:	f000 f846 	bl	8000b88 <ESP_Clear_Buffer>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWDHCP=1,1\r\n", strlen("AT+CWDHCP=1,1\r\n"), 100);
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	220f      	movs	r2, #15
 8000b00:	491c      	ldr	r1, [pc, #112]	; (8000b74 <ESP_Server_Init+0xc8>)
 8000b02:	481a      	ldr	r0, [pc, #104]	; (8000b6c <ESP_Server_Init+0xc0>)
 8000b04:	f001 ffdf 	bl	8002ac6 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000b08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b0c:	f000 fe4e 	bl	80017ac <HAL_Delay>
	ESP_Clear_Buffer();
 8000b10:	f000 f83a 	bl	8000b88 <ESP_Clear_Buffer>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"), 100);
 8000b14:	2364      	movs	r3, #100	; 0x64
 8000b16:	220d      	movs	r2, #13
 8000b18:	4917      	ldr	r1, [pc, #92]	; (8000b78 <ESP_Server_Init+0xcc>)
 8000b1a:	4814      	ldr	r0, [pc, #80]	; (8000b6c <ESP_Server_Init+0xc0>)
 8000b1c:	f001 ffd3 	bl	8002ac6 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000b20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b24:	f000 fe42 	bl	80017ac <HAL_Delay>
	ESP_Clear_Buffer();
 8000b28:	f000 f82e 	bl	8000b88 <ESP_Clear_Buffer>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CIPSERVER=1,80\r\n", strlen("AT+CIPSERVER=1,80\r\n"), 100);
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	2213      	movs	r2, #19
 8000b30:	4912      	ldr	r1, [pc, #72]	; (8000b7c <ESP_Server_Init+0xd0>)
 8000b32:	480e      	ldr	r0, [pc, #56]	; (8000b6c <ESP_Server_Init+0xc0>)
 8000b34:	f001 ffc7 	bl	8002ac6 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b3c:	f000 fe36 	bl	80017ac <HAL_Delay>
	ESP_Clear_Buffer();
 8000b40:	f000 f822 	bl	8000b88 <ESP_Clear_Buffer>

	//Change your WiFi SSID credentials below
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWJAP=\"MichelCel\",\"michel123\"\r\n", strlen("AT+CWJAP=\"MichelCel\",\"MichelCel\"\r\n"), 100);
 8000b44:	2364      	movs	r3, #100	; 0x64
 8000b46:	2222      	movs	r2, #34	; 0x22
 8000b48:	490d      	ldr	r1, [pc, #52]	; (8000b80 <ESP_Server_Init+0xd4>)
 8000b4a:	4808      	ldr	r0, [pc, #32]	; (8000b6c <ESP_Server_Init+0xc0>)
 8000b4c:	f001 ffbb 	bl	8002ac6 <HAL_UART_Transmit>
	HAL_UART_Transmit(pc_uart, "Connected to WiFi\r\n", strlen( "Connected to WiFi\r\n"), 100);
 8000b50:	2364      	movs	r3, #100	; 0x64
 8000b52:	2213      	movs	r2, #19
 8000b54:	490b      	ldr	r1, [pc, #44]	; (8000b84 <ESP_Server_Init+0xd8>)
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <ESP_Server_Init+0xb8>)
 8000b58:	f001 ffb5 	bl	8002ac6 <HAL_UART_Transmit>
//	HAL_Delay(2000);
//	ESP_Clear_Buffer();
//	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CIFSR\r\n", strlen("AT+CIFSR\r\n"), 100);
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	08004e70 	.word	0x08004e70
 8000b64:	20000900 	.word	0x20000900
 8000b68:	08004e78 	.word	0x08004e78
 8000b6c:	200000a4 	.word	0x200000a4
 8000b70:	08004e84 	.word	0x08004e84
 8000b74:	08004e94 	.word	0x08004e94
 8000b78:	08004ea4 	.word	0x08004ea4
 8000b7c:	08004eb4 	.word	0x08004eb4
 8000b80:	08004ec8 	.word	0x08004ec8
 8000b84:	08004eec 	.word	0x08004eec

08000b88 <ESP_Clear_Buffer>:

void ESP_Clear_Buffer()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	memset(buffer, 0, 2000);
 8000b8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b90:	2100      	movs	r1, #0
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <ESP_Clear_Buffer+0x1c>)
 8000b94:	f002 ff7e 	bl	8003a94 <memset>
	buffer_index = 0;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <ESP_Clear_Buffer+0x20>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	801a      	strh	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000130 	.word	0x20000130
 8000ba8:	2000008c 	.word	0x2000008c

08000bac <string_compare>:
//	if(percent > 100.0f)
//		percent = 100.0f;
//}

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	80fb      	strh	r3, [r7, #6]
	 uint16_t comVAR=0, i;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	82bb      	strh	r3, [r7, #20]
 8000bc2:	e012      	b.n	8000bea <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000bc4:	8abb      	ldrh	r3, [r7, #20]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	8abb      	ldrh	r3, [r7, #20]
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	440b      	add	r3, r1
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d103      	bne.n	8000be0 <string_compare+0x34>
	   	  		  comVAR++;
 8000bd8:	8afb      	ldrh	r3, [r7, #22]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	82fb      	strh	r3, [r7, #22]
 8000bde:	e001      	b.n	8000be4 <string_compare+0x38>
	   	  	  else comVAR=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 8000be4:	8abb      	ldrh	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	82bb      	strh	r3, [r7, #20]
 8000bea:	8aba      	ldrh	r2, [r7, #20]
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3e8      	bcc.n	8000bc4 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8000bf2:	8afa      	ldrh	r2, [r7, #22]
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d101      	bne.n	8000bfe <string_compare+0x52>
		 	return 1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <string_compare+0x54>
	 else 	return 0;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	371c      	adds	r7, #28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <string_contains>:

int string_contains(char bufferArray[], char searchedString[], uint16_t length)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	4613      	mov	r3, r2
 8000c18:	80fb      	strh	r3, [r7, #6]
	uint8_t result=0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	757b      	strb	r3, [r7, #21]
	for(uint16_t i=0; i<length; i++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	82fb      	strh	r3, [r7, #22]
 8000c22:	e016      	b.n	8000c52 <string_contains+0x46>
	{
		result = string_compare(&bufferArray[i], &searchedString[0], strlen(searchedString));
 8000c24:	8afb      	ldrh	r3, [r7, #22]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	18d4      	adds	r4, r2, r3
 8000c2a:	68b8      	ldr	r0, [r7, #8]
 8000c2c:	f7ff fad0 	bl	80001d0 <strlen>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f7ff ffb7 	bl	8000bac <string_compare>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	757b      	strb	r3, [r7, #21]
		if(result == 1)
 8000c42:	7d7b      	ldrb	r3, [r7, #21]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d101      	bne.n	8000c4c <string_contains+0x40>
			return i;
 8000c48:	8afb      	ldrh	r3, [r7, #22]
 8000c4a:	e008      	b.n	8000c5e <string_contains+0x52>
	for(uint16_t i=0; i<length; i++)
 8000c4c:	8afb      	ldrh	r3, [r7, #22]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	82fb      	strh	r3, [r7, #22]
 8000c52:	8afa      	ldrh	r2, [r7, #22]
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3e4      	bcc.n	8000c24 <string_contains+0x18>
	}
	return -1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	371c      	adds	r7, #28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd90      	pop	{r4, r7, pc}
	...

08000c68 <getLink>:

int getLink(int position)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	while (buffer[position] != ',') position--;
 8000c70:	e002      	b.n	8000c78 <getLink+0x10>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <getLink+0x34>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b2c      	cmp	r3, #44	; 0x2c
 8000c82:	d1f6      	bne.n	8000c72 <getLink+0xa>
	return (int) buffer[position-1] -48;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <getLink+0x34>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	3b30      	subs	r3, #48	; 0x30
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000130 	.word	0x20000130

08000ca0 <messageHandler>:

void messageHandler()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	__HAL_UART_DISABLE_IT(wifi_uart, UART_IT_RXNE);
 8000ca6:	4bb5      	ldr	r3, [pc, #724]	; (8000f7c <messageHandler+0x2dc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	4bb3      	ldr	r3, [pc, #716]	; (8000f7c <messageHandler+0x2dc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0220 	bic.w	r2, r2, #32
 8000cb4:	60da      	str	r2, [r3, #12]
	int position = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
//	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
	if((position = string_contains((char*)buffer, "GET", buffer_index)) != -1)
 8000cba:	4bb1      	ldr	r3, [pc, #708]	; (8000f80 <messageHandler+0x2e0>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	49b0      	ldr	r1, [pc, #704]	; (8000f84 <messageHandler+0x2e4>)
 8000cc2:	48b1      	ldr	r0, [pc, #708]	; (8000f88 <messageHandler+0x2e8>)
 8000cc4:	f7ff ffa2 	bl	8000c0c <string_contains>
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd0:	d007      	beq.n	8000ce2 <messageHandler+0x42>
	{
		int link = getLink(position);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffc8 	bl	8000c68 <getLink>
 8000cd8:	6038      	str	r0, [r7, #0]
		sendData(link);
 8000cda:	6838      	ldr	r0, [r7, #0]
 8000cdc:	f000 f9ae 	bl	800103c <sendData>
 8000ce0:	e18f      	b.n	8001002 <messageHandler+0x362>
//		HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 100);
//		if (string_contains((char*)buffer, "/ledon", buffer_index) != -1)
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//		else if (string_contains((char*)buffer, "/ledoff", buffer_index) != -1)
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	}else if((position = string_contains((char*)buffer, "F-", buffer_index)) != -1)
 8000ce2:	4ba7      	ldr	r3, [pc, #668]	; (8000f80 <messageHandler+0x2e0>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	49a8      	ldr	r1, [pc, #672]	; (8000f8c <messageHandler+0x2ec>)
 8000cea:	48a7      	ldr	r0, [pc, #668]	; (8000f88 <messageHandler+0x2e8>)
 8000cec:	f7ff ff8e 	bl	8000c0c <string_contains>
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d018      	beq.n	8000d2c <messageHandler+0x8c>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d00:	48a3      	ldr	r0, [pc, #652]	; (8000f90 <messageHandler+0x2f0>)
 8000d02:	f001 f8b7 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0c:	48a0      	ldr	r0, [pc, #640]	; (8000f90 <messageHandler+0x2f0>)
 8000d0e:	f001 f8b1 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d18:	489d      	ldr	r0, [pc, #628]	; (8000f90 <messageHandler+0x2f0>)
 8000d1a:	f001 f8ab 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d24:	489a      	ldr	r0, [pc, #616]	; (8000f90 <messageHandler+0x2f0>)
 8000d26:	f001 f8a5 	bl	8001e74 <HAL_GPIO_WritePin>
 8000d2a:	e16a      	b.n	8001002 <messageHandler+0x362>
	}else if((position = string_contains((char*)buffer, "B-", buffer_index)) != -1)
 8000d2c:	4b94      	ldr	r3, [pc, #592]	; (8000f80 <messageHandler+0x2e0>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4998      	ldr	r1, [pc, #608]	; (8000f94 <messageHandler+0x2f4>)
 8000d34:	4894      	ldr	r0, [pc, #592]	; (8000f88 <messageHandler+0x2e8>)
 8000d36:	f7ff ff69 	bl	8000c0c <string_contains>
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d42:	d018      	beq.n	8000d76 <messageHandler+0xd6>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4a:	4891      	ldr	r0, [pc, #580]	; (8000f90 <messageHandler+0x2f0>)
 8000d4c:	f001 f892 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d56:	488e      	ldr	r0, [pc, #568]	; (8000f90 <messageHandler+0x2f0>)
 8000d58:	f001 f88c 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d62:	488b      	ldr	r0, [pc, #556]	; (8000f90 <messageHandler+0x2f0>)
 8000d64:	f001 f886 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6e:	4888      	ldr	r0, [pc, #544]	; (8000f90 <messageHandler+0x2f0>)
 8000d70:	f001 f880 	bl	8001e74 <HAL_GPIO_WritePin>
 8000d74:	e145      	b.n	8001002 <messageHandler+0x362>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 1);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "-R", buffer_index)) != -1)
 8000d76:	4b82      	ldr	r3, [pc, #520]	; (8000f80 <messageHandler+0x2e0>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4986      	ldr	r1, [pc, #536]	; (8000f98 <messageHandler+0x2f8>)
 8000d7e:	4882      	ldr	r0, [pc, #520]	; (8000f88 <messageHandler+0x2e8>)
 8000d80:	f7ff ff44 	bl	8000c0c <string_contains>
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d018      	beq.n	8000dc0 <messageHandler+0x120>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d94:	487e      	ldr	r0, [pc, #504]	; (8000f90 <messageHandler+0x2f0>)
 8000d96:	f001 f86d 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da0:	487b      	ldr	r0, [pc, #492]	; (8000f90 <messageHandler+0x2f0>)
 8000da2:	f001 f867 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dac:	4878      	ldr	r0, [pc, #480]	; (8000f90 <messageHandler+0x2f0>)
 8000dae:	f001 f861 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db8:	4875      	ldr	r0, [pc, #468]	; (8000f90 <messageHandler+0x2f0>)
 8000dba:	f001 f85b 	bl	8001e74 <HAL_GPIO_WritePin>
 8000dbe:	e120      	b.n	8001002 <messageHandler+0x362>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 1);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "-L", buffer_index)) != -1)
 8000dc0:	4b6f      	ldr	r3, [pc, #444]	; (8000f80 <messageHandler+0x2e0>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4975      	ldr	r1, [pc, #468]	; (8000f9c <messageHandler+0x2fc>)
 8000dc8:	486f      	ldr	r0, [pc, #444]	; (8000f88 <messageHandler+0x2e8>)
 8000dca:	f7ff ff1f 	bl	8000c0c <string_contains>
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd6:	d018      	beq.n	8000e0a <messageHandler+0x16a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dde:	486c      	ldr	r0, [pc, #432]	; (8000f90 <messageHandler+0x2f0>)
 8000de0:	f001 f848 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dea:	4869      	ldr	r0, [pc, #420]	; (8000f90 <messageHandler+0x2f0>)
 8000dec:	f001 f842 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df6:	4866      	ldr	r0, [pc, #408]	; (8000f90 <messageHandler+0x2f0>)
 8000df8:	f001 f83c 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e02:	4863      	ldr	r0, [pc, #396]	; (8000f90 <messageHandler+0x2f0>)
 8000e04:	f001 f836 	bl	8001e74 <HAL_GPIO_WritePin>
 8000e08:	e0fb      	b.n	8001002 <messageHandler+0x362>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 1);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "FR", buffer_index)) != -1)
 8000e0a:	4b5d      	ldr	r3, [pc, #372]	; (8000f80 <messageHandler+0x2e0>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4963      	ldr	r1, [pc, #396]	; (8000fa0 <messageHandler+0x300>)
 8000e12:	485d      	ldr	r0, [pc, #372]	; (8000f88 <messageHandler+0x2e8>)
 8000e14:	f7ff fefa 	bl	8000c0c <string_contains>
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d018      	beq.n	8000e54 <messageHandler+0x1b4>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e28:	4859      	ldr	r0, [pc, #356]	; (8000f90 <messageHandler+0x2f0>)
 8000e2a:	f001 f823 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e34:	4856      	ldr	r0, [pc, #344]	; (8000f90 <messageHandler+0x2f0>)
 8000e36:	f001 f81d 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e40:	4853      	ldr	r0, [pc, #332]	; (8000f90 <messageHandler+0x2f0>)
 8000e42:	f001 f817 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4c:	4850      	ldr	r0, [pc, #320]	; (8000f90 <messageHandler+0x2f0>)
 8000e4e:	f001 f811 	bl	8001e74 <HAL_GPIO_WritePin>
 8000e52:	e0d6      	b.n	8001002 <messageHandler+0x362>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 1);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "FL", buffer_index)) != -1)
 8000e54:	4b4a      	ldr	r3, [pc, #296]	; (8000f80 <messageHandler+0x2e0>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4952      	ldr	r1, [pc, #328]	; (8000fa4 <messageHandler+0x304>)
 8000e5c:	484a      	ldr	r0, [pc, #296]	; (8000f88 <messageHandler+0x2e8>)
 8000e5e:	f7ff fed5 	bl	8000c0c <string_contains>
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6a:	d018      	beq.n	8000e9e <messageHandler+0x1fe>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	4847      	ldr	r0, [pc, #284]	; (8000f90 <messageHandler+0x2f0>)
 8000e74:	f000 fffe 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7e:	4844      	ldr	r0, [pc, #272]	; (8000f90 <messageHandler+0x2f0>)
 8000e80:	f000 fff8 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8a:	4841      	ldr	r0, [pc, #260]	; (8000f90 <messageHandler+0x2f0>)
 8000e8c:	f000 fff2 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e96:	483e      	ldr	r0, [pc, #248]	; (8000f90 <messageHandler+0x2f0>)
 8000e98:	f000 ffec 	bl	8001e74 <HAL_GPIO_WritePin>
 8000e9c:	e0b1      	b.n	8001002 <messageHandler+0x362>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 1);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "BR", buffer_index)) != -1)
 8000e9e:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <messageHandler+0x2e0>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4940      	ldr	r1, [pc, #256]	; (8000fa8 <messageHandler+0x308>)
 8000ea6:	4838      	ldr	r0, [pc, #224]	; (8000f88 <messageHandler+0x2e8>)
 8000ea8:	f7ff feb0 	bl	8000c0c <string_contains>
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d018      	beq.n	8000ee8 <messageHandler+0x248>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebc:	4834      	ldr	r0, [pc, #208]	; (8000f90 <messageHandler+0x2f0>)
 8000ebe:	f000 ffd9 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	4831      	ldr	r0, [pc, #196]	; (8000f90 <messageHandler+0x2f0>)
 8000eca:	f000 ffd3 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed4:	482e      	ldr	r0, [pc, #184]	; (8000f90 <messageHandler+0x2f0>)
 8000ed6:	f000 ffcd 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee0:	482b      	ldr	r0, [pc, #172]	; (8000f90 <messageHandler+0x2f0>)
 8000ee2:	f000 ffc7 	bl	8001e74 <HAL_GPIO_WritePin>
 8000ee6:	e08c      	b.n	8001002 <messageHandler+0x362>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 1);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 1);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "BL", buffer_index)) != -1)
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <messageHandler+0x2e0>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	492f      	ldr	r1, [pc, #188]	; (8000fac <messageHandler+0x30c>)
 8000ef0:	4825      	ldr	r0, [pc, #148]	; (8000f88 <messageHandler+0x2e8>)
 8000ef2:	f7ff fe8b 	bl	8000c0c <string_contains>
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efe:	d018      	beq.n	8000f32 <messageHandler+0x292>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f06:	4822      	ldr	r0, [pc, #136]	; (8000f90 <messageHandler+0x2f0>)
 8000f08:	f000 ffb4 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f12:	481f      	ldr	r0, [pc, #124]	; (8000f90 <messageHandler+0x2f0>)
 8000f14:	f000 ffae 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1e:	481c      	ldr	r0, [pc, #112]	; (8000f90 <messageHandler+0x2f0>)
 8000f20:	f000 ffa8 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f2a:	4819      	ldr	r0, [pc, #100]	; (8000f90 <messageHandler+0x2f0>)
 8000f2c:	f000 ffa2 	bl	8001e74 <HAL_GPIO_WritePin>
 8000f30:	e067      	b.n	8001002 <messageHandler+0x362>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 1);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 1);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "--", buffer_index)) != -1)
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <messageHandler+0x2e0>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	491d      	ldr	r1, [pc, #116]	; (8000fb0 <messageHandler+0x310>)
 8000f3a:	4813      	ldr	r0, [pc, #76]	; (8000f88 <messageHandler+0x2e8>)
 8000f3c:	f7ff fe66 	bl	8000c0c <string_contains>
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d034      	beq.n	8000fb4 <messageHandler+0x314>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f50:	480f      	ldr	r0, [pc, #60]	; (8000f90 <messageHandler+0x2f0>)
 8000f52:	f000 ff8f 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <messageHandler+0x2f0>)
 8000f5e:	f000 ff89 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <messageHandler+0x2f0>)
 8000f6a:	f000 ff83 	bl	8001e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <messageHandler+0x2f0>)
 8000f76:	f000 ff7d 	bl	8001e74 <HAL_GPIO_WritePin>
 8000f7a:	e042      	b.n	8001002 <messageHandler+0x362>
 8000f7c:	200000a4 	.word	0x200000a4
 8000f80:	2000008c 	.word	0x2000008c
 8000f84:	08004f00 	.word	0x08004f00
 8000f88:	20000130 	.word	0x20000130
 8000f8c:	08004f04 	.word	0x08004f04
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	08004f08 	.word	0x08004f08
 8000f98:	08004f0c 	.word	0x08004f0c
 8000f9c:	08004f10 	.word	0x08004f10
 8000fa0:	08004f14 	.word	0x08004f14
 8000fa4:	08004f18 	.word	0x08004f18
 8000fa8:	08004f1c 	.word	0x08004f1c
 8000fac:	08004f20 	.word	0x08004f20
 8000fb0:	08004f24 	.word	0x08004f24
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if(string_contains((char*)buffer, "+CWJAP:", buffer_index) != -1
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <messageHandler+0x380>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	491a      	ldr	r1, [pc, #104]	; (8001024 <messageHandler+0x384>)
 8000fbc:	481a      	ldr	r0, [pc, #104]	; (8001028 <messageHandler+0x388>)
 8000fbe:	f7ff fe25 	bl	8000c0c <string_contains>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d01b      	beq.n	8001002 <messageHandler+0x362>
			&& (string_contains((char*)buffer, "FAIL", buffer_index) != -1
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <messageHandler+0x380>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4916      	ldr	r1, [pc, #88]	; (800102c <messageHandler+0x38c>)
 8000fd2:	4815      	ldr	r0, [pc, #84]	; (8001028 <messageHandler+0x388>)
 8000fd4:	f7ff fe1a 	bl	8000c0c <string_contains>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fde:	d10a      	bne.n	8000ff6 <messageHandler+0x356>
			|| string_contains((char*)buffer, "DISCONNECT", buffer_index) != -1))
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <messageHandler+0x380>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4912      	ldr	r1, [pc, #72]	; (8001030 <messageHandler+0x390>)
 8000fe8:	480f      	ldr	r0, [pc, #60]	; (8001028 <messageHandler+0x388>)
 8000fea:	f7ff fe0f 	bl	8000c0c <string_contains>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <messageHandler+0x362>
	{
		//Change your WiFi SSID credentials below
		HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWJAP=\"MichelCel\",\"michel123\"\r\n", strlen("AT+CWJAP=\"MichelCel\",\"michel123\"\r\n"), 100);
 8000ff6:	2364      	movs	r3, #100	; 0x64
 8000ff8:	2222      	movs	r2, #34	; 0x22
 8000ffa:	490e      	ldr	r1, [pc, #56]	; (8001034 <messageHandler+0x394>)
 8000ffc:	480e      	ldr	r0, [pc, #56]	; (8001038 <messageHandler+0x398>)
 8000ffe:	f001 fd62 	bl	8002ac6 <HAL_UART_Transmit>
	}
//	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
	ESP_Clear_Buffer();
 8001002:	f7ff fdc1 	bl	8000b88 <ESP_Clear_Buffer>
	__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <messageHandler+0x398>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <messageHandler+0x398>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0220 	orr.w	r2, r2, #32
 8001014:	60da      	str	r2, [r3, #12]
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000008c 	.word	0x2000008c
 8001024:	08004f28 	.word	0x08004f28
 8001028:	20000130 	.word	0x20000130
 800102c:	08004f30 	.word	0x08004f30
 8001030:	08004f38 	.word	0x08004f38
 8001034:	08004ec8 	.word	0x08004ec8
 8001038:	200000a4 	.word	0x200000a4

0800103c <sendData>:

void sendData(int link)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	memset(outputString, 0, 100);
 8001044:	2264      	movs	r2, #100	; 0x64
 8001046:	2100      	movs	r1, #0
 8001048:	4836      	ldr	r0, [pc, #216]	; (8001124 <sendData+0xe8>)
 800104a:	f002 fd23 	bl	8003a94 <memset>
	memset(cipsend, 0, 50);
 800104e:	2232      	movs	r2, #50	; 0x32
 8001050:	2100      	movs	r1, #0
 8001052:	4835      	ldr	r0, [pc, #212]	; (8001128 <sendData+0xec>)
 8001054:	f002 fd1e 	bl	8003a94 <memset>
	memset(response, 0, 300);
 8001058:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800105c:	2100      	movs	r1, #0
 800105e:	4833      	ldr	r0, [pc, #204]	; (800112c <sendData+0xf0>)
 8001060:	f002 fd18 	bl	8003a94 <memset>
	memset(cipclose, 0, 14);
 8001064:	220e      	movs	r2, #14
 8001066:	2100      	movs	r1, #0
 8001068:	4831      	ldr	r0, [pc, #196]	; (8001130 <sendData+0xf4>)
 800106a:	f002 fd13 	bl	8003a94 <memset>

	sprintf(outputString, "Battery: %i%%\n", (int)rand() % 100);
 800106e:	f002 fd19 	bl	8003aa4 <rand>
 8001072:	4602      	mov	r2, r0
 8001074:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <sendData+0xf8>)
 8001076:	fb83 1302 	smull	r1, r3, r3, r2
 800107a:	1159      	asrs	r1, r3, #5
 800107c:	17d3      	asrs	r3, r2, #31
 800107e:	1acb      	subs	r3, r1, r3
 8001080:	2164      	movs	r1, #100	; 0x64
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	461a      	mov	r2, r3
 800108a:	492b      	ldr	r1, [pc, #172]	; (8001138 <sendData+0xfc>)
 800108c:	4825      	ldr	r0, [pc, #148]	; (8001124 <sendData+0xe8>)
 800108e:	f002 fd49 	bl	8003b24 <siprintf>
	sprintf(response, "HTTP/1.1 200 OK\r\nContent-Length: %i\r\nContent-Type: text/plain\r\n\r\n%s", strlen(outputString), outputString);
 8001092:	4824      	ldr	r0, [pc, #144]	; (8001124 <sendData+0xe8>)
 8001094:	f7ff f89c 	bl	80001d0 <strlen>
 8001098:	4602      	mov	r2, r0
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <sendData+0xe8>)
 800109c:	4927      	ldr	r1, [pc, #156]	; (800113c <sendData+0x100>)
 800109e:	4823      	ldr	r0, [pc, #140]	; (800112c <sendData+0xf0>)
 80010a0:	f002 fd40 	bl	8003b24 <siprintf>
	sprintf(cipsend, "AT+CIPSEND=%d,%i\r\n", link, strlen(response));
 80010a4:	4821      	ldr	r0, [pc, #132]	; (800112c <sendData+0xf0>)
 80010a6:	f7ff f893 	bl	80001d0 <strlen>
 80010aa:	4603      	mov	r3, r0
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4924      	ldr	r1, [pc, #144]	; (8001140 <sendData+0x104>)
 80010b0:	481d      	ldr	r0, [pc, #116]	; (8001128 <sendData+0xec>)
 80010b2:	f002 fd37 	bl	8003b24 <siprintf>
	sprintf(cipclose, "AT+CIPCLOSE=%d\r\n", link);
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4922      	ldr	r1, [pc, #136]	; (8001144 <sendData+0x108>)
 80010ba:	481d      	ldr	r0, [pc, #116]	; (8001130 <sendData+0xf4>)
 80010bc:	f002 fd32 	bl	8003b24 <siprintf>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)cipsend, strlen(cipsend), 100);
 80010c0:	4819      	ldr	r0, [pc, #100]	; (8001128 <sendData+0xec>)
 80010c2:	f7ff f885 	bl	80001d0 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	2364      	movs	r3, #100	; 0x64
 80010cc:	4916      	ldr	r1, [pc, #88]	; (8001128 <sendData+0xec>)
 80010ce:	481e      	ldr	r0, [pc, #120]	; (8001148 <sendData+0x10c>)
 80010d0:	f001 fcf9 	bl	8002ac6 <HAL_UART_Transmit>
	HAL_Delay(50);
 80010d4:	2032      	movs	r0, #50	; 0x32
 80010d6:	f000 fb69 	bl	80017ac <HAL_Delay>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)response, strlen(response), 100);
 80010da:	4814      	ldr	r0, [pc, #80]	; (800112c <sendData+0xf0>)
 80010dc:	f7ff f878 	bl	80001d0 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	2364      	movs	r3, #100	; 0x64
 80010e6:	4911      	ldr	r1, [pc, #68]	; (800112c <sendData+0xf0>)
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <sendData+0x10c>)
 80010ea:	f001 fcec 	bl	8002ac6 <HAL_UART_Transmit>
	HAL_Delay(50);
 80010ee:	2032      	movs	r0, #50	; 0x32
 80010f0:	f000 fb5c 	bl	80017ac <HAL_Delay>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)cipclose, strlen(cipclose), 100);
 80010f4:	480e      	ldr	r0, [pc, #56]	; (8001130 <sendData+0xf4>)
 80010f6:	f7ff f86b 	bl	80001d0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	490b      	ldr	r1, [pc, #44]	; (8001130 <sendData+0xf4>)
 8001102:	4811      	ldr	r0, [pc, #68]	; (8001148 <sendData+0x10c>)
 8001104:	f001 fcdf 	bl	8002ac6 <HAL_UART_Transmit>
	HAL_UART_Transmit(pc_uart, (uint8_t*)outputString, strlen(outputString), 100);
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <sendData+0xe8>)
 800110a:	f7ff f861 	bl	80001d0 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	b29a      	uxth	r2, r3
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	4903      	ldr	r1, [pc, #12]	; (8001124 <sendData+0xe8>)
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <sendData+0x110>)
 8001118:	f001 fcd5 	bl	8002ac6 <HAL_UART_Transmit>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000a70 	.word	0x20000a70
 8001128:	20000ad4 	.word	0x20000ad4
 800112c:	20000944 	.word	0x20000944
 8001130:	20000b08 	.word	0x20000b08
 8001134:	51eb851f 	.word	0x51eb851f
 8001138:	08004f44 	.word	0x08004f44
 800113c:	08004f54 	.word	0x08004f54
 8001140:	08004f98 	.word	0x08004f98
 8001144:	08004fac 	.word	0x08004fac
 8001148:	200000a4 	.word	0x200000a4
 800114c:	20000900 	.word	0x20000900

08001150 <HAL_GetTick>:
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 1);
//	}
//}

uint32_t HAL_GetTick(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	if(timeout == 1)
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_GetTick+0x34>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d104      	bne.n	8001166 <HAL_GetTick+0x16>
		safeCounter++;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_GetTick+0x38>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_GetTick+0x38>)
 8001164:	6013      	str	r3, [r2, #0]
	if(safeCounter > 7000000)
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_GetTick+0x38>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_GetTick+0x3c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d904      	bls.n	800117a <HAL_GetTick+0x2a>
	{
		safeCounter = 0;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_GetTick+0x38>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
		SysTickDisable();
		HAL_TIM_Base_Stop_IT(&htim4);//58us
		HAL_TIM_Base_Start_IT(&htim3);//20ms
		SysTickEnable();
		__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);*/
		NVIC_SystemReset();
 8001176:	f7ff fc5b 	bl	8000a30 <__NVIC_SystemReset>
		return uwTick;
	}
  return uwTick;
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_GetTick+0x40>)
 800117c:	681b      	ldr	r3, [r3, #0]
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000008e 	.word	0x2000008e
 8001188:	20000094 	.word	0x20000094
 800118c:	006acfc0 	.word	0x006acfc0
 8001190:	20000b24 	.word	0x20000b24

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_MspInit+0x4c>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_MspInit+0x4c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_MspInit+0x4c>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011d2:	2007      	movs	r0, #7
 80011d4:	f000 fbde 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	; 0x30
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a4a      	ldr	r2, [pc, #296]	; (800132c <HAL_UART_MspInit+0x148>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d134      	bne.n	8001270 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	4b49      	ldr	r3, [pc, #292]	; (8001330 <HAL_UART_MspInit+0x14c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a48      	ldr	r2, [pc, #288]	; (8001330 <HAL_UART_MspInit+0x14c>)
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b46      	ldr	r3, [pc, #280]	; (8001330 <HAL_UART_MspInit+0x14c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	4b42      	ldr	r3, [pc, #264]	; (8001330 <HAL_UART_MspInit+0x14c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a41      	ldr	r2, [pc, #260]	; (8001330 <HAL_UART_MspInit+0x14c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <HAL_UART_MspInit+0x14c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800123e:	230c      	movs	r3, #12
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124e:	2307      	movs	r3, #7
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	4836      	ldr	r0, [pc, #216]	; (8001334 <HAL_UART_MspInit+0x150>)
 800125a:	f000 fc6f 	bl	8001b3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2026      	movs	r0, #38	; 0x26
 8001264:	f000 fba1 	bl	80019aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001268:	2026      	movs	r0, #38	; 0x26
 800126a:	f000 fbba 	bl	80019e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800126e:	e058      	b.n	8001322 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a30      	ldr	r2, [pc, #192]	; (8001338 <HAL_UART_MspInit+0x154>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d153      	bne.n	8001322 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <HAL_UART_MspInit+0x14c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a2b      	ldr	r2, [pc, #172]	; (8001330 <HAL_UART_MspInit+0x14c>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_UART_MspInit+0x14c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_UART_MspInit+0x14c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a24      	ldr	r2, [pc, #144]	; (8001330 <HAL_UART_MspInit+0x14c>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <HAL_UART_MspInit+0x14c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_UART_MspInit+0x14c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_UART_MspInit+0x14c>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_UART_MspInit+0x14c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012e0:	2307      	movs	r3, #7
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4814      	ldr	r0, [pc, #80]	; (800133c <HAL_UART_MspInit+0x158>)
 80012ec:	f000 fc26 	bl	8001b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001302:	2307      	movs	r3, #7
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <HAL_UART_MspInit+0x15c>)
 800130e:	f000 fc15 	bl	8001b3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2027      	movs	r0, #39	; 0x27
 8001318:	f000 fb47 	bl	80019aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800131c:	2027      	movs	r0, #39	; 0x27
 800131e:	f000 fb60 	bl	80019e2 <HAL_NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3730      	adds	r7, #48	; 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40004400 	.word	0x40004400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	40004800 	.word	0x40004800
 800133c:	40020400 	.word	0x40020400
 8001340:	40020c00 	.word	0x40020c00

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 f9f8 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(timeout != 0 && timeout < 10)
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <TIM3_IRQHandler+0x6c>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <TIM3_IRQHandler+0x20>
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <TIM3_IRQHandler+0x6c>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	2b09      	cmp	r3, #9
 80013aa:	d805      	bhi.n	80013b8 <TIM3_IRQHandler+0x20>
			timeout++;
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <TIM3_IRQHandler+0x6c>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <TIM3_IRQHandler+0x6c>)
 80013b6:	801a      	strh	r2, [r3, #0]

		if(timeout > 2)
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <TIM3_IRQHandler+0x6c>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d905      	bls.n	80013cc <TIM3_IRQHandler+0x34>
		{
			timeout = 0;
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <TIM3_IRQHandler+0x6c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	801a      	strh	r2, [r3, #0]
			messageHandlerFlag = 1;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <TIM3_IRQHandler+0x70>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	801a      	strh	r2, [r3, #0]
		}

		if(netTimeout < 100)
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <TIM3_IRQHandler+0x74>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	2b63      	cmp	r3, #99	; 0x63
 80013d2:	d805      	bhi.n	80013e0 <TIM3_IRQHandler+0x48>
			netTimeout++;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <TIM3_IRQHandler+0x74>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <TIM3_IRQHandler+0x74>)
 80013de:	801a      	strh	r2, [r3, #0]

		if(netTimeout > 50)
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <TIM3_IRQHandler+0x74>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	2b32      	cmp	r3, #50	; 0x32
 80013e6:	d907      	bls.n	80013f8 <TIM3_IRQHandler+0x60>
		{	//STOP MOTORS
//			stopMotors();
			__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <TIM3_IRQHandler+0x78>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <TIM3_IRQHandler+0x78>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0220 	orr.w	r2, r2, #32
 80013f6:	60da      	str	r2, [r3, #12]
		}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013f8:	4806      	ldr	r0, [pc, #24]	; (8001414 <TIM3_IRQHandler+0x7c>)
 80013fa:	f001 f9c9 	bl	8002790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000008e 	.word	0x2000008e
 8001408:	20000090 	.word	0x20000090
 800140c:	20000092 	.word	0x20000092
 8001410:	200000a4 	.word	0x200000a4
 8001414:	200000e8 	.word	0x200000e8

08001418 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <USART2_IRQHandler+0x10>)
 800141e:	f001 fc87 	bl	8002d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000900 	.word	0x20000900

0800142c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
		timeout = 1;
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <USART3_IRQHandler+0x94>)
 8001432:	2201      	movs	r2, #1
 8001434:	801a      	strh	r2, [r3, #0]
	  	safeCounter = 0;
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <USART3_IRQHandler+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

	  	if(buffer_index < 2000)
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <USART3_IRQHandler+0x9c>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001444:	d20e      	bcs.n	8001464 <USART3_IRQHandler+0x38>
	  	{
	  		HAL_UART_Receive(wifi_uart, &buffer[buffer_index++], 1, 10);
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <USART3_IRQHandler+0x9c>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	b291      	uxth	r1, r2
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <USART3_IRQHandler+0x9c>)
 8001450:	8011      	strh	r1, [r2, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <USART3_IRQHandler+0xa0>)
 8001456:	18d1      	adds	r1, r2, r3
 8001458:	230a      	movs	r3, #10
 800145a:	2201      	movs	r2, #1
 800145c:	481c      	ldr	r0, [pc, #112]	; (80014d0 <USART3_IRQHandler+0xa4>)
 800145e:	f001 fbc4 	bl	8002bea <HAL_UART_Receive>
 8001462:	e005      	b.n	8001470 <USART3_IRQHandler+0x44>
	  		huart1.RxXferCount = 0;
	  		huart1.RxState = HAL_UART_STATE_READY;*/
	  	}
	  	else
	  	{
	  		HAL_UART_Receive(wifi_uart, &buffer[1999], 1, 10);
 8001464:	230a      	movs	r3, #10
 8001466:	2201      	movs	r2, #1
 8001468:	491a      	ldr	r1, [pc, #104]	; (80014d4 <USART3_IRQHandler+0xa8>)
 800146a:	4819      	ldr	r0, [pc, #100]	; (80014d0 <USART3_IRQHandler+0xa4>)
 800146c:	f001 fbbd 	bl	8002bea <HAL_UART_Receive>
	  		buffer[1999] = huart1.Instance->DR;
	  		huart1.RxXferCount = 0;
	  		huart1.RxState = HAL_UART_STATE_READY;*/
	  	}

	  	if(buffer_index > 5)
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <USART3_IRQHandler+0x9c>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	2b05      	cmp	r3, #5
 8001476:	d91e      	bls.n	80014b6 <USART3_IRQHandler+0x8a>
	  	{
	  		if(buffer[buffer_index-4] == '\r' && buffer[buffer_index-3] == '\n' && buffer[buffer_index-2] == '\r' && buffer[buffer_index-1] == '\n')
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <USART3_IRQHandler+0x9c>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	3b04      	subs	r3, #4
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <USART3_IRQHandler+0xa0>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	2b0d      	cmp	r3, #13
 8001484:	d117      	bne.n	80014b6 <USART3_IRQHandler+0x8a>
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <USART3_IRQHandler+0x9c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	3b03      	subs	r3, #3
 800148c:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <USART3_IRQHandler+0xa0>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	2b0a      	cmp	r3, #10
 8001492:	d110      	bne.n	80014b6 <USART3_IRQHandler+0x8a>
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <USART3_IRQHandler+0x9c>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	3b02      	subs	r3, #2
 800149a:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <USART3_IRQHandler+0xa0>)
 800149c:	5cd3      	ldrb	r3, [r2, r3]
 800149e:	2b0d      	cmp	r3, #13
 80014a0:	d109      	bne.n	80014b6 <USART3_IRQHandler+0x8a>
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <USART3_IRQHandler+0x9c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	4a08      	ldr	r2, [pc, #32]	; (80014cc <USART3_IRQHandler+0xa0>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	2b0a      	cmp	r3, #10
 80014ae:	d102      	bne.n	80014b6 <USART3_IRQHandler+0x8a>
	  			messageHandlerFlag = 1;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <USART3_IRQHandler+0xac>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	801a      	strh	r2, [r3, #0]
	  	}
//	    HAL_UART_IRQHandler(&huart3);
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <USART3_IRQHandler+0xa4>)
 80014b8:	f001 fc3a 	bl	8002d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */



  /* USER CODE END USART3_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000008e 	.word	0x2000008e
 80014c4:	20000094 	.word	0x20000094
 80014c8:	2000008c 	.word	0x2000008c
 80014cc:	20000130 	.word	0x20000130
 80014d0:	200000a4 	.word	0x200000a4
 80014d4:	200008ff 	.word	0x200008ff
 80014d8:	20000090 	.word	0x20000090

080014dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	return 1;
 80014e0:	2301      	movs	r3, #1
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_kill>:

int _kill(int pid, int sig)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014f6:	f002 faa3 	bl	8003a40 <__errno>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2216      	movs	r2, #22
 80014fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_exit>:

void _exit (int status)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffe7 	bl	80014ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800151e:	e7fe      	b.n	800151e <_exit+0x12>

08001520 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e00a      	b.n	8001548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001532:	f3af 8000 	nop.w
 8001536:	4601      	mov	r1, r0
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	60ba      	str	r2, [r7, #8]
 800153e:	b2ca      	uxtb	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf0      	blt.n	8001532 <_read+0x12>
	}

return len;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e009      	b.n	8001580 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	60ba      	str	r2, [r7, #8]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf1      	blt.n	800156c <_write+0x12>
	}
	return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_close>:

int _close(int file)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
	return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ba:	605a      	str	r2, [r3, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_isatty>:

int _isatty(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	return 1;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
	return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <_sbrk+0x5c>)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <_sbrk+0x60>)
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <_sbrk+0x64>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <_sbrk+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d207      	bcs.n	800163c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800162c:	f002 fa08 	bl	8003a40 <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	e009      	b.n	8001650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20020000 	.word	0x20020000
 800165c:	00000400 	.word	0x00000400
 8001660:	20000098 	.word	0x20000098
 8001664:	20000b38 	.word	0x20000b38

08001668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SystemInit+0x20>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <SystemInit+0x20>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001692:	490e      	ldr	r1, [pc, #56]	; (80016cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001694:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a8:	4c0b      	ldr	r4, [pc, #44]	; (80016d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016b6:	f7ff ffd7 	bl	8001668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ba:	f002 f9c7 	bl	8003a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016be:	f7fe ff5b 	bl	8000578 <main>
  bx  lr    
 80016c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016d0:	08005134 	.word	0x08005134
  ldr r2, =_sbss
 80016d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016d8:	20000b38 	.word	0x20000b38

080016dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f943 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fd3e 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f95b 	bl	80019fe <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 f923 	bl	80019aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	20000008 	.word	0x20000008
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000b24 	.word	0x20000b24

080017ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff fccc 	bl	8001150 <HAL_GetTick>
 80017b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d005      	beq.n	80017d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_Delay+0x44>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017d2:	bf00      	nop
 80017d4:	f7ff fcbc 	bl	8001150 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d8f7      	bhi.n	80017d4 <HAL_Delay+0x28>
  {
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008

080017f4 <__NVIC_SetPriorityGrouping>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_EnableIRQ>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db0b      	blt.n	8001882 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f003 021f 	and.w	r2, r3, #31
 8001870:	4907      	ldr	r1, [pc, #28]	; (8001890 <__NVIC_EnableIRQ+0x38>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	2001      	movs	r0, #1
 800187a:	fa00 f202 	lsl.w	r2, r0, r2
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000e100 	.word	0xe000e100

08001894 <__NVIC_SetPriority>:
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	; (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001960:	d301      	bcc.n	8001966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001962:	2301      	movs	r3, #1
 8001964:	e00f      	b.n	8001986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <SysTick_Config+0x40>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196e:	210f      	movs	r1, #15
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f7ff ff8e 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <SysTick_Config+0x40>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <SysTick_Config+0x40>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff29 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019bc:	f7ff ff3e 	bl	800183c <__NVIC_GetPriorityGrouping>
 80019c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff ff8e 	bl	80018e8 <NVIC_EncodePriority>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff5d 	bl	8001894 <__NVIC_SetPriority>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff31 	bl	8001858 <__NVIC_EnableIRQ>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffa2 	bl	8001950 <SysTick_Config>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a24:	f7ff fb94 	bl	8001150 <HAL_GetTick>
 8001a28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d008      	beq.n	8001a48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e052      	b.n	8001aee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0216 	bic.w	r2, r2, #22
 8001a56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d103      	bne.n	8001a78 <HAL_DMA_Abort+0x62>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d007      	beq.n	8001a88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0208 	bic.w	r2, r2, #8
 8001a86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a98:	e013      	b.n	8001ac2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9a:	f7ff fb59 	bl	8001150 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d90c      	bls.n	8001ac2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e015      	b.n	8001aee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1e4      	bne.n	8001a9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	223f      	movs	r2, #63	; 0x3f
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d004      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e00c      	b.n	8001b2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2205      	movs	r2, #5
 8001b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e16b      	b.n	8001e30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 815a 	bne.w	8001e2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d005      	beq.n	8001b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d130      	bne.n	8001bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0201 	and.w	r2, r3, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d017      	beq.n	8001c2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d123      	bne.n	8001c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80b4 	beq.w	8001e2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b60      	ldr	r3, [pc, #384]	; (8001e48 <HAL_GPIO_Init+0x30c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a5f      	ldr	r2, [pc, #380]	; (8001e48 <HAL_GPIO_Init+0x30c>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_GPIO_Init+0x30c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cde:	4a5b      	ldr	r2, [pc, #364]	; (8001e4c <HAL_GPIO_Init+0x310>)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <HAL_GPIO_Init+0x314>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d02b      	beq.n	8001d62 <HAL_GPIO_Init+0x226>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a51      	ldr	r2, [pc, #324]	; (8001e54 <HAL_GPIO_Init+0x318>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d025      	beq.n	8001d5e <HAL_GPIO_Init+0x222>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a50      	ldr	r2, [pc, #320]	; (8001e58 <HAL_GPIO_Init+0x31c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01f      	beq.n	8001d5a <HAL_GPIO_Init+0x21e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_GPIO_Init+0x320>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x21a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_GPIO_Init+0x324>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x216>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4d      	ldr	r2, [pc, #308]	; (8001e64 <HAL_GPIO_Init+0x328>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x212>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4c      	ldr	r2, [pc, #304]	; (8001e68 <HAL_GPIO_Init+0x32c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x20e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_GPIO_Init+0x330>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x20a>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e00e      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d46:	2308      	movs	r3, #8
 8001d48:	e00c      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d4a:	2306      	movs	r3, #6
 8001d4c:	e00a      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d4e:	2305      	movs	r3, #5
 8001d50:	e008      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d52:	2304      	movs	r3, #4
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e004      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d62:	2300      	movs	r3, #0
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	f002 0203 	and.w	r2, r2, #3
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4093      	lsls	r3, r2
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d74:	4935      	ldr	r1, [pc, #212]	; (8001e4c <HAL_GPIO_Init+0x310>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da6:	4a32      	ldr	r2, [pc, #200]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dac:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd0:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	f67f ae90 	bls.w	8001b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40021400 	.word	0x40021400
 8001e68:	40021800 	.word	0x40021800
 8001e6c:	40021c00 	.word	0x40021c00
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e90:	e003      	b.n	8001e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e264      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d075      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec6:	4ba3      	ldr	r3, [pc, #652]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d00c      	beq.n	8001eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4ba0      	ldr	r3, [pc, #640]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d112      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ede:	4b9d      	ldr	r3, [pc, #628]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	4b99      	ldr	r3, [pc, #612]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x108>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d157      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e23f      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x74>
 8001f0e:	4b91      	ldr	r3, [pc, #580]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a90      	ldr	r2, [pc, #576]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f26:	4b8b      	ldr	r3, [pc, #556]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a8a      	ldr	r2, [pc, #552]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b88      	ldr	r3, [pc, #544]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a87      	ldr	r2, [pc, #540]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f40:	4b84      	ldr	r3, [pc, #528]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a83      	ldr	r2, [pc, #524]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a80      	ldr	r2, [pc, #512]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff f8f6 	bl	8001150 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f8f2 	bl	8001150 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e204      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b76      	ldr	r3, [pc, #472]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xc0>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff f8e2 	bl	8001150 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff f8de 	bl	8001150 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1f0      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b6c      	ldr	r3, [pc, #432]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0xe8>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d063      	beq.n	8002086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fbe:	4b65      	ldr	r3, [pc, #404]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b62      	ldr	r3, [pc, #392]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd6:	4b5f      	ldr	r3, [pc, #380]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1c4      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b56      	ldr	r3, [pc, #344]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4952      	ldr	r1, [pc, #328]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e03a      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b4f      	ldr	r3, [pc, #316]	; (8002158 <HAL_RCC_OscConfig+0x2b0>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f897 	bl	8001150 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff f893 	bl	8001150 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1a5      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4940      	ldr	r1, [pc, #256]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_RCC_OscConfig+0x2b0>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff f876 	bl	8001150 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff f872 	bl	8001150 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e184      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d030      	beq.n	80020f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_RCC_OscConfig+0x2b4>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff f856 	bl	8001150 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff f852 	bl	8001150 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e164      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x200>
 80020c6:	e015      	b.n	80020f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_OscConfig+0x2b4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff f83f 	bl	8001150 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff f83b 	bl	8001150 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e14d      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a0 	beq.w	8002242 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x2b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d121      	bne.n	8002182 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_RCC_OscConfig+0x2b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_RCC_OscConfig+0x2b8>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7ff f801 	bl	8001150 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e011      	b.n	8002176 <HAL_RCC_OscConfig+0x2ce>
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	42470000 	.word	0x42470000
 800215c:	42470e80 	.word	0x42470e80
 8002160:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7fe fff4 	bl	8001150 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e106      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b85      	ldr	r3, [pc, #532]	; (800238c <HAL_RCC_OscConfig+0x4e4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d106      	bne.n	8002198 <HAL_RCC_OscConfig+0x2f0>
 800218a:	4b81      	ldr	r3, [pc, #516]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a80      	ldr	r2, [pc, #512]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	e01c      	b.n	80021d2 <HAL_RCC_OscConfig+0x32a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x312>
 80021a0:	4b7b      	ldr	r3, [pc, #492]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a7a      	ldr	r2, [pc, #488]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
 80021ac:	4b78      	ldr	r3, [pc, #480]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a77      	ldr	r2, [pc, #476]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0x32a>
 80021ba:	4b75      	ldr	r3, [pc, #468]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a74      	ldr	r2, [pc, #464]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
 80021c6:	4b72      	ldr	r3, [pc, #456]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a71      	ldr	r2, [pc, #452]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d015      	beq.n	8002206 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7fe ffb9 	bl	8001150 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe ffb5 	bl	8001150 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0c5      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ee      	beq.n	80021e2 <HAL_RCC_OscConfig+0x33a>
 8002204:	e014      	b.n	8002230 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7fe ffa3 	bl	8001150 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7fe ff9f 	bl	8001150 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0af      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	4b5a      	ldr	r3, [pc, #360]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ee      	bne.n	800220e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b56      	ldr	r3, [pc, #344]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a55      	ldr	r2, [pc, #340]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 809b 	beq.w	8002382 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800224c:	4b50      	ldr	r3, [pc, #320]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d05c      	beq.n	8002312 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d141      	bne.n	80022e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <HAL_RCC_OscConfig+0x4ec>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe ff73 	bl	8001150 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe ff6f 	bl	8001150 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e081      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002280:	4b43      	ldr	r3, [pc, #268]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	019b      	lsls	r3, r3, #6
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	3b01      	subs	r3, #1
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	061b      	lsls	r3, r3, #24
 80022b0:	4937      	ldr	r1, [pc, #220]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_OscConfig+0x4ec>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff48 	bl	8001150 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe ff44 	bl	8001150 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e056      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x41c>
 80022e2:	e04e      	b.n	8002382 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_OscConfig+0x4ec>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe ff31 	bl	8001150 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe ff2d 	bl	8001150 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e03f      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x44a>
 8002310:	e037      	b.n	8002382 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e032      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_RCC_OscConfig+0x4e8>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d028      	beq.n	800237e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d121      	bne.n	800237e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d11a      	bne.n	800237e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800234e:	4013      	ands	r3, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002354:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002356:	4293      	cmp	r3, r2
 8002358:	d111      	bne.n	800237e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d107      	bne.n	800237e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40007000 	.word	0x40007000
 8002390:	40023800 	.word	0x40023800
 8002394:	42470060 	.word	0x42470060

08002398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0cc      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b68      	ldr	r3, [pc, #416]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d90c      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0b8      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ec:	4b59      	ldr	r3, [pc, #356]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a58      	ldr	r2, [pc, #352]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002404:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800240e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	494d      	ldr	r1, [pc, #308]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d044      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d119      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e07f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d003      	beq.n	8002456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002452:	2b03      	cmp	r3, #3
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e06f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e067      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4934      	ldr	r1, [pc, #208]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7fe fe62 	bl	8001150 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7fe fe5e 	bl	8001150 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e04f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d20c      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e032      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4916      	ldr	r1, [pc, #88]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	490e      	ldr	r1, [pc, #56]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800251e:	f000 f821 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490a      	ldr	r1, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff f8f0 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00
 8002554:	40023800 	.word	0x40023800
 8002558:	08004fc0 	.word	0x08004fc0
 800255c:	20000000 	.word	0x20000000
 8002560:	20000004 	.word	0x20000004

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	2300      	movs	r3, #0
 8002576:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800257c:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b08      	cmp	r3, #8
 8002586:	d00d      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002588:	2b08      	cmp	r3, #8
 800258a:	f200 80bd 	bhi.w	8002708 <HAL_RCC_GetSysClockFreq+0x1a4>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x34>
 8002592:	2b04      	cmp	r3, #4
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x3a>
 8002596:	e0b7      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b61      	ldr	r3, [pc, #388]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800259a:	60bb      	str	r3, [r7, #8]
       break;
 800259c:	e0b7      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800259e:	4b61      	ldr	r3, [pc, #388]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80025a0:	60bb      	str	r3, [r7, #8]
      break;
 80025a2:	e0b4      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a4:	4b5d      	ldr	r3, [pc, #372]	; (800271c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ae:	4b5b      	ldr	r3, [pc, #364]	; (800271c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d04d      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ba:	4b58      	ldr	r3, [pc, #352]	; (800271c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	461a      	mov	r2, r3
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ca:	f04f 0100 	mov.w	r1, #0
 80025ce:	ea02 0800 	and.w	r8, r2, r0
 80025d2:	ea03 0901 	and.w	r9, r3, r1
 80025d6:	4640      	mov	r0, r8
 80025d8:	4649      	mov	r1, r9
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	014b      	lsls	r3, r1, #5
 80025e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025e8:	0142      	lsls	r2, r0, #5
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	ebb0 0008 	subs.w	r0, r0, r8
 80025f2:	eb61 0109 	sbc.w	r1, r1, r9
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	018b      	lsls	r3, r1, #6
 8002600:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002604:	0182      	lsls	r2, r0, #6
 8002606:	1a12      	subs	r2, r2, r0
 8002608:	eb63 0301 	sbc.w	r3, r3, r1
 800260c:	f04f 0000 	mov.w	r0, #0
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	00d9      	lsls	r1, r3, #3
 8002616:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800261a:	00d0      	lsls	r0, r2, #3
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	eb12 0208 	adds.w	r2, r2, r8
 8002624:	eb43 0309 	adc.w	r3, r3, r9
 8002628:	f04f 0000 	mov.w	r0, #0
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	0259      	lsls	r1, r3, #9
 8002632:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002636:	0250      	lsls	r0, r2, #9
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	461a      	mov	r2, r3
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	f7fd fe1a 	bl	8000280 <__aeabi_uldivmod>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4613      	mov	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e04a      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	099b      	lsrs	r3, r3, #6
 800265c:	461a      	mov	r2, r3
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002666:	f04f 0100 	mov.w	r1, #0
 800266a:	ea02 0400 	and.w	r4, r2, r0
 800266e:	ea03 0501 	and.w	r5, r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	014b      	lsls	r3, r1, #5
 8002680:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002684:	0142      	lsls	r2, r0, #5
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	1b00      	subs	r0, r0, r4
 800268c:	eb61 0105 	sbc.w	r1, r1, r5
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	018b      	lsls	r3, r1, #6
 800269a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800269e:	0182      	lsls	r2, r0, #6
 80026a0:	1a12      	subs	r2, r2, r0
 80026a2:	eb63 0301 	sbc.w	r3, r3, r1
 80026a6:	f04f 0000 	mov.w	r0, #0
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	00d9      	lsls	r1, r3, #3
 80026b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026b4:	00d0      	lsls	r0, r2, #3
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	1912      	adds	r2, r2, r4
 80026bc:	eb45 0303 	adc.w	r3, r5, r3
 80026c0:	f04f 0000 	mov.w	r0, #0
 80026c4:	f04f 0100 	mov.w	r1, #0
 80026c8:	0299      	lsls	r1, r3, #10
 80026ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026ce:	0290      	lsls	r0, r2, #10
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	461a      	mov	r2, r3
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	f7fd fdce 	bl	8000280 <__aeabi_uldivmod>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4613      	mov	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	60bb      	str	r3, [r7, #8]
      break;
 8002706:	e002      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800270a:	60bb      	str	r3, [r7, #8]
      break;
 800270c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270e:	68bb      	ldr	r3, [r7, #8]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	00f42400 	.word	0x00f42400
 8002724:	007a1200 	.word	0x007a1200

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_GetHCLKFreq+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000000 	.word	0x20000000

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002744:	f7ff fff0 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0a9b      	lsrs	r3, r3, #10
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	08004fd0 	.word	0x08004fd0

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800276c:	f7ff ffdc 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0b5b      	lsrs	r3, r3, #13
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4903      	ldr	r1, [pc, #12]	; (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	08004fd0 	.word	0x08004fd0

08002790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d122      	bne.n	80027ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d11b      	bne.n	80027ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0202 	mvn.w	r2, #2
 80027bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8f8 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e005      	b.n	80027e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8ea 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f8fb 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d122      	bne.n	8002840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b04      	cmp	r3, #4
 8002806:	d11b      	bne.n	8002840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0204 	mvn.w	r2, #4
 8002810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2202      	movs	r2, #2
 8002816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f8ce 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8c0 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f8d1 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b08      	cmp	r3, #8
 800284c:	d122      	bne.n	8002894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b08      	cmp	r3, #8
 800285a:	d11b      	bne.n	8002894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0208 	mvn.w	r2, #8
 8002864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2204      	movs	r2, #4
 800286a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8a4 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f896 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f8a7 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d122      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d11b      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0210 	mvn.w	r2, #16
 80028b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2208      	movs	r2, #8
 80028be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f87a 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f86c 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f87d 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	d107      	bne.n	8002914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0201 	mvn.w	r2, #1
 800290c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f846 	bl	80029a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291e:	2b80      	cmp	r3, #128	; 0x80
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292c:	2b80      	cmp	r3, #128	; 0x80
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f86c 	bl	8002a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d10e      	bne.n	800296c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b40      	cmp	r3, #64	; 0x40
 800295a:	d107      	bne.n	800296c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f842 	bl	80029f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b20      	cmp	r3, #32
 8002978:	d10e      	bne.n	8002998 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b20      	cmp	r3, #32
 8002986:	d107      	bne.n	8002998 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0220 	mvn.w	r2, #32
 8002990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f836 	bl	8002a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e03f      	b.n	8002abe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fbc6 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fe1d 	bl	80036b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b08a      	sub	sp, #40	; 0x28
 8002aca:	af02      	add	r7, sp, #8
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d17c      	bne.n	8002be0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_UART_Transmit+0x2c>
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e075      	b.n	8002be2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_UART_Transmit+0x3e>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e06e      	b.n	8002be2 <HAL_UART_Transmit+0x11c>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2221      	movs	r2, #33	; 0x21
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b1a:	f7fe fb19 	bl	8001150 <HAL_GetTick>
 8002b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	88fa      	ldrh	r2, [r7, #6]
 8002b24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	88fa      	ldrh	r2, [r7, #6]
 8002b2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b34:	d108      	bne.n	8002b48 <HAL_UART_Transmit+0x82>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d104      	bne.n	8002b48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	e003      	b.n	8002b50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b58:	e02a      	b.n	8002bb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fb9b 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e036      	b.n	8002be2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	e007      	b.n	8002ba2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1cf      	bne.n	8002b5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2140      	movs	r1, #64	; 0x40
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fb6b 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e006      	b.n	8002be2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e000      	b.n	8002be2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b08a      	sub	sp, #40	; 0x28
 8002bee:	af02      	add	r7, sp, #8
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	603b      	str	r3, [r7, #0]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 808c 	bne.w	8002d24 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Receive+0x2e>
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e084      	b.n	8002d26 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Receive+0x40>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e07d      	b.n	8002d26 <HAL_UART_Receive+0x13c>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2222      	movs	r2, #34	; 0x22
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c46:	f7fe fa83 	bl	8001150 <HAL_GetTick>
 8002c4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c60:	d108      	bne.n	8002c74 <HAL_UART_Receive+0x8a>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d104      	bne.n	8002c74 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	e003      	b.n	8002c7c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c84:	e043      	b.n	8002d0e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2120      	movs	r1, #32
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fb05 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e042      	b.n	8002d26 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	3302      	adds	r3, #2
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	e01f      	b.n	8002d00 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc8:	d007      	beq.n	8002cda <HAL_UART_Receive+0xf0>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_UART_Receive+0xfe>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e008      	b.n	8002cfa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1b6      	bne.n	8002c86 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0ba      	sub	sp, #232	; 0xe8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_UART_IRQHandler+0x66>
 8002d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fbd3 	bl	800353a <UART_Receive_IT>
      return;
 8002d94:	e256      	b.n	8003244 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80de 	beq.w	8002f5c <HAL_UART_IRQHandler+0x22c>
 8002da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80d1 	beq.w	8002f5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_UART_IRQHandler+0xae>
 8002dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_UART_IRQHandler+0xd2>
 8002dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f043 0202 	orr.w	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_UART_IRQHandler+0xf6>
 8002e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d011      	beq.n	8002e56 <HAL_UART_IRQHandler+0x126>
 8002e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0208 	orr.w	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 81ed 	beq.w	800323a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_UART_IRQHandler+0x14e>
 8002e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb5e 	bl	800353a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_UART_IRQHandler+0x17a>
 8002ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d04f      	beq.n	8002f4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa66 	bl	800337c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d141      	bne.n	8002f42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3314      	adds	r3, #20
 8002ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002eea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1d9      	bne.n	8002ebe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d013      	beq.n	8002f3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	4a7d      	ldr	r2, [pc, #500]	; (800310c <HAL_UART_IRQHandler+0x3dc>)
 8002f18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fde9 	bl	8001af6 <HAL_DMA_Abort_IT>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f34:	4610      	mov	r0, r2
 8002f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	e00e      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f99a 	bl	8003274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e00a      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f996 	bl	8003274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	e006      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f992 	bl	8003274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f56:	e170      	b.n	800323a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	bf00      	nop
    return;
 8002f5a:	e16e      	b.n	800323a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 814a 	bne.w	80031fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8143 	beq.w	80031fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 813c 	beq.w	80031fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	f040 80b4 	bne.w	8003110 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8140 	beq.w	800323e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	f080 8139 	bcs.w	800323e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fde:	f000 8088 	beq.w	80030f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800300e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003016:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800301a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1d9      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3314      	adds	r3, #20
 8003034:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800303e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003052:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003056:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800305a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e1      	bne.n	800302e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3314      	adds	r3, #20
 8003070:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800307a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800307c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800308e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003090:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003094:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800309c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e3      	bne.n	800306a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c2:	f023 0310 	bic.w	r3, r3, #16
 80030c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80030d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030dc:	e841 2300 	strex	r3, r2, [r1]
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e3      	bne.n	80030b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe fc92 	bl	8001a16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4619      	mov	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f8c0 	bl	8003288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003108:	e099      	b.n	800323e <HAL_UART_IRQHandler+0x50e>
 800310a:	bf00      	nop
 800310c:	08003443 	.word	0x08003443
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003118:	b29b      	uxth	r3, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 808b 	beq.w	8003242 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800312c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8086 	beq.w	8003242 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	330c      	adds	r3, #12
 800313c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800314c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	330c      	adds	r3, #12
 8003156:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800315a:	647a      	str	r2, [r7, #68]	; 0x44
 800315c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003162:	e841 2300 	strex	r3, r2, [r1]
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1e3      	bne.n	8003136 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3314      	adds	r3, #20
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	623b      	str	r3, [r7, #32]
   return(result);
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3314      	adds	r3, #20
 800318e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003192:	633a      	str	r2, [r7, #48]	; 0x30
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e3      	bne.n	800316e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0310 	bic.w	r3, r3, #16
 80031ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031d8:	61fa      	str	r2, [r7, #28]
 80031da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	69b9      	ldr	r1, [r7, #24]
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	e841 2300 	strex	r3, r2, [r1]
 80031e4:	617b      	str	r3, [r7, #20]
   return(result);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e3      	bne.n	80031b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031f0:	4619      	mov	r1, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f848 	bl	8003288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031f8:	e023      	b.n	8003242 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_UART_IRQHandler+0x4ea>
 8003206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f929 	bl	800346a <UART_Transmit_IT>
    return;
 8003218:	e014      	b.n	8003244 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800321a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00e      	beq.n	8003244 <HAL_UART_IRQHandler+0x514>
 8003226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f969 	bl	800350a <UART_EndTransmit_IT>
    return;
 8003238:	e004      	b.n	8003244 <HAL_UART_IRQHandler+0x514>
    return;
 800323a:	bf00      	nop
 800323c:	e002      	b.n	8003244 <HAL_UART_IRQHandler+0x514>
      return;
 800323e:	bf00      	nop
 8003240:	e000      	b.n	8003244 <HAL_UART_IRQHandler+0x514>
      return;
 8003242:	bf00      	nop
  }
}
 8003244:	37e8      	adds	r7, #232	; 0xe8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop

0800324c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b090      	sub	sp, #64	; 0x40
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b0:	e050      	b.n	8003354 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d04c      	beq.n	8003354 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80032c0:	f7fd ff46 	bl	8001150 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d241      	bcs.n	8003354 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032f0:	637a      	str	r2, [r7, #52]	; 0x34
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f8:	e841 2300 	strex	r3, r2, [r1]
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e5      	bne.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3314      	adds	r3, #20
 800330a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	613b      	str	r3, [r7, #16]
   return(result);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	63bb      	str	r3, [r7, #56]	; 0x38
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3314      	adds	r3, #20
 8003322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003324:	623a      	str	r2, [r7, #32]
 8003326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003328:	69f9      	ldr	r1, [r7, #28]
 800332a:	6a3a      	ldr	r2, [r7, #32]
 800332c:	e841 2300 	strex	r3, r2, [r1]
 8003330:	61bb      	str	r3, [r7, #24]
   return(result);
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e5      	bne.n	8003304 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e00f      	b.n	8003374 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4013      	ands	r3, r2
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	429a      	cmp	r2, r3
 8003370:	d09f      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3740      	adds	r7, #64	; 0x40
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800337c:	b480      	push	{r7}
 800337e:	b095      	sub	sp, #84	; 0x54
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	330c      	adds	r3, #12
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	e853 3f00 	ldrex	r3, [r3]
 8003392:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a4:	643a      	str	r2, [r7, #64]	; 0x40
 80033a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e5      	bne.n	8003384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3314      	adds	r3, #20
 80033be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3314      	adds	r3, #20
 80033d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e5      	bne.n	80033b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d119      	bne.n	8003428 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	60bb      	str	r3, [r7, #8]
   return(result);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f023 0310 	bic.w	r3, r3, #16
 800340a:	647b      	str	r3, [r7, #68]	; 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003414:	61ba      	str	r2, [r7, #24]
 8003416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6979      	ldr	r1, [r7, #20]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	613b      	str	r3, [r7, #16]
   return(result);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e5      	bne.n	80033f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003436:	bf00      	nop
 8003438:	3754      	adds	r7, #84	; 0x54
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f7ff ff09 	bl	8003274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b21      	cmp	r3, #33	; 0x21
 800347c:	d13e      	bne.n	80034fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d114      	bne.n	80034b2 <UART_Transmit_IT+0x48>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d110      	bne.n	80034b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	1c9a      	adds	r2, r3, #2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	621a      	str	r2, [r3, #32]
 80034b0:	e008      	b.n	80034c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	1c59      	adds	r1, r3, #1
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6211      	str	r1, [r2, #32]
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4619      	mov	r1, r3
 80034d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10f      	bne.n	80034f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003520:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fe8e 	bl	800324c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b08c      	sub	sp, #48	; 0x30
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b22      	cmp	r3, #34	; 0x22
 800354c:	f040 80ab 	bne.w	80036a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003558:	d117      	bne.n	800358a <UART_Receive_IT+0x50>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d113      	bne.n	800358a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	b29b      	uxth	r3, r3
 8003574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003578:	b29a      	uxth	r2, r3
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	1c9a      	adds	r2, r3, #2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28
 8003588:	e026      	b.n	80035d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359c:	d007      	beq.n	80035ae <UART_Receive_IT+0x74>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <UART_Receive_IT+0x82>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e008      	b.n	80035ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4619      	mov	r1, r3
 80035e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d15a      	bne.n	80036a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0220 	bic.w	r2, r2, #32
 80035fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800360a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	2b01      	cmp	r3, #1
 800362a:	d135      	bne.n	8003698 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	330c      	adds	r3, #12
 8003638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	613b      	str	r3, [r7, #16]
   return(result);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f023 0310 	bic.w	r3, r3, #16
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003652:	623a      	str	r2, [r7, #32]
 8003654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	69f9      	ldr	r1, [r7, #28]
 8003658:	6a3a      	ldr	r2, [r7, #32]
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e5      	bne.n	8003632 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b10      	cmp	r3, #16
 8003672:	d10a      	bne.n	800368a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800368e:	4619      	mov	r1, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fdf9 	bl	8003288 <HAL_UARTEx_RxEventCallback>
 8003696:	e002      	b.n	800369e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fde1 	bl	8003260 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e002      	b.n	80036a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3730      	adds	r7, #48	; 0x30
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b4:	b09f      	sub	sp, #124	; 0x7c
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c6:	68d9      	ldr	r1, [r3, #12]
 80036c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	ea40 0301 	orr.w	r3, r0, r1
 80036d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	431a      	orrs	r2, r3
 80036dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80036ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036f4:	f021 010c 	bic.w	r1, r1, #12
 80036f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036fe:	430b      	orrs	r3, r1
 8003700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	6999      	ldr	r1, [r3, #24]
 8003710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	ea40 0301 	orr.w	r3, r0, r1
 8003718:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800371a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4bc5      	ldr	r3, [pc, #788]	; (8003a34 <UART_SetConfig+0x384>)
 8003720:	429a      	cmp	r2, r3
 8003722:	d004      	beq.n	800372e <UART_SetConfig+0x7e>
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4bc3      	ldr	r3, [pc, #780]	; (8003a38 <UART_SetConfig+0x388>)
 800372a:	429a      	cmp	r2, r3
 800372c:	d103      	bne.n	8003736 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800372e:	f7ff f81b 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8003732:	6778      	str	r0, [r7, #116]	; 0x74
 8003734:	e002      	b.n	800373c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003736:	f7ff f803 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 800373a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800373c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003744:	f040 80b6 	bne.w	80038b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374a:	461c      	mov	r4, r3
 800374c:	f04f 0500 	mov.w	r5, #0
 8003750:	4622      	mov	r2, r4
 8003752:	462b      	mov	r3, r5
 8003754:	1891      	adds	r1, r2, r2
 8003756:	6439      	str	r1, [r7, #64]	; 0x40
 8003758:	415b      	adcs	r3, r3
 800375a:	647b      	str	r3, [r7, #68]	; 0x44
 800375c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003760:	1912      	adds	r2, r2, r4
 8003762:	eb45 0303 	adc.w	r3, r5, r3
 8003766:	f04f 0000 	mov.w	r0, #0
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	00d9      	lsls	r1, r3, #3
 8003770:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003774:	00d0      	lsls	r0, r2, #3
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	1911      	adds	r1, r2, r4
 800377c:	6639      	str	r1, [r7, #96]	; 0x60
 800377e:	416b      	adcs	r3, r5
 8003780:	667b      	str	r3, [r7, #100]	; 0x64
 8003782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	461a      	mov	r2, r3
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	1891      	adds	r1, r2, r2
 800378e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003790:	415b      	adcs	r3, r3
 8003792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003794:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003798:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800379c:	f7fc fd70 	bl	8000280 <__aeabi_uldivmod>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4ba5      	ldr	r3, [pc, #660]	; (8003a3c <UART_SetConfig+0x38c>)
 80037a6:	fba3 2302 	umull	r2, r3, r3, r2
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	011e      	lsls	r6, r3, #4
 80037ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b0:	461c      	mov	r4, r3
 80037b2:	f04f 0500 	mov.w	r5, #0
 80037b6:	4622      	mov	r2, r4
 80037b8:	462b      	mov	r3, r5
 80037ba:	1891      	adds	r1, r2, r2
 80037bc:	6339      	str	r1, [r7, #48]	; 0x30
 80037be:	415b      	adcs	r3, r3
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
 80037c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037c6:	1912      	adds	r2, r2, r4
 80037c8:	eb45 0303 	adc.w	r3, r5, r3
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	00d9      	lsls	r1, r3, #3
 80037d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037da:	00d0      	lsls	r0, r2, #3
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	1911      	adds	r1, r2, r4
 80037e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80037e4:	416b      	adcs	r3, r5
 80037e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	461a      	mov	r2, r3
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	1891      	adds	r1, r2, r2
 80037f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80037f6:	415b      	adcs	r3, r3
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003802:	f7fc fd3d 	bl	8000280 <__aeabi_uldivmod>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4b8c      	ldr	r3, [pc, #560]	; (8003a3c <UART_SetConfig+0x38c>)
 800380c:	fba3 1302 	umull	r1, r3, r3, r2
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	2164      	movs	r1, #100	; 0x64
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	3332      	adds	r3, #50	; 0x32
 800381e:	4a87      	ldr	r2, [pc, #540]	; (8003a3c <UART_SetConfig+0x38c>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800382c:	441e      	add	r6, r3
 800382e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003830:	4618      	mov	r0, r3
 8003832:	f04f 0100 	mov.w	r1, #0
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	1894      	adds	r4, r2, r2
 800383c:	623c      	str	r4, [r7, #32]
 800383e:	415b      	adcs	r3, r3
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003846:	1812      	adds	r2, r2, r0
 8003848:	eb41 0303 	adc.w	r3, r1, r3
 800384c:	f04f 0400 	mov.w	r4, #0
 8003850:	f04f 0500 	mov.w	r5, #0
 8003854:	00dd      	lsls	r5, r3, #3
 8003856:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800385a:	00d4      	lsls	r4, r2, #3
 800385c:	4622      	mov	r2, r4
 800385e:	462b      	mov	r3, r5
 8003860:	1814      	adds	r4, r2, r0
 8003862:	653c      	str	r4, [r7, #80]	; 0x50
 8003864:	414b      	adcs	r3, r1
 8003866:	657b      	str	r3, [r7, #84]	; 0x54
 8003868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	461a      	mov	r2, r3
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	1891      	adds	r1, r2, r2
 8003874:	61b9      	str	r1, [r7, #24]
 8003876:	415b      	adcs	r3, r3
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800387e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003882:	f7fc fcfd 	bl	8000280 <__aeabi_uldivmod>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4b6c      	ldr	r3, [pc, #432]	; (8003a3c <UART_SetConfig+0x38c>)
 800388c:	fba3 1302 	umull	r1, r3, r3, r2
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	2164      	movs	r1, #100	; 0x64
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	3332      	adds	r3, #50	; 0x32
 800389e:	4a67      	ldr	r2, [pc, #412]	; (8003a3c <UART_SetConfig+0x38c>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	f003 0207 	and.w	r2, r3, #7
 80038aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4432      	add	r2, r6
 80038b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038b2:	e0b9      	b.n	8003a28 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b6:	461c      	mov	r4, r3
 80038b8:	f04f 0500 	mov.w	r5, #0
 80038bc:	4622      	mov	r2, r4
 80038be:	462b      	mov	r3, r5
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	6139      	str	r1, [r7, #16]
 80038c4:	415b      	adcs	r3, r3
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038cc:	1912      	adds	r2, r2, r4
 80038ce:	eb45 0303 	adc.w	r3, r5, r3
 80038d2:	f04f 0000 	mov.w	r0, #0
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	00d9      	lsls	r1, r3, #3
 80038dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038e0:	00d0      	lsls	r0, r2, #3
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	eb12 0804 	adds.w	r8, r2, r4
 80038ea:	eb43 0905 	adc.w	r9, r3, r5
 80038ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f04f 0100 	mov.w	r1, #0
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	008b      	lsls	r3, r1, #2
 8003902:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003906:	0082      	lsls	r2, r0, #2
 8003908:	4640      	mov	r0, r8
 800390a:	4649      	mov	r1, r9
 800390c:	f7fc fcb8 	bl	8000280 <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4b49      	ldr	r3, [pc, #292]	; (8003a3c <UART_SetConfig+0x38c>)
 8003916:	fba3 2302 	umull	r2, r3, r3, r2
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	011e      	lsls	r6, r3, #4
 800391e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003920:	4618      	mov	r0, r3
 8003922:	f04f 0100 	mov.w	r1, #0
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	1894      	adds	r4, r2, r2
 800392c:	60bc      	str	r4, [r7, #8]
 800392e:	415b      	adcs	r3, r3
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003936:	1812      	adds	r2, r2, r0
 8003938:	eb41 0303 	adc.w	r3, r1, r3
 800393c:	f04f 0400 	mov.w	r4, #0
 8003940:	f04f 0500 	mov.w	r5, #0
 8003944:	00dd      	lsls	r5, r3, #3
 8003946:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800394a:	00d4      	lsls	r4, r2, #3
 800394c:	4622      	mov	r2, r4
 800394e:	462b      	mov	r3, r5
 8003950:	1814      	adds	r4, r2, r0
 8003952:	64bc      	str	r4, [r7, #72]	; 0x48
 8003954:	414b      	adcs	r3, r1
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	f04f 0100 	mov.w	r1, #0
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	008b      	lsls	r3, r1, #2
 800396c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003970:	0082      	lsls	r2, r0, #2
 8003972:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003976:	f7fc fc83 	bl	8000280 <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <UART_SetConfig+0x38c>)
 8003980:	fba3 1302 	umull	r1, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	2164      	movs	r1, #100	; 0x64
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	3332      	adds	r3, #50	; 0x32
 8003992:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <UART_SetConfig+0x38c>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800399e:	441e      	add	r6, r3
 80039a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a2:	4618      	mov	r0, r3
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	1894      	adds	r4, r2, r2
 80039ae:	603c      	str	r4, [r7, #0]
 80039b0:	415b      	adcs	r3, r3
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039b8:	1812      	adds	r2, r2, r0
 80039ba:	eb41 0303 	adc.w	r3, r1, r3
 80039be:	f04f 0400 	mov.w	r4, #0
 80039c2:	f04f 0500 	mov.w	r5, #0
 80039c6:	00dd      	lsls	r5, r3, #3
 80039c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039cc:	00d4      	lsls	r4, r2, #3
 80039ce:	4622      	mov	r2, r4
 80039d0:	462b      	mov	r3, r5
 80039d2:	eb12 0a00 	adds.w	sl, r2, r0
 80039d6:	eb43 0b01 	adc.w	fp, r3, r1
 80039da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4618      	mov	r0, r3
 80039e0:	f04f 0100 	mov.w	r1, #0
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	008b      	lsls	r3, r1, #2
 80039ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039f2:	0082      	lsls	r2, r0, #2
 80039f4:	4650      	mov	r0, sl
 80039f6:	4659      	mov	r1, fp
 80039f8:	f7fc fc42 	bl	8000280 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <UART_SetConfig+0x38c>)
 8003a02:	fba3 1302 	umull	r1, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2164      	movs	r1, #100	; 0x64
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	3332      	adds	r3, #50	; 0x32
 8003a14:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <UART_SetConfig+0x38c>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	f003 020f 	and.w	r2, r3, #15
 8003a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4432      	add	r2, r6
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	377c      	adds	r7, #124	; 0x7c
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a32:	bf00      	nop
 8003a34:	40011000 	.word	0x40011000
 8003a38:	40011400 	.word	0x40011400
 8003a3c:	51eb851f 	.word	0x51eb851f

08003a40 <__errno>:
 8003a40:	4b01      	ldr	r3, [pc, #4]	; (8003a48 <__errno+0x8>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000000c 	.word	0x2000000c

08003a4c <__libc_init_array>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	4d0d      	ldr	r5, [pc, #52]	; (8003a84 <__libc_init_array+0x38>)
 8003a50:	4c0d      	ldr	r4, [pc, #52]	; (8003a88 <__libc_init_array+0x3c>)
 8003a52:	1b64      	subs	r4, r4, r5
 8003a54:	10a4      	asrs	r4, r4, #2
 8003a56:	2600      	movs	r6, #0
 8003a58:	42a6      	cmp	r6, r4
 8003a5a:	d109      	bne.n	8003a70 <__libc_init_array+0x24>
 8003a5c:	4d0b      	ldr	r5, [pc, #44]	; (8003a8c <__libc_init_array+0x40>)
 8003a5e:	4c0c      	ldr	r4, [pc, #48]	; (8003a90 <__libc_init_array+0x44>)
 8003a60:	f001 f9f4 	bl	8004e4c <_init>
 8003a64:	1b64      	subs	r4, r4, r5
 8003a66:	10a4      	asrs	r4, r4, #2
 8003a68:	2600      	movs	r6, #0
 8003a6a:	42a6      	cmp	r6, r4
 8003a6c:	d105      	bne.n	8003a7a <__libc_init_array+0x2e>
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a74:	4798      	blx	r3
 8003a76:	3601      	adds	r6, #1
 8003a78:	e7ee      	b.n	8003a58 <__libc_init_array+0xc>
 8003a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7e:	4798      	blx	r3
 8003a80:	3601      	adds	r6, #1
 8003a82:	e7f2      	b.n	8003a6a <__libc_init_array+0x1e>
 8003a84:	0800512c 	.word	0x0800512c
 8003a88:	0800512c 	.word	0x0800512c
 8003a8c:	0800512c 	.word	0x0800512c
 8003a90:	08005130 	.word	0x08005130

08003a94 <memset>:
 8003a94:	4402      	add	r2, r0
 8003a96:	4603      	mov	r3, r0
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d100      	bne.n	8003a9e <memset+0xa>
 8003a9c:	4770      	bx	lr
 8003a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa2:	e7f9      	b.n	8003a98 <memset+0x4>

08003aa4 <rand>:
 8003aa4:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <rand+0x60>)
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	681c      	ldr	r4, [r3, #0]
 8003aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003aac:	b9b3      	cbnz	r3, 8003adc <rand+0x38>
 8003aae:	2018      	movs	r0, #24
 8003ab0:	f000 f888 	bl	8003bc4 <malloc>
 8003ab4:	63a0      	str	r0, [r4, #56]	; 0x38
 8003ab6:	b928      	cbnz	r0, 8003ac4 <rand+0x20>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <rand+0x64>)
 8003abc:	4813      	ldr	r0, [pc, #76]	; (8003b0c <rand+0x68>)
 8003abe:	214e      	movs	r1, #78	; 0x4e
 8003ac0:	f000 f850 	bl	8003b64 <__assert_func>
 8003ac4:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <rand+0x6c>)
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <rand+0x70>)
 8003ac8:	e9c0 2300 	strd	r2, r3, [r0]
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <rand+0x74>)
 8003ace:	6083      	str	r3, [r0, #8]
 8003ad0:	230b      	movs	r3, #11
 8003ad2:	8183      	strh	r3, [r0, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003adc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003ade:	480f      	ldr	r0, [pc, #60]	; (8003b1c <rand+0x78>)
 8003ae0:	690a      	ldr	r2, [r1, #16]
 8003ae2:	694b      	ldr	r3, [r1, #20]
 8003ae4:	4c0e      	ldr	r4, [pc, #56]	; (8003b20 <rand+0x7c>)
 8003ae6:	4350      	muls	r0, r2
 8003ae8:	fb04 0003 	mla	r0, r4, r3, r0
 8003aec:	fba2 3404 	umull	r3, r4, r2, r4
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	4404      	add	r4, r0
 8003af4:	f144 0000 	adc.w	r0, r4, #0
 8003af8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8003afc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	bf00      	nop
 8003b04:	2000000c 	.word	0x2000000c
 8003b08:	08004fdc 	.word	0x08004fdc
 8003b0c:	08004ff3 	.word	0x08004ff3
 8003b10:	abcd330e 	.word	0xabcd330e
 8003b14:	e66d1234 	.word	0xe66d1234
 8003b18:	0005deec 	.word	0x0005deec
 8003b1c:	5851f42d 	.word	0x5851f42d
 8003b20:	4c957f2d 	.word	0x4c957f2d

08003b24 <siprintf>:
 8003b24:	b40e      	push	{r1, r2, r3}
 8003b26:	b500      	push	{lr}
 8003b28:	b09c      	sub	sp, #112	; 0x70
 8003b2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b2c:	9002      	str	r0, [sp, #8]
 8003b2e:	9006      	str	r0, [sp, #24]
 8003b30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b34:	4809      	ldr	r0, [pc, #36]	; (8003b5c <siprintf+0x38>)
 8003b36:	9107      	str	r1, [sp, #28]
 8003b38:	9104      	str	r1, [sp, #16]
 8003b3a:	4909      	ldr	r1, [pc, #36]	; (8003b60 <siprintf+0x3c>)
 8003b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b40:	9105      	str	r1, [sp, #20]
 8003b42:	6800      	ldr	r0, [r0, #0]
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	a902      	add	r1, sp, #8
 8003b48:	f000 f94a 	bl	8003de0 <_svfiprintf_r>
 8003b4c:	9b02      	ldr	r3, [sp, #8]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	b01c      	add	sp, #112	; 0x70
 8003b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b58:	b003      	add	sp, #12
 8003b5a:	4770      	bx	lr
 8003b5c:	2000000c 	.word	0x2000000c
 8003b60:	ffff0208 	.word	0xffff0208

08003b64 <__assert_func>:
 8003b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b66:	4614      	mov	r4, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <__assert_func+0x2c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4605      	mov	r5, r0
 8003b70:	68d8      	ldr	r0, [r3, #12]
 8003b72:	b14c      	cbz	r4, 8003b88 <__assert_func+0x24>
 8003b74:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <__assert_func+0x30>)
 8003b76:	9100      	str	r1, [sp, #0]
 8003b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b7c:	4906      	ldr	r1, [pc, #24]	; (8003b98 <__assert_func+0x34>)
 8003b7e:	462b      	mov	r3, r5
 8003b80:	f000 f80e 	bl	8003ba0 <fiprintf>
 8003b84:	f000 fdea 	bl	800475c <abort>
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <__assert_func+0x38>)
 8003b8a:	461c      	mov	r4, r3
 8003b8c:	e7f3      	b.n	8003b76 <__assert_func+0x12>
 8003b8e:	bf00      	nop
 8003b90:	2000000c 	.word	0x2000000c
 8003b94:	08005052 	.word	0x08005052
 8003b98:	0800505f 	.word	0x0800505f
 8003b9c:	0800508d 	.word	0x0800508d

08003ba0 <fiprintf>:
 8003ba0:	b40e      	push	{r1, r2, r3}
 8003ba2:	b503      	push	{r0, r1, lr}
 8003ba4:	4601      	mov	r1, r0
 8003ba6:	ab03      	add	r3, sp, #12
 8003ba8:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <fiprintf+0x20>)
 8003baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bae:	6800      	ldr	r0, [r0, #0]
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	f000 fa3f 	bl	8004034 <_vfiprintf_r>
 8003bb6:	b002      	add	sp, #8
 8003bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bbc:	b003      	add	sp, #12
 8003bbe:	4770      	bx	lr
 8003bc0:	2000000c 	.word	0x2000000c

08003bc4 <malloc>:
 8003bc4:	4b02      	ldr	r3, [pc, #8]	; (8003bd0 <malloc+0xc>)
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	f000 b853 	b.w	8003c74 <_malloc_r>
 8003bce:	bf00      	nop
 8003bd0:	2000000c 	.word	0x2000000c

08003bd4 <_free_r>:
 8003bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bd6:	2900      	cmp	r1, #0
 8003bd8:	d048      	beq.n	8003c6c <_free_r+0x98>
 8003bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bde:	9001      	str	r0, [sp, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f1a1 0404 	sub.w	r4, r1, #4
 8003be6:	bfb8      	it	lt
 8003be8:	18e4      	addlt	r4, r4, r3
 8003bea:	f001 f805 	bl	8004bf8 <__malloc_lock>
 8003bee:	4a20      	ldr	r2, [pc, #128]	; (8003c70 <_free_r+0x9c>)
 8003bf0:	9801      	ldr	r0, [sp, #4]
 8003bf2:	6813      	ldr	r3, [r2, #0]
 8003bf4:	4615      	mov	r5, r2
 8003bf6:	b933      	cbnz	r3, 8003c06 <_free_r+0x32>
 8003bf8:	6063      	str	r3, [r4, #4]
 8003bfa:	6014      	str	r4, [r2, #0]
 8003bfc:	b003      	add	sp, #12
 8003bfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c02:	f000 bfff 	b.w	8004c04 <__malloc_unlock>
 8003c06:	42a3      	cmp	r3, r4
 8003c08:	d90b      	bls.n	8003c22 <_free_r+0x4e>
 8003c0a:	6821      	ldr	r1, [r4, #0]
 8003c0c:	1862      	adds	r2, r4, r1
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	bf04      	itt	eq
 8003c12:	681a      	ldreq	r2, [r3, #0]
 8003c14:	685b      	ldreq	r3, [r3, #4]
 8003c16:	6063      	str	r3, [r4, #4]
 8003c18:	bf04      	itt	eq
 8003c1a:	1852      	addeq	r2, r2, r1
 8003c1c:	6022      	streq	r2, [r4, #0]
 8003c1e:	602c      	str	r4, [r5, #0]
 8003c20:	e7ec      	b.n	8003bfc <_free_r+0x28>
 8003c22:	461a      	mov	r2, r3
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	b10b      	cbz	r3, 8003c2c <_free_r+0x58>
 8003c28:	42a3      	cmp	r3, r4
 8003c2a:	d9fa      	bls.n	8003c22 <_free_r+0x4e>
 8003c2c:	6811      	ldr	r1, [r2, #0]
 8003c2e:	1855      	adds	r5, r2, r1
 8003c30:	42a5      	cmp	r5, r4
 8003c32:	d10b      	bne.n	8003c4c <_free_r+0x78>
 8003c34:	6824      	ldr	r4, [r4, #0]
 8003c36:	4421      	add	r1, r4
 8003c38:	1854      	adds	r4, r2, r1
 8003c3a:	42a3      	cmp	r3, r4
 8003c3c:	6011      	str	r1, [r2, #0]
 8003c3e:	d1dd      	bne.n	8003bfc <_free_r+0x28>
 8003c40:	681c      	ldr	r4, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	6053      	str	r3, [r2, #4]
 8003c46:	4421      	add	r1, r4
 8003c48:	6011      	str	r1, [r2, #0]
 8003c4a:	e7d7      	b.n	8003bfc <_free_r+0x28>
 8003c4c:	d902      	bls.n	8003c54 <_free_r+0x80>
 8003c4e:	230c      	movs	r3, #12
 8003c50:	6003      	str	r3, [r0, #0]
 8003c52:	e7d3      	b.n	8003bfc <_free_r+0x28>
 8003c54:	6825      	ldr	r5, [r4, #0]
 8003c56:	1961      	adds	r1, r4, r5
 8003c58:	428b      	cmp	r3, r1
 8003c5a:	bf04      	itt	eq
 8003c5c:	6819      	ldreq	r1, [r3, #0]
 8003c5e:	685b      	ldreq	r3, [r3, #4]
 8003c60:	6063      	str	r3, [r4, #4]
 8003c62:	bf04      	itt	eq
 8003c64:	1949      	addeq	r1, r1, r5
 8003c66:	6021      	streq	r1, [r4, #0]
 8003c68:	6054      	str	r4, [r2, #4]
 8003c6a:	e7c7      	b.n	8003bfc <_free_r+0x28>
 8003c6c:	b003      	add	sp, #12
 8003c6e:	bd30      	pop	{r4, r5, pc}
 8003c70:	2000009c 	.word	0x2000009c

08003c74 <_malloc_r>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	1ccd      	adds	r5, r1, #3
 8003c78:	f025 0503 	bic.w	r5, r5, #3
 8003c7c:	3508      	adds	r5, #8
 8003c7e:	2d0c      	cmp	r5, #12
 8003c80:	bf38      	it	cc
 8003c82:	250c      	movcc	r5, #12
 8003c84:	2d00      	cmp	r5, #0
 8003c86:	4606      	mov	r6, r0
 8003c88:	db01      	blt.n	8003c8e <_malloc_r+0x1a>
 8003c8a:	42a9      	cmp	r1, r5
 8003c8c:	d903      	bls.n	8003c96 <_malloc_r+0x22>
 8003c8e:	230c      	movs	r3, #12
 8003c90:	6033      	str	r3, [r6, #0]
 8003c92:	2000      	movs	r0, #0
 8003c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c96:	f000 ffaf 	bl	8004bf8 <__malloc_lock>
 8003c9a:	4921      	ldr	r1, [pc, #132]	; (8003d20 <_malloc_r+0xac>)
 8003c9c:	680a      	ldr	r2, [r1, #0]
 8003c9e:	4614      	mov	r4, r2
 8003ca0:	b99c      	cbnz	r4, 8003cca <_malloc_r+0x56>
 8003ca2:	4f20      	ldr	r7, [pc, #128]	; (8003d24 <_malloc_r+0xb0>)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	b923      	cbnz	r3, 8003cb2 <_malloc_r+0x3e>
 8003ca8:	4621      	mov	r1, r4
 8003caa:	4630      	mov	r0, r6
 8003cac:	f000 fc86 	bl	80045bc <_sbrk_r>
 8003cb0:	6038      	str	r0, [r7, #0]
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	f000 fc81 	bl	80045bc <_sbrk_r>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	d123      	bne.n	8003d06 <_malloc_r+0x92>
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	6033      	str	r3, [r6, #0]
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	f000 ff9e 	bl	8004c04 <__malloc_unlock>
 8003cc8:	e7e3      	b.n	8003c92 <_malloc_r+0x1e>
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	1b5b      	subs	r3, r3, r5
 8003cce:	d417      	bmi.n	8003d00 <_malloc_r+0x8c>
 8003cd0:	2b0b      	cmp	r3, #11
 8003cd2:	d903      	bls.n	8003cdc <_malloc_r+0x68>
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	441c      	add	r4, r3
 8003cd8:	6025      	str	r5, [r4, #0]
 8003cda:	e004      	b.n	8003ce6 <_malloc_r+0x72>
 8003cdc:	6863      	ldr	r3, [r4, #4]
 8003cde:	42a2      	cmp	r2, r4
 8003ce0:	bf0c      	ite	eq
 8003ce2:	600b      	streq	r3, [r1, #0]
 8003ce4:	6053      	strne	r3, [r2, #4]
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f000 ff8c 	bl	8004c04 <__malloc_unlock>
 8003cec:	f104 000b 	add.w	r0, r4, #11
 8003cf0:	1d23      	adds	r3, r4, #4
 8003cf2:	f020 0007 	bic.w	r0, r0, #7
 8003cf6:	1ac2      	subs	r2, r0, r3
 8003cf8:	d0cc      	beq.n	8003c94 <_malloc_r+0x20>
 8003cfa:	1a1b      	subs	r3, r3, r0
 8003cfc:	50a3      	str	r3, [r4, r2]
 8003cfe:	e7c9      	b.n	8003c94 <_malloc_r+0x20>
 8003d00:	4622      	mov	r2, r4
 8003d02:	6864      	ldr	r4, [r4, #4]
 8003d04:	e7cc      	b.n	8003ca0 <_malloc_r+0x2c>
 8003d06:	1cc4      	adds	r4, r0, #3
 8003d08:	f024 0403 	bic.w	r4, r4, #3
 8003d0c:	42a0      	cmp	r0, r4
 8003d0e:	d0e3      	beq.n	8003cd8 <_malloc_r+0x64>
 8003d10:	1a21      	subs	r1, r4, r0
 8003d12:	4630      	mov	r0, r6
 8003d14:	f000 fc52 	bl	80045bc <_sbrk_r>
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d1dd      	bne.n	8003cd8 <_malloc_r+0x64>
 8003d1c:	e7cf      	b.n	8003cbe <_malloc_r+0x4a>
 8003d1e:	bf00      	nop
 8003d20:	2000009c 	.word	0x2000009c
 8003d24:	200000a0 	.word	0x200000a0

08003d28 <__ssputs_r>:
 8003d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2c:	688e      	ldr	r6, [r1, #8]
 8003d2e:	429e      	cmp	r6, r3
 8003d30:	4682      	mov	sl, r0
 8003d32:	460c      	mov	r4, r1
 8003d34:	4690      	mov	r8, r2
 8003d36:	461f      	mov	r7, r3
 8003d38:	d838      	bhi.n	8003dac <__ssputs_r+0x84>
 8003d3a:	898a      	ldrh	r2, [r1, #12]
 8003d3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d40:	d032      	beq.n	8003da8 <__ssputs_r+0x80>
 8003d42:	6825      	ldr	r5, [r4, #0]
 8003d44:	6909      	ldr	r1, [r1, #16]
 8003d46:	eba5 0901 	sub.w	r9, r5, r1
 8003d4a:	6965      	ldr	r5, [r4, #20]
 8003d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d54:	3301      	adds	r3, #1
 8003d56:	444b      	add	r3, r9
 8003d58:	106d      	asrs	r5, r5, #1
 8003d5a:	429d      	cmp	r5, r3
 8003d5c:	bf38      	it	cc
 8003d5e:	461d      	movcc	r5, r3
 8003d60:	0553      	lsls	r3, r2, #21
 8003d62:	d531      	bpl.n	8003dc8 <__ssputs_r+0xa0>
 8003d64:	4629      	mov	r1, r5
 8003d66:	f7ff ff85 	bl	8003c74 <_malloc_r>
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	b950      	cbnz	r0, 8003d84 <__ssputs_r+0x5c>
 8003d6e:	230c      	movs	r3, #12
 8003d70:	f8ca 3000 	str.w	r3, [sl]
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d7a:	81a3      	strh	r3, [r4, #12]
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d84:	6921      	ldr	r1, [r4, #16]
 8003d86:	464a      	mov	r2, r9
 8003d88:	f000 ff0e 	bl	8004ba8 <memcpy>
 8003d8c:	89a3      	ldrh	r3, [r4, #12]
 8003d8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d96:	81a3      	strh	r3, [r4, #12]
 8003d98:	6126      	str	r6, [r4, #16]
 8003d9a:	6165      	str	r5, [r4, #20]
 8003d9c:	444e      	add	r6, r9
 8003d9e:	eba5 0509 	sub.w	r5, r5, r9
 8003da2:	6026      	str	r6, [r4, #0]
 8003da4:	60a5      	str	r5, [r4, #8]
 8003da6:	463e      	mov	r6, r7
 8003da8:	42be      	cmp	r6, r7
 8003daa:	d900      	bls.n	8003dae <__ssputs_r+0x86>
 8003dac:	463e      	mov	r6, r7
 8003dae:	4632      	mov	r2, r6
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	4641      	mov	r1, r8
 8003db4:	f000 ff06 	bl	8004bc4 <memmove>
 8003db8:	68a3      	ldr	r3, [r4, #8]
 8003dba:	6822      	ldr	r2, [r4, #0]
 8003dbc:	1b9b      	subs	r3, r3, r6
 8003dbe:	4432      	add	r2, r6
 8003dc0:	60a3      	str	r3, [r4, #8]
 8003dc2:	6022      	str	r2, [r4, #0]
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e7db      	b.n	8003d80 <__ssputs_r+0x58>
 8003dc8:	462a      	mov	r2, r5
 8003dca:	f000 ff21 	bl	8004c10 <_realloc_r>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d1e1      	bne.n	8003d98 <__ssputs_r+0x70>
 8003dd4:	6921      	ldr	r1, [r4, #16]
 8003dd6:	4650      	mov	r0, sl
 8003dd8:	f7ff fefc 	bl	8003bd4 <_free_r>
 8003ddc:	e7c7      	b.n	8003d6e <__ssputs_r+0x46>
	...

08003de0 <_svfiprintf_r>:
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de4:	4698      	mov	r8, r3
 8003de6:	898b      	ldrh	r3, [r1, #12]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	b09d      	sub	sp, #116	; 0x74
 8003dec:	4607      	mov	r7, r0
 8003dee:	460d      	mov	r5, r1
 8003df0:	4614      	mov	r4, r2
 8003df2:	d50e      	bpl.n	8003e12 <_svfiprintf_r+0x32>
 8003df4:	690b      	ldr	r3, [r1, #16]
 8003df6:	b963      	cbnz	r3, 8003e12 <_svfiprintf_r+0x32>
 8003df8:	2140      	movs	r1, #64	; 0x40
 8003dfa:	f7ff ff3b 	bl	8003c74 <_malloc_r>
 8003dfe:	6028      	str	r0, [r5, #0]
 8003e00:	6128      	str	r0, [r5, #16]
 8003e02:	b920      	cbnz	r0, 8003e0e <_svfiprintf_r+0x2e>
 8003e04:	230c      	movs	r3, #12
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	e0d1      	b.n	8003fb2 <_svfiprintf_r+0x1d2>
 8003e0e:	2340      	movs	r3, #64	; 0x40
 8003e10:	616b      	str	r3, [r5, #20]
 8003e12:	2300      	movs	r3, #0
 8003e14:	9309      	str	r3, [sp, #36]	; 0x24
 8003e16:	2320      	movs	r3, #32
 8003e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e20:	2330      	movs	r3, #48	; 0x30
 8003e22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003fcc <_svfiprintf_r+0x1ec>
 8003e26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e2a:	f04f 0901 	mov.w	r9, #1
 8003e2e:	4623      	mov	r3, r4
 8003e30:	469a      	mov	sl, r3
 8003e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e36:	b10a      	cbz	r2, 8003e3c <_svfiprintf_r+0x5c>
 8003e38:	2a25      	cmp	r2, #37	; 0x25
 8003e3a:	d1f9      	bne.n	8003e30 <_svfiprintf_r+0x50>
 8003e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e40:	d00b      	beq.n	8003e5a <_svfiprintf_r+0x7a>
 8003e42:	465b      	mov	r3, fp
 8003e44:	4622      	mov	r2, r4
 8003e46:	4629      	mov	r1, r5
 8003e48:	4638      	mov	r0, r7
 8003e4a:	f7ff ff6d 	bl	8003d28 <__ssputs_r>
 8003e4e:	3001      	adds	r0, #1
 8003e50:	f000 80aa 	beq.w	8003fa8 <_svfiprintf_r+0x1c8>
 8003e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e56:	445a      	add	r2, fp
 8003e58:	9209      	str	r2, [sp, #36]	; 0x24
 8003e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80a2 	beq.w	8003fa8 <_svfiprintf_r+0x1c8>
 8003e64:	2300      	movs	r3, #0
 8003e66:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e6e:	f10a 0a01 	add.w	sl, sl, #1
 8003e72:	9304      	str	r3, [sp, #16]
 8003e74:	9307      	str	r3, [sp, #28]
 8003e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e7c:	4654      	mov	r4, sl
 8003e7e:	2205      	movs	r2, #5
 8003e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e84:	4851      	ldr	r0, [pc, #324]	; (8003fcc <_svfiprintf_r+0x1ec>)
 8003e86:	f7fc f9ab 	bl	80001e0 <memchr>
 8003e8a:	9a04      	ldr	r2, [sp, #16]
 8003e8c:	b9d8      	cbnz	r0, 8003ec6 <_svfiprintf_r+0xe6>
 8003e8e:	06d0      	lsls	r0, r2, #27
 8003e90:	bf44      	itt	mi
 8003e92:	2320      	movmi	r3, #32
 8003e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e98:	0711      	lsls	r1, r2, #28
 8003e9a:	bf44      	itt	mi
 8003e9c:	232b      	movmi	r3, #43	; 0x2b
 8003e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea8:	d015      	beq.n	8003ed6 <_svfiprintf_r+0xf6>
 8003eaa:	9a07      	ldr	r2, [sp, #28]
 8003eac:	4654      	mov	r4, sl
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f04f 0c0a 	mov.w	ip, #10
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eba:	3b30      	subs	r3, #48	; 0x30
 8003ebc:	2b09      	cmp	r3, #9
 8003ebe:	d94e      	bls.n	8003f5e <_svfiprintf_r+0x17e>
 8003ec0:	b1b0      	cbz	r0, 8003ef0 <_svfiprintf_r+0x110>
 8003ec2:	9207      	str	r2, [sp, #28]
 8003ec4:	e014      	b.n	8003ef0 <_svfiprintf_r+0x110>
 8003ec6:	eba0 0308 	sub.w	r3, r0, r8
 8003eca:	fa09 f303 	lsl.w	r3, r9, r3
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	9304      	str	r3, [sp, #16]
 8003ed2:	46a2      	mov	sl, r4
 8003ed4:	e7d2      	b.n	8003e7c <_svfiprintf_r+0x9c>
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	1d19      	adds	r1, r3, #4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	9103      	str	r1, [sp, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bfbb      	ittet	lt
 8003ee2:	425b      	neglt	r3, r3
 8003ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ee8:	9307      	strge	r3, [sp, #28]
 8003eea:	9307      	strlt	r3, [sp, #28]
 8003eec:	bfb8      	it	lt
 8003eee:	9204      	strlt	r2, [sp, #16]
 8003ef0:	7823      	ldrb	r3, [r4, #0]
 8003ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ef4:	d10c      	bne.n	8003f10 <_svfiprintf_r+0x130>
 8003ef6:	7863      	ldrb	r3, [r4, #1]
 8003ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8003efa:	d135      	bne.n	8003f68 <_svfiprintf_r+0x188>
 8003efc:	9b03      	ldr	r3, [sp, #12]
 8003efe:	1d1a      	adds	r2, r3, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	9203      	str	r2, [sp, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bfb8      	it	lt
 8003f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f0c:	3402      	adds	r4, #2
 8003f0e:	9305      	str	r3, [sp, #20]
 8003f10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fdc <_svfiprintf_r+0x1fc>
 8003f14:	7821      	ldrb	r1, [r4, #0]
 8003f16:	2203      	movs	r2, #3
 8003f18:	4650      	mov	r0, sl
 8003f1a:	f7fc f961 	bl	80001e0 <memchr>
 8003f1e:	b140      	cbz	r0, 8003f32 <_svfiprintf_r+0x152>
 8003f20:	2340      	movs	r3, #64	; 0x40
 8003f22:	eba0 000a 	sub.w	r0, r0, sl
 8003f26:	fa03 f000 	lsl.w	r0, r3, r0
 8003f2a:	9b04      	ldr	r3, [sp, #16]
 8003f2c:	4303      	orrs	r3, r0
 8003f2e:	3401      	adds	r4, #1
 8003f30:	9304      	str	r3, [sp, #16]
 8003f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f36:	4826      	ldr	r0, [pc, #152]	; (8003fd0 <_svfiprintf_r+0x1f0>)
 8003f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f3c:	2206      	movs	r2, #6
 8003f3e:	f7fc f94f 	bl	80001e0 <memchr>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d038      	beq.n	8003fb8 <_svfiprintf_r+0x1d8>
 8003f46:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <_svfiprintf_r+0x1f4>)
 8003f48:	bb1b      	cbnz	r3, 8003f92 <_svfiprintf_r+0x1b2>
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	3307      	adds	r3, #7
 8003f4e:	f023 0307 	bic.w	r3, r3, #7
 8003f52:	3308      	adds	r3, #8
 8003f54:	9303      	str	r3, [sp, #12]
 8003f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f58:	4433      	add	r3, r6
 8003f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f5c:	e767      	b.n	8003e2e <_svfiprintf_r+0x4e>
 8003f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f62:	460c      	mov	r4, r1
 8003f64:	2001      	movs	r0, #1
 8003f66:	e7a5      	b.n	8003eb4 <_svfiprintf_r+0xd4>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	3401      	adds	r4, #1
 8003f6c:	9305      	str	r3, [sp, #20]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f04f 0c0a 	mov.w	ip, #10
 8003f74:	4620      	mov	r0, r4
 8003f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f7a:	3a30      	subs	r2, #48	; 0x30
 8003f7c:	2a09      	cmp	r2, #9
 8003f7e:	d903      	bls.n	8003f88 <_svfiprintf_r+0x1a8>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0c5      	beq.n	8003f10 <_svfiprintf_r+0x130>
 8003f84:	9105      	str	r1, [sp, #20]
 8003f86:	e7c3      	b.n	8003f10 <_svfiprintf_r+0x130>
 8003f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e7f0      	b.n	8003f74 <_svfiprintf_r+0x194>
 8003f92:	ab03      	add	r3, sp, #12
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	462a      	mov	r2, r5
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <_svfiprintf_r+0x1f8>)
 8003f9a:	a904      	add	r1, sp, #16
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f3af 8000 	nop.w
 8003fa2:	1c42      	adds	r2, r0, #1
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	d1d6      	bne.n	8003f56 <_svfiprintf_r+0x176>
 8003fa8:	89ab      	ldrh	r3, [r5, #12]
 8003faa:	065b      	lsls	r3, r3, #25
 8003fac:	f53f af2c 	bmi.w	8003e08 <_svfiprintf_r+0x28>
 8003fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fb2:	b01d      	add	sp, #116	; 0x74
 8003fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb8:	ab03      	add	r3, sp, #12
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	462a      	mov	r2, r5
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <_svfiprintf_r+0x1f8>)
 8003fc0:	a904      	add	r1, sp, #16
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	f000 f9d4 	bl	8004370 <_printf_i>
 8003fc8:	e7eb      	b.n	8003fa2 <_svfiprintf_r+0x1c2>
 8003fca:	bf00      	nop
 8003fcc:	0800508e 	.word	0x0800508e
 8003fd0:	08005098 	.word	0x08005098
 8003fd4:	00000000 	.word	0x00000000
 8003fd8:	08003d29 	.word	0x08003d29
 8003fdc:	08005094 	.word	0x08005094

08003fe0 <__sfputc_r>:
 8003fe0:	6893      	ldr	r3, [r2, #8]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	b410      	push	{r4}
 8003fe8:	6093      	str	r3, [r2, #8]
 8003fea:	da08      	bge.n	8003ffe <__sfputc_r+0x1e>
 8003fec:	6994      	ldr	r4, [r2, #24]
 8003fee:	42a3      	cmp	r3, r4
 8003ff0:	db01      	blt.n	8003ff6 <__sfputc_r+0x16>
 8003ff2:	290a      	cmp	r1, #10
 8003ff4:	d103      	bne.n	8003ffe <__sfputc_r+0x1e>
 8003ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ffa:	f000 baef 	b.w	80045dc <__swbuf_r>
 8003ffe:	6813      	ldr	r3, [r2, #0]
 8004000:	1c58      	adds	r0, r3, #1
 8004002:	6010      	str	r0, [r2, #0]
 8004004:	7019      	strb	r1, [r3, #0]
 8004006:	4608      	mov	r0, r1
 8004008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800400c:	4770      	bx	lr

0800400e <__sfputs_r>:
 800400e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004010:	4606      	mov	r6, r0
 8004012:	460f      	mov	r7, r1
 8004014:	4614      	mov	r4, r2
 8004016:	18d5      	adds	r5, r2, r3
 8004018:	42ac      	cmp	r4, r5
 800401a:	d101      	bne.n	8004020 <__sfputs_r+0x12>
 800401c:	2000      	movs	r0, #0
 800401e:	e007      	b.n	8004030 <__sfputs_r+0x22>
 8004020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004024:	463a      	mov	r2, r7
 8004026:	4630      	mov	r0, r6
 8004028:	f7ff ffda 	bl	8003fe0 <__sfputc_r>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d1f3      	bne.n	8004018 <__sfputs_r+0xa>
 8004030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004034 <_vfiprintf_r>:
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	460d      	mov	r5, r1
 800403a:	b09d      	sub	sp, #116	; 0x74
 800403c:	4614      	mov	r4, r2
 800403e:	4698      	mov	r8, r3
 8004040:	4606      	mov	r6, r0
 8004042:	b118      	cbz	r0, 800404c <_vfiprintf_r+0x18>
 8004044:	6983      	ldr	r3, [r0, #24]
 8004046:	b90b      	cbnz	r3, 800404c <_vfiprintf_r+0x18>
 8004048:	f000 fcaa 	bl	80049a0 <__sinit>
 800404c:	4b89      	ldr	r3, [pc, #548]	; (8004274 <_vfiprintf_r+0x240>)
 800404e:	429d      	cmp	r5, r3
 8004050:	d11b      	bne.n	800408a <_vfiprintf_r+0x56>
 8004052:	6875      	ldr	r5, [r6, #4]
 8004054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004056:	07d9      	lsls	r1, r3, #31
 8004058:	d405      	bmi.n	8004066 <_vfiprintf_r+0x32>
 800405a:	89ab      	ldrh	r3, [r5, #12]
 800405c:	059a      	lsls	r2, r3, #22
 800405e:	d402      	bmi.n	8004066 <_vfiprintf_r+0x32>
 8004060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004062:	f000 fd3b 	bl	8004adc <__retarget_lock_acquire_recursive>
 8004066:	89ab      	ldrh	r3, [r5, #12]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	d501      	bpl.n	8004070 <_vfiprintf_r+0x3c>
 800406c:	692b      	ldr	r3, [r5, #16]
 800406e:	b9eb      	cbnz	r3, 80040ac <_vfiprintf_r+0x78>
 8004070:	4629      	mov	r1, r5
 8004072:	4630      	mov	r0, r6
 8004074:	f000 fb04 	bl	8004680 <__swsetup_r>
 8004078:	b1c0      	cbz	r0, 80040ac <_vfiprintf_r+0x78>
 800407a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800407c:	07dc      	lsls	r4, r3, #31
 800407e:	d50e      	bpl.n	800409e <_vfiprintf_r+0x6a>
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	b01d      	add	sp, #116	; 0x74
 8004086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408a:	4b7b      	ldr	r3, [pc, #492]	; (8004278 <_vfiprintf_r+0x244>)
 800408c:	429d      	cmp	r5, r3
 800408e:	d101      	bne.n	8004094 <_vfiprintf_r+0x60>
 8004090:	68b5      	ldr	r5, [r6, #8]
 8004092:	e7df      	b.n	8004054 <_vfiprintf_r+0x20>
 8004094:	4b79      	ldr	r3, [pc, #484]	; (800427c <_vfiprintf_r+0x248>)
 8004096:	429d      	cmp	r5, r3
 8004098:	bf08      	it	eq
 800409a:	68f5      	ldreq	r5, [r6, #12]
 800409c:	e7da      	b.n	8004054 <_vfiprintf_r+0x20>
 800409e:	89ab      	ldrh	r3, [r5, #12]
 80040a0:	0598      	lsls	r0, r3, #22
 80040a2:	d4ed      	bmi.n	8004080 <_vfiprintf_r+0x4c>
 80040a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a6:	f000 fd1a 	bl	8004ade <__retarget_lock_release_recursive>
 80040aa:	e7e9      	b.n	8004080 <_vfiprintf_r+0x4c>
 80040ac:	2300      	movs	r3, #0
 80040ae:	9309      	str	r3, [sp, #36]	; 0x24
 80040b0:	2320      	movs	r3, #32
 80040b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80040ba:	2330      	movs	r3, #48	; 0x30
 80040bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004280 <_vfiprintf_r+0x24c>
 80040c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040c4:	f04f 0901 	mov.w	r9, #1
 80040c8:	4623      	mov	r3, r4
 80040ca:	469a      	mov	sl, r3
 80040cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040d0:	b10a      	cbz	r2, 80040d6 <_vfiprintf_r+0xa2>
 80040d2:	2a25      	cmp	r2, #37	; 0x25
 80040d4:	d1f9      	bne.n	80040ca <_vfiprintf_r+0x96>
 80040d6:	ebba 0b04 	subs.w	fp, sl, r4
 80040da:	d00b      	beq.n	80040f4 <_vfiprintf_r+0xc0>
 80040dc:	465b      	mov	r3, fp
 80040de:	4622      	mov	r2, r4
 80040e0:	4629      	mov	r1, r5
 80040e2:	4630      	mov	r0, r6
 80040e4:	f7ff ff93 	bl	800400e <__sfputs_r>
 80040e8:	3001      	adds	r0, #1
 80040ea:	f000 80aa 	beq.w	8004242 <_vfiprintf_r+0x20e>
 80040ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040f0:	445a      	add	r2, fp
 80040f2:	9209      	str	r2, [sp, #36]	; 0x24
 80040f4:	f89a 3000 	ldrb.w	r3, [sl]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80a2 	beq.w	8004242 <_vfiprintf_r+0x20e>
 80040fe:	2300      	movs	r3, #0
 8004100:	f04f 32ff 	mov.w	r2, #4294967295
 8004104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004108:	f10a 0a01 	add.w	sl, sl, #1
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	9307      	str	r3, [sp, #28]
 8004110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004114:	931a      	str	r3, [sp, #104]	; 0x68
 8004116:	4654      	mov	r4, sl
 8004118:	2205      	movs	r2, #5
 800411a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800411e:	4858      	ldr	r0, [pc, #352]	; (8004280 <_vfiprintf_r+0x24c>)
 8004120:	f7fc f85e 	bl	80001e0 <memchr>
 8004124:	9a04      	ldr	r2, [sp, #16]
 8004126:	b9d8      	cbnz	r0, 8004160 <_vfiprintf_r+0x12c>
 8004128:	06d1      	lsls	r1, r2, #27
 800412a:	bf44      	itt	mi
 800412c:	2320      	movmi	r3, #32
 800412e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004132:	0713      	lsls	r3, r2, #28
 8004134:	bf44      	itt	mi
 8004136:	232b      	movmi	r3, #43	; 0x2b
 8004138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800413c:	f89a 3000 	ldrb.w	r3, [sl]
 8004140:	2b2a      	cmp	r3, #42	; 0x2a
 8004142:	d015      	beq.n	8004170 <_vfiprintf_r+0x13c>
 8004144:	9a07      	ldr	r2, [sp, #28]
 8004146:	4654      	mov	r4, sl
 8004148:	2000      	movs	r0, #0
 800414a:	f04f 0c0a 	mov.w	ip, #10
 800414e:	4621      	mov	r1, r4
 8004150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004154:	3b30      	subs	r3, #48	; 0x30
 8004156:	2b09      	cmp	r3, #9
 8004158:	d94e      	bls.n	80041f8 <_vfiprintf_r+0x1c4>
 800415a:	b1b0      	cbz	r0, 800418a <_vfiprintf_r+0x156>
 800415c:	9207      	str	r2, [sp, #28]
 800415e:	e014      	b.n	800418a <_vfiprintf_r+0x156>
 8004160:	eba0 0308 	sub.w	r3, r0, r8
 8004164:	fa09 f303 	lsl.w	r3, r9, r3
 8004168:	4313      	orrs	r3, r2
 800416a:	9304      	str	r3, [sp, #16]
 800416c:	46a2      	mov	sl, r4
 800416e:	e7d2      	b.n	8004116 <_vfiprintf_r+0xe2>
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	1d19      	adds	r1, r3, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	9103      	str	r1, [sp, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	bfbb      	ittet	lt
 800417c:	425b      	neglt	r3, r3
 800417e:	f042 0202 	orrlt.w	r2, r2, #2
 8004182:	9307      	strge	r3, [sp, #28]
 8004184:	9307      	strlt	r3, [sp, #28]
 8004186:	bfb8      	it	lt
 8004188:	9204      	strlt	r2, [sp, #16]
 800418a:	7823      	ldrb	r3, [r4, #0]
 800418c:	2b2e      	cmp	r3, #46	; 0x2e
 800418e:	d10c      	bne.n	80041aa <_vfiprintf_r+0x176>
 8004190:	7863      	ldrb	r3, [r4, #1]
 8004192:	2b2a      	cmp	r3, #42	; 0x2a
 8004194:	d135      	bne.n	8004202 <_vfiprintf_r+0x1ce>
 8004196:	9b03      	ldr	r3, [sp, #12]
 8004198:	1d1a      	adds	r2, r3, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	9203      	str	r2, [sp, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bfb8      	it	lt
 80041a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80041a6:	3402      	adds	r4, #2
 80041a8:	9305      	str	r3, [sp, #20]
 80041aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004290 <_vfiprintf_r+0x25c>
 80041ae:	7821      	ldrb	r1, [r4, #0]
 80041b0:	2203      	movs	r2, #3
 80041b2:	4650      	mov	r0, sl
 80041b4:	f7fc f814 	bl	80001e0 <memchr>
 80041b8:	b140      	cbz	r0, 80041cc <_vfiprintf_r+0x198>
 80041ba:	2340      	movs	r3, #64	; 0x40
 80041bc:	eba0 000a 	sub.w	r0, r0, sl
 80041c0:	fa03 f000 	lsl.w	r0, r3, r0
 80041c4:	9b04      	ldr	r3, [sp, #16]
 80041c6:	4303      	orrs	r3, r0
 80041c8:	3401      	adds	r4, #1
 80041ca:	9304      	str	r3, [sp, #16]
 80041cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d0:	482c      	ldr	r0, [pc, #176]	; (8004284 <_vfiprintf_r+0x250>)
 80041d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041d6:	2206      	movs	r2, #6
 80041d8:	f7fc f802 	bl	80001e0 <memchr>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d03f      	beq.n	8004260 <_vfiprintf_r+0x22c>
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <_vfiprintf_r+0x254>)
 80041e2:	bb1b      	cbnz	r3, 800422c <_vfiprintf_r+0x1f8>
 80041e4:	9b03      	ldr	r3, [sp, #12]
 80041e6:	3307      	adds	r3, #7
 80041e8:	f023 0307 	bic.w	r3, r3, #7
 80041ec:	3308      	adds	r3, #8
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f2:	443b      	add	r3, r7
 80041f4:	9309      	str	r3, [sp, #36]	; 0x24
 80041f6:	e767      	b.n	80040c8 <_vfiprintf_r+0x94>
 80041f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80041fc:	460c      	mov	r4, r1
 80041fe:	2001      	movs	r0, #1
 8004200:	e7a5      	b.n	800414e <_vfiprintf_r+0x11a>
 8004202:	2300      	movs	r3, #0
 8004204:	3401      	adds	r4, #1
 8004206:	9305      	str	r3, [sp, #20]
 8004208:	4619      	mov	r1, r3
 800420a:	f04f 0c0a 	mov.w	ip, #10
 800420e:	4620      	mov	r0, r4
 8004210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004214:	3a30      	subs	r2, #48	; 0x30
 8004216:	2a09      	cmp	r2, #9
 8004218:	d903      	bls.n	8004222 <_vfiprintf_r+0x1ee>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0c5      	beq.n	80041aa <_vfiprintf_r+0x176>
 800421e:	9105      	str	r1, [sp, #20]
 8004220:	e7c3      	b.n	80041aa <_vfiprintf_r+0x176>
 8004222:	fb0c 2101 	mla	r1, ip, r1, r2
 8004226:	4604      	mov	r4, r0
 8004228:	2301      	movs	r3, #1
 800422a:	e7f0      	b.n	800420e <_vfiprintf_r+0x1da>
 800422c:	ab03      	add	r3, sp, #12
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	462a      	mov	r2, r5
 8004232:	4b16      	ldr	r3, [pc, #88]	; (800428c <_vfiprintf_r+0x258>)
 8004234:	a904      	add	r1, sp, #16
 8004236:	4630      	mov	r0, r6
 8004238:	f3af 8000 	nop.w
 800423c:	4607      	mov	r7, r0
 800423e:	1c78      	adds	r0, r7, #1
 8004240:	d1d6      	bne.n	80041f0 <_vfiprintf_r+0x1bc>
 8004242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004244:	07d9      	lsls	r1, r3, #31
 8004246:	d405      	bmi.n	8004254 <_vfiprintf_r+0x220>
 8004248:	89ab      	ldrh	r3, [r5, #12]
 800424a:	059a      	lsls	r2, r3, #22
 800424c:	d402      	bmi.n	8004254 <_vfiprintf_r+0x220>
 800424e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004250:	f000 fc45 	bl	8004ade <__retarget_lock_release_recursive>
 8004254:	89ab      	ldrh	r3, [r5, #12]
 8004256:	065b      	lsls	r3, r3, #25
 8004258:	f53f af12 	bmi.w	8004080 <_vfiprintf_r+0x4c>
 800425c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800425e:	e711      	b.n	8004084 <_vfiprintf_r+0x50>
 8004260:	ab03      	add	r3, sp, #12
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	462a      	mov	r2, r5
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <_vfiprintf_r+0x258>)
 8004268:	a904      	add	r1, sp, #16
 800426a:	4630      	mov	r0, r6
 800426c:	f000 f880 	bl	8004370 <_printf_i>
 8004270:	e7e4      	b.n	800423c <_vfiprintf_r+0x208>
 8004272:	bf00      	nop
 8004274:	080050e4 	.word	0x080050e4
 8004278:	08005104 	.word	0x08005104
 800427c:	080050c4 	.word	0x080050c4
 8004280:	0800508e 	.word	0x0800508e
 8004284:	08005098 	.word	0x08005098
 8004288:	00000000 	.word	0x00000000
 800428c:	0800400f 	.word	0x0800400f
 8004290:	08005094 	.word	0x08005094

08004294 <_printf_common>:
 8004294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004298:	4616      	mov	r6, r2
 800429a:	4699      	mov	r9, r3
 800429c:	688a      	ldr	r2, [r1, #8]
 800429e:	690b      	ldr	r3, [r1, #16]
 80042a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042a4:	4293      	cmp	r3, r2
 80042a6:	bfb8      	it	lt
 80042a8:	4613      	movlt	r3, r2
 80042aa:	6033      	str	r3, [r6, #0]
 80042ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042b0:	4607      	mov	r7, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	b10a      	cbz	r2, 80042ba <_printf_common+0x26>
 80042b6:	3301      	adds	r3, #1
 80042b8:	6033      	str	r3, [r6, #0]
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	0699      	lsls	r1, r3, #26
 80042be:	bf42      	ittt	mi
 80042c0:	6833      	ldrmi	r3, [r6, #0]
 80042c2:	3302      	addmi	r3, #2
 80042c4:	6033      	strmi	r3, [r6, #0]
 80042c6:	6825      	ldr	r5, [r4, #0]
 80042c8:	f015 0506 	ands.w	r5, r5, #6
 80042cc:	d106      	bne.n	80042dc <_printf_common+0x48>
 80042ce:	f104 0a19 	add.w	sl, r4, #25
 80042d2:	68e3      	ldr	r3, [r4, #12]
 80042d4:	6832      	ldr	r2, [r6, #0]
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	42ab      	cmp	r3, r5
 80042da:	dc26      	bgt.n	800432a <_printf_common+0x96>
 80042dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042e0:	1e13      	subs	r3, r2, #0
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	bf18      	it	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	0692      	lsls	r2, r2, #26
 80042ea:	d42b      	bmi.n	8004344 <_printf_common+0xb0>
 80042ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042f0:	4649      	mov	r1, r9
 80042f2:	4638      	mov	r0, r7
 80042f4:	47c0      	blx	r8
 80042f6:	3001      	adds	r0, #1
 80042f8:	d01e      	beq.n	8004338 <_printf_common+0xa4>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	68e5      	ldr	r5, [r4, #12]
 80042fe:	6832      	ldr	r2, [r6, #0]
 8004300:	f003 0306 	and.w	r3, r3, #6
 8004304:	2b04      	cmp	r3, #4
 8004306:	bf08      	it	eq
 8004308:	1aad      	subeq	r5, r5, r2
 800430a:	68a3      	ldr	r3, [r4, #8]
 800430c:	6922      	ldr	r2, [r4, #16]
 800430e:	bf0c      	ite	eq
 8004310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004314:	2500      	movne	r5, #0
 8004316:	4293      	cmp	r3, r2
 8004318:	bfc4      	itt	gt
 800431a:	1a9b      	subgt	r3, r3, r2
 800431c:	18ed      	addgt	r5, r5, r3
 800431e:	2600      	movs	r6, #0
 8004320:	341a      	adds	r4, #26
 8004322:	42b5      	cmp	r5, r6
 8004324:	d11a      	bne.n	800435c <_printf_common+0xc8>
 8004326:	2000      	movs	r0, #0
 8004328:	e008      	b.n	800433c <_printf_common+0xa8>
 800432a:	2301      	movs	r3, #1
 800432c:	4652      	mov	r2, sl
 800432e:	4649      	mov	r1, r9
 8004330:	4638      	mov	r0, r7
 8004332:	47c0      	blx	r8
 8004334:	3001      	adds	r0, #1
 8004336:	d103      	bne.n	8004340 <_printf_common+0xac>
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004340:	3501      	adds	r5, #1
 8004342:	e7c6      	b.n	80042d2 <_printf_common+0x3e>
 8004344:	18e1      	adds	r1, r4, r3
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	2030      	movs	r0, #48	; 0x30
 800434a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800434e:	4422      	add	r2, r4
 8004350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004358:	3302      	adds	r3, #2
 800435a:	e7c7      	b.n	80042ec <_printf_common+0x58>
 800435c:	2301      	movs	r3, #1
 800435e:	4622      	mov	r2, r4
 8004360:	4649      	mov	r1, r9
 8004362:	4638      	mov	r0, r7
 8004364:	47c0      	blx	r8
 8004366:	3001      	adds	r0, #1
 8004368:	d0e6      	beq.n	8004338 <_printf_common+0xa4>
 800436a:	3601      	adds	r6, #1
 800436c:	e7d9      	b.n	8004322 <_printf_common+0x8e>
	...

08004370 <_printf_i>:
 8004370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	460c      	mov	r4, r1
 8004376:	4691      	mov	r9, r2
 8004378:	7e27      	ldrb	r7, [r4, #24]
 800437a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800437c:	2f78      	cmp	r7, #120	; 0x78
 800437e:	4680      	mov	r8, r0
 8004380:	469a      	mov	sl, r3
 8004382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004386:	d807      	bhi.n	8004398 <_printf_i+0x28>
 8004388:	2f62      	cmp	r7, #98	; 0x62
 800438a:	d80a      	bhi.n	80043a2 <_printf_i+0x32>
 800438c:	2f00      	cmp	r7, #0
 800438e:	f000 80d8 	beq.w	8004542 <_printf_i+0x1d2>
 8004392:	2f58      	cmp	r7, #88	; 0x58
 8004394:	f000 80a3 	beq.w	80044de <_printf_i+0x16e>
 8004398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800439c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043a0:	e03a      	b.n	8004418 <_printf_i+0xa8>
 80043a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043a6:	2b15      	cmp	r3, #21
 80043a8:	d8f6      	bhi.n	8004398 <_printf_i+0x28>
 80043aa:	a001      	add	r0, pc, #4	; (adr r0, 80043b0 <_printf_i+0x40>)
 80043ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043b0:	08004409 	.word	0x08004409
 80043b4:	0800441d 	.word	0x0800441d
 80043b8:	08004399 	.word	0x08004399
 80043bc:	08004399 	.word	0x08004399
 80043c0:	08004399 	.word	0x08004399
 80043c4:	08004399 	.word	0x08004399
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	08004399 	.word	0x08004399
 80043d0:	08004399 	.word	0x08004399
 80043d4:	08004399 	.word	0x08004399
 80043d8:	08004399 	.word	0x08004399
 80043dc:	08004529 	.word	0x08004529
 80043e0:	0800444d 	.word	0x0800444d
 80043e4:	0800450b 	.word	0x0800450b
 80043e8:	08004399 	.word	0x08004399
 80043ec:	08004399 	.word	0x08004399
 80043f0:	0800454b 	.word	0x0800454b
 80043f4:	08004399 	.word	0x08004399
 80043f8:	0800444d 	.word	0x0800444d
 80043fc:	08004399 	.word	0x08004399
 8004400:	08004399 	.word	0x08004399
 8004404:	08004513 	.word	0x08004513
 8004408:	680b      	ldr	r3, [r1, #0]
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	600a      	str	r2, [r1, #0]
 8004410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004418:	2301      	movs	r3, #1
 800441a:	e0a3      	b.n	8004564 <_printf_i+0x1f4>
 800441c:	6825      	ldr	r5, [r4, #0]
 800441e:	6808      	ldr	r0, [r1, #0]
 8004420:	062e      	lsls	r6, r5, #24
 8004422:	f100 0304 	add.w	r3, r0, #4
 8004426:	d50a      	bpl.n	800443e <_printf_i+0xce>
 8004428:	6805      	ldr	r5, [r0, #0]
 800442a:	600b      	str	r3, [r1, #0]
 800442c:	2d00      	cmp	r5, #0
 800442e:	da03      	bge.n	8004438 <_printf_i+0xc8>
 8004430:	232d      	movs	r3, #45	; 0x2d
 8004432:	426d      	negs	r5, r5
 8004434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004438:	485e      	ldr	r0, [pc, #376]	; (80045b4 <_printf_i+0x244>)
 800443a:	230a      	movs	r3, #10
 800443c:	e019      	b.n	8004472 <_printf_i+0x102>
 800443e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004442:	6805      	ldr	r5, [r0, #0]
 8004444:	600b      	str	r3, [r1, #0]
 8004446:	bf18      	it	ne
 8004448:	b22d      	sxthne	r5, r5
 800444a:	e7ef      	b.n	800442c <_printf_i+0xbc>
 800444c:	680b      	ldr	r3, [r1, #0]
 800444e:	6825      	ldr	r5, [r4, #0]
 8004450:	1d18      	adds	r0, r3, #4
 8004452:	6008      	str	r0, [r1, #0]
 8004454:	0628      	lsls	r0, r5, #24
 8004456:	d501      	bpl.n	800445c <_printf_i+0xec>
 8004458:	681d      	ldr	r5, [r3, #0]
 800445a:	e002      	b.n	8004462 <_printf_i+0xf2>
 800445c:	0669      	lsls	r1, r5, #25
 800445e:	d5fb      	bpl.n	8004458 <_printf_i+0xe8>
 8004460:	881d      	ldrh	r5, [r3, #0]
 8004462:	4854      	ldr	r0, [pc, #336]	; (80045b4 <_printf_i+0x244>)
 8004464:	2f6f      	cmp	r7, #111	; 0x6f
 8004466:	bf0c      	ite	eq
 8004468:	2308      	moveq	r3, #8
 800446a:	230a      	movne	r3, #10
 800446c:	2100      	movs	r1, #0
 800446e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004472:	6866      	ldr	r6, [r4, #4]
 8004474:	60a6      	str	r6, [r4, #8]
 8004476:	2e00      	cmp	r6, #0
 8004478:	bfa2      	ittt	ge
 800447a:	6821      	ldrge	r1, [r4, #0]
 800447c:	f021 0104 	bicge.w	r1, r1, #4
 8004480:	6021      	strge	r1, [r4, #0]
 8004482:	b90d      	cbnz	r5, 8004488 <_printf_i+0x118>
 8004484:	2e00      	cmp	r6, #0
 8004486:	d04d      	beq.n	8004524 <_printf_i+0x1b4>
 8004488:	4616      	mov	r6, r2
 800448a:	fbb5 f1f3 	udiv	r1, r5, r3
 800448e:	fb03 5711 	mls	r7, r3, r1, r5
 8004492:	5dc7      	ldrb	r7, [r0, r7]
 8004494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004498:	462f      	mov	r7, r5
 800449a:	42bb      	cmp	r3, r7
 800449c:	460d      	mov	r5, r1
 800449e:	d9f4      	bls.n	800448a <_printf_i+0x11a>
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d10b      	bne.n	80044bc <_printf_i+0x14c>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	07df      	lsls	r7, r3, #31
 80044a8:	d508      	bpl.n	80044bc <_printf_i+0x14c>
 80044aa:	6923      	ldr	r3, [r4, #16]
 80044ac:	6861      	ldr	r1, [r4, #4]
 80044ae:	4299      	cmp	r1, r3
 80044b0:	bfde      	ittt	le
 80044b2:	2330      	movle	r3, #48	; 0x30
 80044b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044bc:	1b92      	subs	r2, r2, r6
 80044be:	6122      	str	r2, [r4, #16]
 80044c0:	f8cd a000 	str.w	sl, [sp]
 80044c4:	464b      	mov	r3, r9
 80044c6:	aa03      	add	r2, sp, #12
 80044c8:	4621      	mov	r1, r4
 80044ca:	4640      	mov	r0, r8
 80044cc:	f7ff fee2 	bl	8004294 <_printf_common>
 80044d0:	3001      	adds	r0, #1
 80044d2:	d14c      	bne.n	800456e <_printf_i+0x1fe>
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295
 80044d8:	b004      	add	sp, #16
 80044da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044de:	4835      	ldr	r0, [pc, #212]	; (80045b4 <_printf_i+0x244>)
 80044e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	680e      	ldr	r6, [r1, #0]
 80044e8:	061f      	lsls	r7, r3, #24
 80044ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80044ee:	600e      	str	r6, [r1, #0]
 80044f0:	d514      	bpl.n	800451c <_printf_i+0x1ac>
 80044f2:	07d9      	lsls	r1, r3, #31
 80044f4:	bf44      	itt	mi
 80044f6:	f043 0320 	orrmi.w	r3, r3, #32
 80044fa:	6023      	strmi	r3, [r4, #0]
 80044fc:	b91d      	cbnz	r5, 8004506 <_printf_i+0x196>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	f023 0320 	bic.w	r3, r3, #32
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	2310      	movs	r3, #16
 8004508:	e7b0      	b.n	800446c <_printf_i+0xfc>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	f043 0320 	orr.w	r3, r3, #32
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	2378      	movs	r3, #120	; 0x78
 8004514:	4828      	ldr	r0, [pc, #160]	; (80045b8 <_printf_i+0x248>)
 8004516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800451a:	e7e3      	b.n	80044e4 <_printf_i+0x174>
 800451c:	065e      	lsls	r6, r3, #25
 800451e:	bf48      	it	mi
 8004520:	b2ad      	uxthmi	r5, r5
 8004522:	e7e6      	b.n	80044f2 <_printf_i+0x182>
 8004524:	4616      	mov	r6, r2
 8004526:	e7bb      	b.n	80044a0 <_printf_i+0x130>
 8004528:	680b      	ldr	r3, [r1, #0]
 800452a:	6826      	ldr	r6, [r4, #0]
 800452c:	6960      	ldr	r0, [r4, #20]
 800452e:	1d1d      	adds	r5, r3, #4
 8004530:	600d      	str	r5, [r1, #0]
 8004532:	0635      	lsls	r5, r6, #24
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	d501      	bpl.n	800453c <_printf_i+0x1cc>
 8004538:	6018      	str	r0, [r3, #0]
 800453a:	e002      	b.n	8004542 <_printf_i+0x1d2>
 800453c:	0671      	lsls	r1, r6, #25
 800453e:	d5fb      	bpl.n	8004538 <_printf_i+0x1c8>
 8004540:	8018      	strh	r0, [r3, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	6123      	str	r3, [r4, #16]
 8004546:	4616      	mov	r6, r2
 8004548:	e7ba      	b.n	80044c0 <_printf_i+0x150>
 800454a:	680b      	ldr	r3, [r1, #0]
 800454c:	1d1a      	adds	r2, r3, #4
 800454e:	600a      	str	r2, [r1, #0]
 8004550:	681e      	ldr	r6, [r3, #0]
 8004552:	6862      	ldr	r2, [r4, #4]
 8004554:	2100      	movs	r1, #0
 8004556:	4630      	mov	r0, r6
 8004558:	f7fb fe42 	bl	80001e0 <memchr>
 800455c:	b108      	cbz	r0, 8004562 <_printf_i+0x1f2>
 800455e:	1b80      	subs	r0, r0, r6
 8004560:	6060      	str	r0, [r4, #4]
 8004562:	6863      	ldr	r3, [r4, #4]
 8004564:	6123      	str	r3, [r4, #16]
 8004566:	2300      	movs	r3, #0
 8004568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800456c:	e7a8      	b.n	80044c0 <_printf_i+0x150>
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	4632      	mov	r2, r6
 8004572:	4649      	mov	r1, r9
 8004574:	4640      	mov	r0, r8
 8004576:	47d0      	blx	sl
 8004578:	3001      	adds	r0, #1
 800457a:	d0ab      	beq.n	80044d4 <_printf_i+0x164>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	079b      	lsls	r3, r3, #30
 8004580:	d413      	bmi.n	80045aa <_printf_i+0x23a>
 8004582:	68e0      	ldr	r0, [r4, #12]
 8004584:	9b03      	ldr	r3, [sp, #12]
 8004586:	4298      	cmp	r0, r3
 8004588:	bfb8      	it	lt
 800458a:	4618      	movlt	r0, r3
 800458c:	e7a4      	b.n	80044d8 <_printf_i+0x168>
 800458e:	2301      	movs	r3, #1
 8004590:	4632      	mov	r2, r6
 8004592:	4649      	mov	r1, r9
 8004594:	4640      	mov	r0, r8
 8004596:	47d0      	blx	sl
 8004598:	3001      	adds	r0, #1
 800459a:	d09b      	beq.n	80044d4 <_printf_i+0x164>
 800459c:	3501      	adds	r5, #1
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	9903      	ldr	r1, [sp, #12]
 80045a2:	1a5b      	subs	r3, r3, r1
 80045a4:	42ab      	cmp	r3, r5
 80045a6:	dcf2      	bgt.n	800458e <_printf_i+0x21e>
 80045a8:	e7eb      	b.n	8004582 <_printf_i+0x212>
 80045aa:	2500      	movs	r5, #0
 80045ac:	f104 0619 	add.w	r6, r4, #25
 80045b0:	e7f5      	b.n	800459e <_printf_i+0x22e>
 80045b2:	bf00      	nop
 80045b4:	0800509f 	.word	0x0800509f
 80045b8:	080050b0 	.word	0x080050b0

080045bc <_sbrk_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4d06      	ldr	r5, [pc, #24]	; (80045d8 <_sbrk_r+0x1c>)
 80045c0:	2300      	movs	r3, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	602b      	str	r3, [r5, #0]
 80045c8:	f7fd f818 	bl	80015fc <_sbrk>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d102      	bne.n	80045d6 <_sbrk_r+0x1a>
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	b103      	cbz	r3, 80045d6 <_sbrk_r+0x1a>
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	bd38      	pop	{r3, r4, r5, pc}
 80045d8:	20000b34 	.word	0x20000b34

080045dc <__swbuf_r>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	460e      	mov	r6, r1
 80045e0:	4614      	mov	r4, r2
 80045e2:	4605      	mov	r5, r0
 80045e4:	b118      	cbz	r0, 80045ee <__swbuf_r+0x12>
 80045e6:	6983      	ldr	r3, [r0, #24]
 80045e8:	b90b      	cbnz	r3, 80045ee <__swbuf_r+0x12>
 80045ea:	f000 f9d9 	bl	80049a0 <__sinit>
 80045ee:	4b21      	ldr	r3, [pc, #132]	; (8004674 <__swbuf_r+0x98>)
 80045f0:	429c      	cmp	r4, r3
 80045f2:	d12b      	bne.n	800464c <__swbuf_r+0x70>
 80045f4:	686c      	ldr	r4, [r5, #4]
 80045f6:	69a3      	ldr	r3, [r4, #24]
 80045f8:	60a3      	str	r3, [r4, #8]
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	071a      	lsls	r2, r3, #28
 80045fe:	d52f      	bpl.n	8004660 <__swbuf_r+0x84>
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	b36b      	cbz	r3, 8004660 <__swbuf_r+0x84>
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	6820      	ldr	r0, [r4, #0]
 8004608:	1ac0      	subs	r0, r0, r3
 800460a:	6963      	ldr	r3, [r4, #20]
 800460c:	b2f6      	uxtb	r6, r6
 800460e:	4283      	cmp	r3, r0
 8004610:	4637      	mov	r7, r6
 8004612:	dc04      	bgt.n	800461e <__swbuf_r+0x42>
 8004614:	4621      	mov	r1, r4
 8004616:	4628      	mov	r0, r5
 8004618:	f000 f92e 	bl	8004878 <_fflush_r>
 800461c:	bb30      	cbnz	r0, 800466c <__swbuf_r+0x90>
 800461e:	68a3      	ldr	r3, [r4, #8]
 8004620:	3b01      	subs	r3, #1
 8004622:	60a3      	str	r3, [r4, #8]
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	6022      	str	r2, [r4, #0]
 800462a:	701e      	strb	r6, [r3, #0]
 800462c:	6963      	ldr	r3, [r4, #20]
 800462e:	3001      	adds	r0, #1
 8004630:	4283      	cmp	r3, r0
 8004632:	d004      	beq.n	800463e <__swbuf_r+0x62>
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	07db      	lsls	r3, r3, #31
 8004638:	d506      	bpl.n	8004648 <__swbuf_r+0x6c>
 800463a:	2e0a      	cmp	r6, #10
 800463c:	d104      	bne.n	8004648 <__swbuf_r+0x6c>
 800463e:	4621      	mov	r1, r4
 8004640:	4628      	mov	r0, r5
 8004642:	f000 f919 	bl	8004878 <_fflush_r>
 8004646:	b988      	cbnz	r0, 800466c <__swbuf_r+0x90>
 8004648:	4638      	mov	r0, r7
 800464a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <__swbuf_r+0x9c>)
 800464e:	429c      	cmp	r4, r3
 8004650:	d101      	bne.n	8004656 <__swbuf_r+0x7a>
 8004652:	68ac      	ldr	r4, [r5, #8]
 8004654:	e7cf      	b.n	80045f6 <__swbuf_r+0x1a>
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <__swbuf_r+0xa0>)
 8004658:	429c      	cmp	r4, r3
 800465a:	bf08      	it	eq
 800465c:	68ec      	ldreq	r4, [r5, #12]
 800465e:	e7ca      	b.n	80045f6 <__swbuf_r+0x1a>
 8004660:	4621      	mov	r1, r4
 8004662:	4628      	mov	r0, r5
 8004664:	f000 f80c 	bl	8004680 <__swsetup_r>
 8004668:	2800      	cmp	r0, #0
 800466a:	d0cb      	beq.n	8004604 <__swbuf_r+0x28>
 800466c:	f04f 37ff 	mov.w	r7, #4294967295
 8004670:	e7ea      	b.n	8004648 <__swbuf_r+0x6c>
 8004672:	bf00      	nop
 8004674:	080050e4 	.word	0x080050e4
 8004678:	08005104 	.word	0x08005104
 800467c:	080050c4 	.word	0x080050c4

08004680 <__swsetup_r>:
 8004680:	4b32      	ldr	r3, [pc, #200]	; (800474c <__swsetup_r+0xcc>)
 8004682:	b570      	push	{r4, r5, r6, lr}
 8004684:	681d      	ldr	r5, [r3, #0]
 8004686:	4606      	mov	r6, r0
 8004688:	460c      	mov	r4, r1
 800468a:	b125      	cbz	r5, 8004696 <__swsetup_r+0x16>
 800468c:	69ab      	ldr	r3, [r5, #24]
 800468e:	b913      	cbnz	r3, 8004696 <__swsetup_r+0x16>
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f985 	bl	80049a0 <__sinit>
 8004696:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <__swsetup_r+0xd0>)
 8004698:	429c      	cmp	r4, r3
 800469a:	d10f      	bne.n	80046bc <__swsetup_r+0x3c>
 800469c:	686c      	ldr	r4, [r5, #4]
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046a4:	0719      	lsls	r1, r3, #28
 80046a6:	d42c      	bmi.n	8004702 <__swsetup_r+0x82>
 80046a8:	06dd      	lsls	r5, r3, #27
 80046aa:	d411      	bmi.n	80046d0 <__swsetup_r+0x50>
 80046ac:	2309      	movs	r3, #9
 80046ae:	6033      	str	r3, [r6, #0]
 80046b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ba:	e03e      	b.n	800473a <__swsetup_r+0xba>
 80046bc:	4b25      	ldr	r3, [pc, #148]	; (8004754 <__swsetup_r+0xd4>)
 80046be:	429c      	cmp	r4, r3
 80046c0:	d101      	bne.n	80046c6 <__swsetup_r+0x46>
 80046c2:	68ac      	ldr	r4, [r5, #8]
 80046c4:	e7eb      	b.n	800469e <__swsetup_r+0x1e>
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <__swsetup_r+0xd8>)
 80046c8:	429c      	cmp	r4, r3
 80046ca:	bf08      	it	eq
 80046cc:	68ec      	ldreq	r4, [r5, #12]
 80046ce:	e7e6      	b.n	800469e <__swsetup_r+0x1e>
 80046d0:	0758      	lsls	r0, r3, #29
 80046d2:	d512      	bpl.n	80046fa <__swsetup_r+0x7a>
 80046d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046d6:	b141      	cbz	r1, 80046ea <__swsetup_r+0x6a>
 80046d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046dc:	4299      	cmp	r1, r3
 80046de:	d002      	beq.n	80046e6 <__swsetup_r+0x66>
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7ff fa77 	bl	8003bd4 <_free_r>
 80046e6:	2300      	movs	r3, #0
 80046e8:	6363      	str	r3, [r4, #52]	; 0x34
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	2300      	movs	r3, #0
 80046f4:	6063      	str	r3, [r4, #4]
 80046f6:	6923      	ldr	r3, [r4, #16]
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	89a3      	ldrh	r3, [r4, #12]
 80046fc:	f043 0308 	orr.w	r3, r3, #8
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	6923      	ldr	r3, [r4, #16]
 8004704:	b94b      	cbnz	r3, 800471a <__swsetup_r+0x9a>
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800470c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004710:	d003      	beq.n	800471a <__swsetup_r+0x9a>
 8004712:	4621      	mov	r1, r4
 8004714:	4630      	mov	r0, r6
 8004716:	f000 fa07 	bl	8004b28 <__smakebuf_r>
 800471a:	89a0      	ldrh	r0, [r4, #12]
 800471c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004720:	f010 0301 	ands.w	r3, r0, #1
 8004724:	d00a      	beq.n	800473c <__swsetup_r+0xbc>
 8004726:	2300      	movs	r3, #0
 8004728:	60a3      	str	r3, [r4, #8]
 800472a:	6963      	ldr	r3, [r4, #20]
 800472c:	425b      	negs	r3, r3
 800472e:	61a3      	str	r3, [r4, #24]
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	b943      	cbnz	r3, 8004746 <__swsetup_r+0xc6>
 8004734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004738:	d1ba      	bne.n	80046b0 <__swsetup_r+0x30>
 800473a:	bd70      	pop	{r4, r5, r6, pc}
 800473c:	0781      	lsls	r1, r0, #30
 800473e:	bf58      	it	pl
 8004740:	6963      	ldrpl	r3, [r4, #20]
 8004742:	60a3      	str	r3, [r4, #8]
 8004744:	e7f4      	b.n	8004730 <__swsetup_r+0xb0>
 8004746:	2000      	movs	r0, #0
 8004748:	e7f7      	b.n	800473a <__swsetup_r+0xba>
 800474a:	bf00      	nop
 800474c:	2000000c 	.word	0x2000000c
 8004750:	080050e4 	.word	0x080050e4
 8004754:	08005104 	.word	0x08005104
 8004758:	080050c4 	.word	0x080050c4

0800475c <abort>:
 800475c:	b508      	push	{r3, lr}
 800475e:	2006      	movs	r0, #6
 8004760:	f000 faa4 	bl	8004cac <raise>
 8004764:	2001      	movs	r0, #1
 8004766:	f7fc fed1 	bl	800150c <_exit>
	...

0800476c <__sflush_r>:
 800476c:	898a      	ldrh	r2, [r1, #12]
 800476e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004772:	4605      	mov	r5, r0
 8004774:	0710      	lsls	r0, r2, #28
 8004776:	460c      	mov	r4, r1
 8004778:	d458      	bmi.n	800482c <__sflush_r+0xc0>
 800477a:	684b      	ldr	r3, [r1, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	dc05      	bgt.n	800478c <__sflush_r+0x20>
 8004780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	dc02      	bgt.n	800478c <__sflush_r+0x20>
 8004786:	2000      	movs	r0, #0
 8004788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800478c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800478e:	2e00      	cmp	r6, #0
 8004790:	d0f9      	beq.n	8004786 <__sflush_r+0x1a>
 8004792:	2300      	movs	r3, #0
 8004794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004798:	682f      	ldr	r7, [r5, #0]
 800479a:	602b      	str	r3, [r5, #0]
 800479c:	d032      	beq.n	8004804 <__sflush_r+0x98>
 800479e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	075a      	lsls	r2, r3, #29
 80047a4:	d505      	bpl.n	80047b2 <__sflush_r+0x46>
 80047a6:	6863      	ldr	r3, [r4, #4]
 80047a8:	1ac0      	subs	r0, r0, r3
 80047aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047ac:	b10b      	cbz	r3, 80047b2 <__sflush_r+0x46>
 80047ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047b0:	1ac0      	subs	r0, r0, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	4602      	mov	r2, r0
 80047b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047b8:	6a21      	ldr	r1, [r4, #32]
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b0      	blx	r6
 80047be:	1c43      	adds	r3, r0, #1
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	d106      	bne.n	80047d2 <__sflush_r+0x66>
 80047c4:	6829      	ldr	r1, [r5, #0]
 80047c6:	291d      	cmp	r1, #29
 80047c8:	d82c      	bhi.n	8004824 <__sflush_r+0xb8>
 80047ca:	4a2a      	ldr	r2, [pc, #168]	; (8004874 <__sflush_r+0x108>)
 80047cc:	40ca      	lsrs	r2, r1
 80047ce:	07d6      	lsls	r6, r2, #31
 80047d0:	d528      	bpl.n	8004824 <__sflush_r+0xb8>
 80047d2:	2200      	movs	r2, #0
 80047d4:	6062      	str	r2, [r4, #4]
 80047d6:	04d9      	lsls	r1, r3, #19
 80047d8:	6922      	ldr	r2, [r4, #16]
 80047da:	6022      	str	r2, [r4, #0]
 80047dc:	d504      	bpl.n	80047e8 <__sflush_r+0x7c>
 80047de:	1c42      	adds	r2, r0, #1
 80047e0:	d101      	bne.n	80047e6 <__sflush_r+0x7a>
 80047e2:	682b      	ldr	r3, [r5, #0]
 80047e4:	b903      	cbnz	r3, 80047e8 <__sflush_r+0x7c>
 80047e6:	6560      	str	r0, [r4, #84]	; 0x54
 80047e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ea:	602f      	str	r7, [r5, #0]
 80047ec:	2900      	cmp	r1, #0
 80047ee:	d0ca      	beq.n	8004786 <__sflush_r+0x1a>
 80047f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f4:	4299      	cmp	r1, r3
 80047f6:	d002      	beq.n	80047fe <__sflush_r+0x92>
 80047f8:	4628      	mov	r0, r5
 80047fa:	f7ff f9eb 	bl	8003bd4 <_free_r>
 80047fe:	2000      	movs	r0, #0
 8004800:	6360      	str	r0, [r4, #52]	; 0x34
 8004802:	e7c1      	b.n	8004788 <__sflush_r+0x1c>
 8004804:	6a21      	ldr	r1, [r4, #32]
 8004806:	2301      	movs	r3, #1
 8004808:	4628      	mov	r0, r5
 800480a:	47b0      	blx	r6
 800480c:	1c41      	adds	r1, r0, #1
 800480e:	d1c7      	bne.n	80047a0 <__sflush_r+0x34>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0c4      	beq.n	80047a0 <__sflush_r+0x34>
 8004816:	2b1d      	cmp	r3, #29
 8004818:	d001      	beq.n	800481e <__sflush_r+0xb2>
 800481a:	2b16      	cmp	r3, #22
 800481c:	d101      	bne.n	8004822 <__sflush_r+0xb6>
 800481e:	602f      	str	r7, [r5, #0]
 8004820:	e7b1      	b.n	8004786 <__sflush_r+0x1a>
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	e7ad      	b.n	8004788 <__sflush_r+0x1c>
 800482c:	690f      	ldr	r7, [r1, #16]
 800482e:	2f00      	cmp	r7, #0
 8004830:	d0a9      	beq.n	8004786 <__sflush_r+0x1a>
 8004832:	0793      	lsls	r3, r2, #30
 8004834:	680e      	ldr	r6, [r1, #0]
 8004836:	bf08      	it	eq
 8004838:	694b      	ldreq	r3, [r1, #20]
 800483a:	600f      	str	r7, [r1, #0]
 800483c:	bf18      	it	ne
 800483e:	2300      	movne	r3, #0
 8004840:	eba6 0807 	sub.w	r8, r6, r7
 8004844:	608b      	str	r3, [r1, #8]
 8004846:	f1b8 0f00 	cmp.w	r8, #0
 800484a:	dd9c      	ble.n	8004786 <__sflush_r+0x1a>
 800484c:	6a21      	ldr	r1, [r4, #32]
 800484e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004850:	4643      	mov	r3, r8
 8004852:	463a      	mov	r2, r7
 8004854:	4628      	mov	r0, r5
 8004856:	47b0      	blx	r6
 8004858:	2800      	cmp	r0, #0
 800485a:	dc06      	bgt.n	800486a <__sflush_r+0xfe>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004862:	81a3      	strh	r3, [r4, #12]
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	e78e      	b.n	8004788 <__sflush_r+0x1c>
 800486a:	4407      	add	r7, r0
 800486c:	eba8 0800 	sub.w	r8, r8, r0
 8004870:	e7e9      	b.n	8004846 <__sflush_r+0xda>
 8004872:	bf00      	nop
 8004874:	20400001 	.word	0x20400001

08004878 <_fflush_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	690b      	ldr	r3, [r1, #16]
 800487c:	4605      	mov	r5, r0
 800487e:	460c      	mov	r4, r1
 8004880:	b913      	cbnz	r3, 8004888 <_fflush_r+0x10>
 8004882:	2500      	movs	r5, #0
 8004884:	4628      	mov	r0, r5
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	b118      	cbz	r0, 8004892 <_fflush_r+0x1a>
 800488a:	6983      	ldr	r3, [r0, #24]
 800488c:	b90b      	cbnz	r3, 8004892 <_fflush_r+0x1a>
 800488e:	f000 f887 	bl	80049a0 <__sinit>
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <_fflush_r+0x6c>)
 8004894:	429c      	cmp	r4, r3
 8004896:	d11b      	bne.n	80048d0 <_fflush_r+0x58>
 8004898:	686c      	ldr	r4, [r5, #4]
 800489a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ef      	beq.n	8004882 <_fflush_r+0xa>
 80048a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048a4:	07d0      	lsls	r0, r2, #31
 80048a6:	d404      	bmi.n	80048b2 <_fflush_r+0x3a>
 80048a8:	0599      	lsls	r1, r3, #22
 80048aa:	d402      	bmi.n	80048b2 <_fflush_r+0x3a>
 80048ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ae:	f000 f915 	bl	8004adc <__retarget_lock_acquire_recursive>
 80048b2:	4628      	mov	r0, r5
 80048b4:	4621      	mov	r1, r4
 80048b6:	f7ff ff59 	bl	800476c <__sflush_r>
 80048ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048bc:	07da      	lsls	r2, r3, #31
 80048be:	4605      	mov	r5, r0
 80048c0:	d4e0      	bmi.n	8004884 <_fflush_r+0xc>
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	059b      	lsls	r3, r3, #22
 80048c6:	d4dd      	bmi.n	8004884 <_fflush_r+0xc>
 80048c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ca:	f000 f908 	bl	8004ade <__retarget_lock_release_recursive>
 80048ce:	e7d9      	b.n	8004884 <_fflush_r+0xc>
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <_fflush_r+0x70>)
 80048d2:	429c      	cmp	r4, r3
 80048d4:	d101      	bne.n	80048da <_fflush_r+0x62>
 80048d6:	68ac      	ldr	r4, [r5, #8]
 80048d8:	e7df      	b.n	800489a <_fflush_r+0x22>
 80048da:	4b04      	ldr	r3, [pc, #16]	; (80048ec <_fflush_r+0x74>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	bf08      	it	eq
 80048e0:	68ec      	ldreq	r4, [r5, #12]
 80048e2:	e7da      	b.n	800489a <_fflush_r+0x22>
 80048e4:	080050e4 	.word	0x080050e4
 80048e8:	08005104 	.word	0x08005104
 80048ec:	080050c4 	.word	0x080050c4

080048f0 <std>:
 80048f0:	2300      	movs	r3, #0
 80048f2:	b510      	push	{r4, lr}
 80048f4:	4604      	mov	r4, r0
 80048f6:	e9c0 3300 	strd	r3, r3, [r0]
 80048fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048fe:	6083      	str	r3, [r0, #8]
 8004900:	8181      	strh	r1, [r0, #12]
 8004902:	6643      	str	r3, [r0, #100]	; 0x64
 8004904:	81c2      	strh	r2, [r0, #14]
 8004906:	6183      	str	r3, [r0, #24]
 8004908:	4619      	mov	r1, r3
 800490a:	2208      	movs	r2, #8
 800490c:	305c      	adds	r0, #92	; 0x5c
 800490e:	f7ff f8c1 	bl	8003a94 <memset>
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <std+0x38>)
 8004914:	6263      	str	r3, [r4, #36]	; 0x24
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <std+0x3c>)
 8004918:	62a3      	str	r3, [r4, #40]	; 0x28
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <std+0x40>)
 800491c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <std+0x44>)
 8004920:	6224      	str	r4, [r4, #32]
 8004922:	6323      	str	r3, [r4, #48]	; 0x30
 8004924:	bd10      	pop	{r4, pc}
 8004926:	bf00      	nop
 8004928:	08004ce5 	.word	0x08004ce5
 800492c:	08004d07 	.word	0x08004d07
 8004930:	08004d3f 	.word	0x08004d3f
 8004934:	08004d63 	.word	0x08004d63

08004938 <_cleanup_r>:
 8004938:	4901      	ldr	r1, [pc, #4]	; (8004940 <_cleanup_r+0x8>)
 800493a:	f000 b8af 	b.w	8004a9c <_fwalk_reent>
 800493e:	bf00      	nop
 8004940:	08004879 	.word	0x08004879

08004944 <__sfmoreglue>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	1e4a      	subs	r2, r1, #1
 8004948:	2568      	movs	r5, #104	; 0x68
 800494a:	4355      	muls	r5, r2
 800494c:	460e      	mov	r6, r1
 800494e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004952:	f7ff f98f 	bl	8003c74 <_malloc_r>
 8004956:	4604      	mov	r4, r0
 8004958:	b140      	cbz	r0, 800496c <__sfmoreglue+0x28>
 800495a:	2100      	movs	r1, #0
 800495c:	e9c0 1600 	strd	r1, r6, [r0]
 8004960:	300c      	adds	r0, #12
 8004962:	60a0      	str	r0, [r4, #8]
 8004964:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004968:	f7ff f894 	bl	8003a94 <memset>
 800496c:	4620      	mov	r0, r4
 800496e:	bd70      	pop	{r4, r5, r6, pc}

08004970 <__sfp_lock_acquire>:
 8004970:	4801      	ldr	r0, [pc, #4]	; (8004978 <__sfp_lock_acquire+0x8>)
 8004972:	f000 b8b3 	b.w	8004adc <__retarget_lock_acquire_recursive>
 8004976:	bf00      	nop
 8004978:	20000b30 	.word	0x20000b30

0800497c <__sfp_lock_release>:
 800497c:	4801      	ldr	r0, [pc, #4]	; (8004984 <__sfp_lock_release+0x8>)
 800497e:	f000 b8ae 	b.w	8004ade <__retarget_lock_release_recursive>
 8004982:	bf00      	nop
 8004984:	20000b30 	.word	0x20000b30

08004988 <__sinit_lock_acquire>:
 8004988:	4801      	ldr	r0, [pc, #4]	; (8004990 <__sinit_lock_acquire+0x8>)
 800498a:	f000 b8a7 	b.w	8004adc <__retarget_lock_acquire_recursive>
 800498e:	bf00      	nop
 8004990:	20000b2b 	.word	0x20000b2b

08004994 <__sinit_lock_release>:
 8004994:	4801      	ldr	r0, [pc, #4]	; (800499c <__sinit_lock_release+0x8>)
 8004996:	f000 b8a2 	b.w	8004ade <__retarget_lock_release_recursive>
 800499a:	bf00      	nop
 800499c:	20000b2b 	.word	0x20000b2b

080049a0 <__sinit>:
 80049a0:	b510      	push	{r4, lr}
 80049a2:	4604      	mov	r4, r0
 80049a4:	f7ff fff0 	bl	8004988 <__sinit_lock_acquire>
 80049a8:	69a3      	ldr	r3, [r4, #24]
 80049aa:	b11b      	cbz	r3, 80049b4 <__sinit+0x14>
 80049ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b0:	f7ff bff0 	b.w	8004994 <__sinit_lock_release>
 80049b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049b8:	6523      	str	r3, [r4, #80]	; 0x50
 80049ba:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <__sinit+0x68>)
 80049bc:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <__sinit+0x6c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80049c2:	42a3      	cmp	r3, r4
 80049c4:	bf04      	itt	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	61a3      	streq	r3, [r4, #24]
 80049ca:	4620      	mov	r0, r4
 80049cc:	f000 f820 	bl	8004a10 <__sfp>
 80049d0:	6060      	str	r0, [r4, #4]
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 f81c 	bl	8004a10 <__sfp>
 80049d8:	60a0      	str	r0, [r4, #8]
 80049da:	4620      	mov	r0, r4
 80049dc:	f000 f818 	bl	8004a10 <__sfp>
 80049e0:	2200      	movs	r2, #0
 80049e2:	60e0      	str	r0, [r4, #12]
 80049e4:	2104      	movs	r1, #4
 80049e6:	6860      	ldr	r0, [r4, #4]
 80049e8:	f7ff ff82 	bl	80048f0 <std>
 80049ec:	68a0      	ldr	r0, [r4, #8]
 80049ee:	2201      	movs	r2, #1
 80049f0:	2109      	movs	r1, #9
 80049f2:	f7ff ff7d 	bl	80048f0 <std>
 80049f6:	68e0      	ldr	r0, [r4, #12]
 80049f8:	2202      	movs	r2, #2
 80049fa:	2112      	movs	r1, #18
 80049fc:	f7ff ff78 	bl	80048f0 <std>
 8004a00:	2301      	movs	r3, #1
 8004a02:	61a3      	str	r3, [r4, #24]
 8004a04:	e7d2      	b.n	80049ac <__sinit+0xc>
 8004a06:	bf00      	nop
 8004a08:	08004fd8 	.word	0x08004fd8
 8004a0c:	08004939 	.word	0x08004939

08004a10 <__sfp>:
 8004a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a12:	4607      	mov	r7, r0
 8004a14:	f7ff ffac 	bl	8004970 <__sfp_lock_acquire>
 8004a18:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <__sfp+0x84>)
 8004a1a:	681e      	ldr	r6, [r3, #0]
 8004a1c:	69b3      	ldr	r3, [r6, #24]
 8004a1e:	b913      	cbnz	r3, 8004a26 <__sfp+0x16>
 8004a20:	4630      	mov	r0, r6
 8004a22:	f7ff ffbd 	bl	80049a0 <__sinit>
 8004a26:	3648      	adds	r6, #72	; 0x48
 8004a28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	d503      	bpl.n	8004a38 <__sfp+0x28>
 8004a30:	6833      	ldr	r3, [r6, #0]
 8004a32:	b30b      	cbz	r3, 8004a78 <__sfp+0x68>
 8004a34:	6836      	ldr	r6, [r6, #0]
 8004a36:	e7f7      	b.n	8004a28 <__sfp+0x18>
 8004a38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a3c:	b9d5      	cbnz	r5, 8004a74 <__sfp+0x64>
 8004a3e:	4b16      	ldr	r3, [pc, #88]	; (8004a98 <__sfp+0x88>)
 8004a40:	60e3      	str	r3, [r4, #12]
 8004a42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a46:	6665      	str	r5, [r4, #100]	; 0x64
 8004a48:	f000 f847 	bl	8004ada <__retarget_lock_init_recursive>
 8004a4c:	f7ff ff96 	bl	800497c <__sfp_lock_release>
 8004a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a58:	6025      	str	r5, [r4, #0]
 8004a5a:	61a5      	str	r5, [r4, #24]
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	4629      	mov	r1, r5
 8004a60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a64:	f7ff f816 	bl	8003a94 <memset>
 8004a68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a70:	4620      	mov	r0, r4
 8004a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a74:	3468      	adds	r4, #104	; 0x68
 8004a76:	e7d9      	b.n	8004a2c <__sfp+0x1c>
 8004a78:	2104      	movs	r1, #4
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	f7ff ff62 	bl	8004944 <__sfmoreglue>
 8004a80:	4604      	mov	r4, r0
 8004a82:	6030      	str	r0, [r6, #0]
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d1d5      	bne.n	8004a34 <__sfp+0x24>
 8004a88:	f7ff ff78 	bl	800497c <__sfp_lock_release>
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	e7ee      	b.n	8004a70 <__sfp+0x60>
 8004a92:	bf00      	nop
 8004a94:	08004fd8 	.word	0x08004fd8
 8004a98:	ffff0001 	.word	0xffff0001

08004a9c <_fwalk_reent>:
 8004a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	4688      	mov	r8, r1
 8004aa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004aa8:	2700      	movs	r7, #0
 8004aaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004aae:	f1b9 0901 	subs.w	r9, r9, #1
 8004ab2:	d505      	bpl.n	8004ac0 <_fwalk_reent+0x24>
 8004ab4:	6824      	ldr	r4, [r4, #0]
 8004ab6:	2c00      	cmp	r4, #0
 8004ab8:	d1f7      	bne.n	8004aaa <_fwalk_reent+0xe>
 8004aba:	4638      	mov	r0, r7
 8004abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac0:	89ab      	ldrh	r3, [r5, #12]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d907      	bls.n	8004ad6 <_fwalk_reent+0x3a>
 8004ac6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aca:	3301      	adds	r3, #1
 8004acc:	d003      	beq.n	8004ad6 <_fwalk_reent+0x3a>
 8004ace:	4629      	mov	r1, r5
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	47c0      	blx	r8
 8004ad4:	4307      	orrs	r7, r0
 8004ad6:	3568      	adds	r5, #104	; 0x68
 8004ad8:	e7e9      	b.n	8004aae <_fwalk_reent+0x12>

08004ada <__retarget_lock_init_recursive>:
 8004ada:	4770      	bx	lr

08004adc <__retarget_lock_acquire_recursive>:
 8004adc:	4770      	bx	lr

08004ade <__retarget_lock_release_recursive>:
 8004ade:	4770      	bx	lr

08004ae0 <__swhatbuf_r>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	460e      	mov	r6, r1
 8004ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae8:	2900      	cmp	r1, #0
 8004aea:	b096      	sub	sp, #88	; 0x58
 8004aec:	4614      	mov	r4, r2
 8004aee:	461d      	mov	r5, r3
 8004af0:	da07      	bge.n	8004b02 <__swhatbuf_r+0x22>
 8004af2:	2300      	movs	r3, #0
 8004af4:	602b      	str	r3, [r5, #0]
 8004af6:	89b3      	ldrh	r3, [r6, #12]
 8004af8:	061a      	lsls	r2, r3, #24
 8004afa:	d410      	bmi.n	8004b1e <__swhatbuf_r+0x3e>
 8004afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b00:	e00e      	b.n	8004b20 <__swhatbuf_r+0x40>
 8004b02:	466a      	mov	r2, sp
 8004b04:	f000 f954 	bl	8004db0 <_fstat_r>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	dbf2      	blt.n	8004af2 <__swhatbuf_r+0x12>
 8004b0c:	9a01      	ldr	r2, [sp, #4]
 8004b0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b16:	425a      	negs	r2, r3
 8004b18:	415a      	adcs	r2, r3
 8004b1a:	602a      	str	r2, [r5, #0]
 8004b1c:	e7ee      	b.n	8004afc <__swhatbuf_r+0x1c>
 8004b1e:	2340      	movs	r3, #64	; 0x40
 8004b20:	2000      	movs	r0, #0
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	b016      	add	sp, #88	; 0x58
 8004b26:	bd70      	pop	{r4, r5, r6, pc}

08004b28 <__smakebuf_r>:
 8004b28:	898b      	ldrh	r3, [r1, #12]
 8004b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b2c:	079d      	lsls	r5, r3, #30
 8004b2e:	4606      	mov	r6, r0
 8004b30:	460c      	mov	r4, r1
 8004b32:	d507      	bpl.n	8004b44 <__smakebuf_r+0x1c>
 8004b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	6123      	str	r3, [r4, #16]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	6163      	str	r3, [r4, #20]
 8004b40:	b002      	add	sp, #8
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	ab01      	add	r3, sp, #4
 8004b46:	466a      	mov	r2, sp
 8004b48:	f7ff ffca 	bl	8004ae0 <__swhatbuf_r>
 8004b4c:	9900      	ldr	r1, [sp, #0]
 8004b4e:	4605      	mov	r5, r0
 8004b50:	4630      	mov	r0, r6
 8004b52:	f7ff f88f 	bl	8003c74 <_malloc_r>
 8004b56:	b948      	cbnz	r0, 8004b6c <__smakebuf_r+0x44>
 8004b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b5c:	059a      	lsls	r2, r3, #22
 8004b5e:	d4ef      	bmi.n	8004b40 <__smakebuf_r+0x18>
 8004b60:	f023 0303 	bic.w	r3, r3, #3
 8004b64:	f043 0302 	orr.w	r3, r3, #2
 8004b68:	81a3      	strh	r3, [r4, #12]
 8004b6a:	e7e3      	b.n	8004b34 <__smakebuf_r+0xc>
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <__smakebuf_r+0x7c>)
 8004b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	6020      	str	r0, [r4, #0]
 8004b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	9b00      	ldr	r3, [sp, #0]
 8004b7c:	6163      	str	r3, [r4, #20]
 8004b7e:	9b01      	ldr	r3, [sp, #4]
 8004b80:	6120      	str	r0, [r4, #16]
 8004b82:	b15b      	cbz	r3, 8004b9c <__smakebuf_r+0x74>
 8004b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f000 f923 	bl	8004dd4 <_isatty_r>
 8004b8e:	b128      	cbz	r0, 8004b9c <__smakebuf_r+0x74>
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	81a3      	strh	r3, [r4, #12]
 8004b9c:	89a0      	ldrh	r0, [r4, #12]
 8004b9e:	4305      	orrs	r5, r0
 8004ba0:	81a5      	strh	r5, [r4, #12]
 8004ba2:	e7cd      	b.n	8004b40 <__smakebuf_r+0x18>
 8004ba4:	08004939 	.word	0x08004939

08004ba8 <memcpy>:
 8004ba8:	440a      	add	r2, r1
 8004baa:	4291      	cmp	r1, r2
 8004bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bb0:	d100      	bne.n	8004bb4 <memcpy+0xc>
 8004bb2:	4770      	bx	lr
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bbe:	4291      	cmp	r1, r2
 8004bc0:	d1f9      	bne.n	8004bb6 <memcpy+0xe>
 8004bc2:	bd10      	pop	{r4, pc}

08004bc4 <memmove>:
 8004bc4:	4288      	cmp	r0, r1
 8004bc6:	b510      	push	{r4, lr}
 8004bc8:	eb01 0402 	add.w	r4, r1, r2
 8004bcc:	d902      	bls.n	8004bd4 <memmove+0x10>
 8004bce:	4284      	cmp	r4, r0
 8004bd0:	4623      	mov	r3, r4
 8004bd2:	d807      	bhi.n	8004be4 <memmove+0x20>
 8004bd4:	1e43      	subs	r3, r0, #1
 8004bd6:	42a1      	cmp	r1, r4
 8004bd8:	d008      	beq.n	8004bec <memmove+0x28>
 8004bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004be2:	e7f8      	b.n	8004bd6 <memmove+0x12>
 8004be4:	4402      	add	r2, r0
 8004be6:	4601      	mov	r1, r0
 8004be8:	428a      	cmp	r2, r1
 8004bea:	d100      	bne.n	8004bee <memmove+0x2a>
 8004bec:	bd10      	pop	{r4, pc}
 8004bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bf6:	e7f7      	b.n	8004be8 <memmove+0x24>

08004bf8 <__malloc_lock>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <__malloc_lock+0x8>)
 8004bfa:	f7ff bf6f 	b.w	8004adc <__retarget_lock_acquire_recursive>
 8004bfe:	bf00      	nop
 8004c00:	20000b2c 	.word	0x20000b2c

08004c04 <__malloc_unlock>:
 8004c04:	4801      	ldr	r0, [pc, #4]	; (8004c0c <__malloc_unlock+0x8>)
 8004c06:	f7ff bf6a 	b.w	8004ade <__retarget_lock_release_recursive>
 8004c0a:	bf00      	nop
 8004c0c:	20000b2c 	.word	0x20000b2c

08004c10 <_realloc_r>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	4607      	mov	r7, r0
 8004c14:	4614      	mov	r4, r2
 8004c16:	460e      	mov	r6, r1
 8004c18:	b921      	cbnz	r1, 8004c24 <_realloc_r+0x14>
 8004c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c1e:	4611      	mov	r1, r2
 8004c20:	f7ff b828 	b.w	8003c74 <_malloc_r>
 8004c24:	b922      	cbnz	r2, 8004c30 <_realloc_r+0x20>
 8004c26:	f7fe ffd5 	bl	8003bd4 <_free_r>
 8004c2a:	4625      	mov	r5, r4
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c30:	f000 f8f2 	bl	8004e18 <_malloc_usable_size_r>
 8004c34:	42a0      	cmp	r0, r4
 8004c36:	d20f      	bcs.n	8004c58 <_realloc_r+0x48>
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	f7ff f81a 	bl	8003c74 <_malloc_r>
 8004c40:	4605      	mov	r5, r0
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d0f2      	beq.n	8004c2c <_realloc_r+0x1c>
 8004c46:	4631      	mov	r1, r6
 8004c48:	4622      	mov	r2, r4
 8004c4a:	f7ff ffad 	bl	8004ba8 <memcpy>
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4638      	mov	r0, r7
 8004c52:	f7fe ffbf 	bl	8003bd4 <_free_r>
 8004c56:	e7e9      	b.n	8004c2c <_realloc_r+0x1c>
 8004c58:	4635      	mov	r5, r6
 8004c5a:	e7e7      	b.n	8004c2c <_realloc_r+0x1c>

08004c5c <_raise_r>:
 8004c5c:	291f      	cmp	r1, #31
 8004c5e:	b538      	push	{r3, r4, r5, lr}
 8004c60:	4604      	mov	r4, r0
 8004c62:	460d      	mov	r5, r1
 8004c64:	d904      	bls.n	8004c70 <_raise_r+0x14>
 8004c66:	2316      	movs	r3, #22
 8004c68:	6003      	str	r3, [r0, #0]
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004c72:	b112      	cbz	r2, 8004c7a <_raise_r+0x1e>
 8004c74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c78:	b94b      	cbnz	r3, 8004c8e <_raise_r+0x32>
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 f830 	bl	8004ce0 <_getpid_r>
 8004c80:	462a      	mov	r2, r5
 8004c82:	4601      	mov	r1, r0
 8004c84:	4620      	mov	r0, r4
 8004c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c8a:	f000 b817 	b.w	8004cbc <_kill_r>
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d00a      	beq.n	8004ca8 <_raise_r+0x4c>
 8004c92:	1c59      	adds	r1, r3, #1
 8004c94:	d103      	bne.n	8004c9e <_raise_r+0x42>
 8004c96:	2316      	movs	r3, #22
 8004c98:	6003      	str	r3, [r0, #0]
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	e7e7      	b.n	8004c6e <_raise_r+0x12>
 8004c9e:	2400      	movs	r4, #0
 8004ca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	4798      	blx	r3
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e7e0      	b.n	8004c6e <_raise_r+0x12>

08004cac <raise>:
 8004cac:	4b02      	ldr	r3, [pc, #8]	; (8004cb8 <raise+0xc>)
 8004cae:	4601      	mov	r1, r0
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	f7ff bfd3 	b.w	8004c5c <_raise_r>
 8004cb6:	bf00      	nop
 8004cb8:	2000000c 	.word	0x2000000c

08004cbc <_kill_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4d07      	ldr	r5, [pc, #28]	; (8004cdc <_kill_r+0x20>)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	602b      	str	r3, [r5, #0]
 8004cca:	f7fc fc0f 	bl	80014ec <_kill>
 8004cce:	1c43      	adds	r3, r0, #1
 8004cd0:	d102      	bne.n	8004cd8 <_kill_r+0x1c>
 8004cd2:	682b      	ldr	r3, [r5, #0]
 8004cd4:	b103      	cbz	r3, 8004cd8 <_kill_r+0x1c>
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	bd38      	pop	{r3, r4, r5, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000b34 	.word	0x20000b34

08004ce0 <_getpid_r>:
 8004ce0:	f7fc bbfc 	b.w	80014dc <_getpid>

08004ce4 <__sread>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cec:	f000 f89c 	bl	8004e28 <_read_r>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	bfab      	itete	ge
 8004cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8004cf8:	181b      	addge	r3, r3, r0
 8004cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cfe:	bfac      	ite	ge
 8004d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d02:	81a3      	strhlt	r3, [r4, #12]
 8004d04:	bd10      	pop	{r4, pc}

08004d06 <__swrite>:
 8004d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0a:	461f      	mov	r7, r3
 8004d0c:	898b      	ldrh	r3, [r1, #12]
 8004d0e:	05db      	lsls	r3, r3, #23
 8004d10:	4605      	mov	r5, r0
 8004d12:	460c      	mov	r4, r1
 8004d14:	4616      	mov	r6, r2
 8004d16:	d505      	bpl.n	8004d24 <__swrite+0x1e>
 8004d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f000 f868 	bl	8004df4 <_lseek_r>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	4632      	mov	r2, r6
 8004d32:	463b      	mov	r3, r7
 8004d34:	4628      	mov	r0, r5
 8004d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3a:	f000 b817 	b.w	8004d6c <_write_r>

08004d3e <__sseek>:
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	460c      	mov	r4, r1
 8004d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d46:	f000 f855 	bl	8004df4 <_lseek_r>
 8004d4a:	1c43      	adds	r3, r0, #1
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	bf15      	itete	ne
 8004d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d5a:	81a3      	strheq	r3, [r4, #12]
 8004d5c:	bf18      	it	ne
 8004d5e:	81a3      	strhne	r3, [r4, #12]
 8004d60:	bd10      	pop	{r4, pc}

08004d62 <__sclose>:
 8004d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d66:	f000 b813 	b.w	8004d90 <_close_r>
	...

08004d6c <_write_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d07      	ldr	r5, [pc, #28]	; (8004d8c <_write_r+0x20>)
 8004d70:	4604      	mov	r4, r0
 8004d72:	4608      	mov	r0, r1
 8004d74:	4611      	mov	r1, r2
 8004d76:	2200      	movs	r2, #0
 8004d78:	602a      	str	r2, [r5, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f7fc fbed 	bl	800155a <_write>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_write_r+0x1e>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_write_r+0x1e>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	20000b34 	.word	0x20000b34

08004d90 <_close_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4d06      	ldr	r5, [pc, #24]	; (8004dac <_close_r+0x1c>)
 8004d94:	2300      	movs	r3, #0
 8004d96:	4604      	mov	r4, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	f7fc fbf9 	bl	8001592 <_close>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d102      	bne.n	8004daa <_close_r+0x1a>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	b103      	cbz	r3, 8004daa <_close_r+0x1a>
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	20000b34 	.word	0x20000b34

08004db0 <_fstat_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4d07      	ldr	r5, [pc, #28]	; (8004dd0 <_fstat_r+0x20>)
 8004db4:	2300      	movs	r3, #0
 8004db6:	4604      	mov	r4, r0
 8004db8:	4608      	mov	r0, r1
 8004dba:	4611      	mov	r1, r2
 8004dbc:	602b      	str	r3, [r5, #0]
 8004dbe:	f7fc fbf4 	bl	80015aa <_fstat>
 8004dc2:	1c43      	adds	r3, r0, #1
 8004dc4:	d102      	bne.n	8004dcc <_fstat_r+0x1c>
 8004dc6:	682b      	ldr	r3, [r5, #0]
 8004dc8:	b103      	cbz	r3, 8004dcc <_fstat_r+0x1c>
 8004dca:	6023      	str	r3, [r4, #0]
 8004dcc:	bd38      	pop	{r3, r4, r5, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000b34 	.word	0x20000b34

08004dd4 <_isatty_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4d06      	ldr	r5, [pc, #24]	; (8004df0 <_isatty_r+0x1c>)
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4604      	mov	r4, r0
 8004ddc:	4608      	mov	r0, r1
 8004dde:	602b      	str	r3, [r5, #0]
 8004de0:	f7fc fbf3 	bl	80015ca <_isatty>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_isatty_r+0x1a>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_isatty_r+0x1a>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	20000b34 	.word	0x20000b34

08004df4 <_lseek_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4d07      	ldr	r5, [pc, #28]	; (8004e14 <_lseek_r+0x20>)
 8004df8:	4604      	mov	r4, r0
 8004dfa:	4608      	mov	r0, r1
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	2200      	movs	r2, #0
 8004e00:	602a      	str	r2, [r5, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f7fc fbec 	bl	80015e0 <_lseek>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d102      	bne.n	8004e12 <_lseek_r+0x1e>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	b103      	cbz	r3, 8004e12 <_lseek_r+0x1e>
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	20000b34 	.word	0x20000b34

08004e18 <_malloc_usable_size_r>:
 8004e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e1c:	1f18      	subs	r0, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bfbc      	itt	lt
 8004e22:	580b      	ldrlt	r3, [r1, r0]
 8004e24:	18c0      	addlt	r0, r0, r3
 8004e26:	4770      	bx	lr

08004e28 <_read_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4d07      	ldr	r5, [pc, #28]	; (8004e48 <_read_r+0x20>)
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	4608      	mov	r0, r1
 8004e30:	4611      	mov	r1, r2
 8004e32:	2200      	movs	r2, #0
 8004e34:	602a      	str	r2, [r5, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f7fc fb72 	bl	8001520 <_read>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_read_r+0x1e>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_read_r+0x1e>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	20000b34 	.word	0x20000b34

08004e4c <_init>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr

08004e58 <_fini>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr


ESPPart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08006cfc  08006cfc  00016cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc4  08006fc4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fcc  08006fcc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000ba4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c18  20000c18  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137cb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000265b  00000000  00000000  0003386f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00035ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da8  00000000  00000000  00036d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b17  00000000  00000000  00037af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fdb  00000000  00000000  0005b60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d981b  00000000  00000000  0006c5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145e05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000490c  00000000  00000000  00145e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ce4 	.word	0x08006ce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006ce4 	.word	0x08006ce4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db8:	f001 fcd4 	bl	8002764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbc:	f000 f836 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f000 f9f2 	bl	80011a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dc4:	f000 f972 	bl	80010ac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000dc8:	f000 f99a 	bl	8001100 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000dcc:	f000 f8ea 	bl	8000fa4 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000dd0:	f000 f9c0 	bl	8001154 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000dd4:	f000 f894 	bl	8000f00 <MX_ADC1_Init>
  MX_TIM7_Init();
 8000dd8:	f000 f932 	bl	8001040 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <main+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <main+0x64>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 0220 	orr.w	r2, r2, #32
 8000dea:	60da      	str	r2, [r3, #12]
  	ESP_Server_Init();
 8000dec:	f000 fba4 	bl	8001538 <ESP_Server_Init>
  	HAL_TIM_Base_Start_IT(&htim3);
 8000df0:	480a      	ldr	r0, [pc, #40]	; (8000e1c <main+0x68>)
 8000df2:	f003 f92b 	bl	800404c <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim7);
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <main+0x6c>)
 8000df8:	f003 f928 	bl	800404c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(messageHandlerFlag)
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <main+0x70>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0fb      	beq.n	8000dfc <main+0x48>
	  	{
	  	  messageHandlerFlag = 0;
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <main+0x70>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	801a      	strh	r2, [r3, #0]
	  	  netTimeout = 0;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <main+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	801a      	strh	r2, [r3, #0]
	  	  messageHandler();
 8000e10:	f000 fca4 	bl	800175c <messageHandler>
	  if(messageHandlerFlag)
 8000e14:	e7f2      	b.n	8000dfc <main+0x48>
 8000e16:	bf00      	nop
 8000e18:	200000ac 	.word	0x200000ac
 8000e1c:	200000f0 	.word	0x200000f0
 8000e20:	200009dc 	.word	0x200009dc
 8000e24:	20000094 	.word	0x20000094
 8000e28:	20000096 	.word	0x20000096

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b094      	sub	sp, #80	; 0x50
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	2230      	movs	r2, #48	; 0x30
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 fd76 	bl	800592c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <SystemClock_Config+0xcc>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	4a27      	ldr	r2, [pc, #156]	; (8000ef8 <SystemClock_Config+0xcc>)
 8000e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e60:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <SystemClock_Config+0xcc>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <SystemClock_Config+0xd0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <SystemClock_Config+0xd0>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <SystemClock_Config+0xd0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	2302      	movs	r3, #2
 8000e94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ea0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ea4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fc06 	bl	80036c4 <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ebe:	f000 faf3 	bl	80014a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ece:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	2105      	movs	r1, #5
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fe67 	bl	8003bb4 <HAL_RCC_ClockConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eec:	f000 fadc 	bl	80014a8 <Error_Handler>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3750      	adds	r7, #80	; 0x50
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40007000 	.word	0x40007000

08000f00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <MX_ADC1_Init+0x9c>)
 8000f16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <MX_ADC1_Init+0xa0>)
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f62:	f001 fc89 	bl	8002878 <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f6c:	f000 fa9c 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f70:	230e      	movs	r3, #14
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f82:	f001 fe27 	bl	8002bd4 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f8c:	f000 fa8c 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000138 	.word	0x20000138
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	0f000001 	.word	0x0f000001

08000fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	; (800103c <MX_TIM3_Init+0x98>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800-1;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fc8:	f244 129f 	movw	r2, #16799	; 0x419f
 8000fcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fd6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fe8:	4813      	ldr	r0, [pc, #76]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fea:	f002 ffdf 	bl	8003fac <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ff4:	f000 fa58 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_TIM3_Init+0x94>)
 8001006:	f003 f999 	bl	800433c <HAL_TIM_ConfigClockSource>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001010:	f000 fa4a 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_TIM3_Init+0x94>)
 8001022:	f003 fbbf 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800102c:	f000 fa3c 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200000f0 	.word	0x200000f0
 800103c:	40000400 	.word	0x40000400

08001040 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001046:	463b      	mov	r3, r7
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_TIM7_Init+0x64>)
 8001050:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MX_TIM7_Init+0x68>)
 8001052:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16800-1;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_TIM7_Init+0x64>)
 8001056:	f244 129f 	movw	r2, #16799	; 0x419f
 800105a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_TIM7_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_TIM7_Init+0x64>)
 8001064:	f242 720f 	movw	r2, #9999	; 0x270f
 8001068:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_TIM7_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_TIM7_Init+0x64>)
 8001072:	f002 ff9b 	bl	8003fac <HAL_TIM_Base_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800107c:	f000 fa14 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001080:	2320      	movs	r3, #32
 8001082:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_TIM7_Init+0x64>)
 800108e:	f003 fb89 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001098:	f000 fa06 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200009dc 	.word	0x200009dc
 80010a8:	40001400 	.word	0x40001400

080010ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_USART2_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010e4:	f003 fbee 	bl	80048c4 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 f9db 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000998 	.word	0x20000998
 80010fc:	40004400 	.word	0x40004400

08001100 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USART3_UART_Init+0x4c>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_USART3_UART_Init+0x50>)
 8001108:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_USART3_UART_Init+0x4c>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USART3_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USART3_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USART3_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USART3_UART_Init+0x4c>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USART3_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USART3_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART3_UART_Init+0x4c>)
 8001138:	f003 fbc4 	bl	80048c4 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001142:	f000 f9b1 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000ac 	.word	0x200000ac
 8001150:	40004800 	.word	0x40004800

08001154 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART6_UART_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_USART6_UART_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_USART6_UART_Init+0x4c>)
 8001160:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001164:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART6_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART6_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART6_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART6_UART_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART6_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART6_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART6_UART_Init+0x4c>)
 800118c:	f003 fb9a 	bl	80048c4 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001196:	f000 f987 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000950 	.word	0x20000950
 80011a4:	40011400 	.word	0x40011400

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	4bb3      	ldr	r3, [pc, #716]	; (8001490 <MX_GPIO_Init+0x2e8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4ab2      	ldr	r2, [pc, #712]	; (8001490 <MX_GPIO_Init+0x2e8>)
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4bb0      	ldr	r3, [pc, #704]	; (8001490 <MX_GPIO_Init+0x2e8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	4bac      	ldr	r3, [pc, #688]	; (8001490 <MX_GPIO_Init+0x2e8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4aab      	ldr	r2, [pc, #684]	; (8001490 <MX_GPIO_Init+0x2e8>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4ba9      	ldr	r3, [pc, #676]	; (8001490 <MX_GPIO_Init+0x2e8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4ba5      	ldr	r3, [pc, #660]	; (8001490 <MX_GPIO_Init+0x2e8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4aa4      	ldr	r2, [pc, #656]	; (8001490 <MX_GPIO_Init+0x2e8>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4ba2      	ldr	r3, [pc, #648]	; (8001490 <MX_GPIO_Init+0x2e8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b9e      	ldr	r3, [pc, #632]	; (8001490 <MX_GPIO_Init+0x2e8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a9d      	ldr	r2, [pc, #628]	; (8001490 <MX_GPIO_Init+0x2e8>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b9b      	ldr	r3, [pc, #620]	; (8001490 <MX_GPIO_Init+0x2e8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b97      	ldr	r3, [pc, #604]	; (8001490 <MX_GPIO_Init+0x2e8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a96      	ldr	r2, [pc, #600]	; (8001490 <MX_GPIO_Init+0x2e8>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b94      	ldr	r3, [pc, #592]	; (8001490 <MX_GPIO_Init+0x2e8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b90      	ldr	r3, [pc, #576]	; (8001490 <MX_GPIO_Init+0x2e8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a8f      	ldr	r2, [pc, #572]	; (8001490 <MX_GPIO_Init+0x2e8>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b8d      	ldr	r3, [pc, #564]	; (8001490 <MX_GPIO_Init+0x2e8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2108      	movs	r1, #8
 800126a:	488a      	ldr	r0, [pc, #552]	; (8001494 <MX_GPIO_Init+0x2ec>)
 800126c:	f002 fa10 	bl	8003690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2101      	movs	r1, #1
 8001274:	4888      	ldr	r0, [pc, #544]	; (8001498 <MX_GPIO_Init+0x2f0>)
 8001276:	f002 fa0b 	bl	8003690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800127a:	2200      	movs	r2, #0
 800127c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001280:	4886      	ldr	r0, [pc, #536]	; (800149c <MX_GPIO_Init+0x2f4>)
 8001282:	f002 fa05 	bl	8003690 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2130      	movs	r1, #48	; 0x30
 800128a:	4885      	ldr	r0, [pc, #532]	; (80014a0 <MX_GPIO_Init+0x2f8>)
 800128c:	f002 fa00 	bl	8003690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001290:	2308      	movs	r3, #8
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	487b      	ldr	r0, [pc, #492]	; (8001494 <MX_GPIO_Init+0x2ec>)
 80012a8:	f002 f856 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4875      	ldr	r0, [pc, #468]	; (8001498 <MX_GPIO_Init+0x2f0>)
 80012c4:	f002 f848 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012c8:	2308      	movs	r3, #8
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d8:	2305      	movs	r3, #5
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	486d      	ldr	r0, [pc, #436]	; (8001498 <MX_GPIO_Init+0x2f0>)
 80012e4:	f002 f838 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4869      	ldr	r0, [pc, #420]	; (80014a4 <MX_GPIO_Init+0x2fc>)
 80012fe:	f002 f82b 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001302:	2310      	movs	r3, #16
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001312:	2306      	movs	r3, #6
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4861      	ldr	r0, [pc, #388]	; (80014a4 <MX_GPIO_Init+0x2fc>)
 800131e:	f002 f81b 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001322:	23e0      	movs	r3, #224	; 0xe0
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001332:	2305      	movs	r3, #5
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	4859      	ldr	r0, [pc, #356]	; (80014a4 <MX_GPIO_Init+0x2fc>)
 800133e:	f002 f80b 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001342:	2304      	movs	r3, #4
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4852      	ldr	r0, [pc, #328]	; (80014a0 <MX_GPIO_Init+0x2f8>)
 8001356:	f001 ffff 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800135a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800136c:	2305      	movs	r3, #5
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	484a      	ldr	r0, [pc, #296]	; (80014a0 <MX_GPIO_Init+0x2f8>)
 8001378:	f001 ffee 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800137c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001380:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	4841      	ldr	r0, [pc, #260]	; (800149c <MX_GPIO_Init+0x2f4>)
 8001396:	f001 ffdf 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800139a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	483d      	ldr	r0, [pc, #244]	; (80014a4 <MX_GPIO_Init+0x2fc>)
 80013b0:	f001 ffd2 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80013b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013c6:	230a      	movs	r3, #10
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4834      	ldr	r0, [pc, #208]	; (80014a4 <MX_GPIO_Init+0x2fc>)
 80013d2:	f001 ffc1 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 80013d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e8:	2306      	movs	r3, #6
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4829      	ldr	r0, [pc, #164]	; (8001498 <MX_GPIO_Init+0x2f0>)
 80013f4:	f001 ffb0 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013f8:	2320      	movs	r3, #32
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4824      	ldr	r0, [pc, #144]	; (800149c <MX_GPIO_Init+0x2f4>)
 800140c:	f001 ffa4 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001410:	2330      	movs	r3, #48	; 0x30
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	481e      	ldr	r0, [pc, #120]	; (80014a0 <MX_GPIO_Init+0x2f8>)
 8001428:	f001 ff96 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800142c:	23c0      	movs	r3, #192	; 0xc0
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800143c:	2307      	movs	r3, #7
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4816      	ldr	r0, [pc, #88]	; (80014a0 <MX_GPIO_Init+0x2f8>)
 8001448:	f001 ff86 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 800144c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001452:	2312      	movs	r3, #18
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001456:	2301      	movs	r3, #1
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800145e:	2304      	movs	r3, #4
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_GPIO_Init+0x2f8>)
 800146a:	f001 ff75 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001472:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_GPIO_Init+0x2ec>)
 8001484:	f001 ff68 	bl	8003358 <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40021000 	.word	0x40021000
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020000 	.word	0x40020000

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <Error_Handler+0x8>
	...

080014b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014b8:	f3bf 8f4f 	dsb	sy
}
 80014bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <__NVIC_SystemReset+0x24>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014c6:	4904      	ldr	r1, [pc, #16]	; (80014d8 <__NVIC_SystemReset+0x24>)
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_SystemReset+0x28>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014ce:	f3bf 8f4f 	dsb	sy
}
 80014d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <__NVIC_SystemReset+0x20>
 80014d8:	e000ed00 	.word	0xe000ed00
 80014dc:	05fa0004 	.word	0x05fa0004

080014e0 <ESP_RESET>:
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
	__enable_irq();
}

void ESP_RESET()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	resetTime = 6;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <ESP_RESET+0x48>)
 80014e6:	2206      	movs	r2, #6
 80014e8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2120      	movs	r1, #32
 80014ee:	480f      	ldr	r0, [pc, #60]	; (800152c <ESP_RESET+0x4c>)
 80014f0:	f002 f8ce 	bl	8003690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2110      	movs	r1, #16
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <ESP_RESET+0x4c>)
 80014fa:	f002 f8c9 	bl	8003690 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 80014fe:	201e      	movs	r0, #30
 8001500:	f001 f996 	bl	8002830 <HAL_Delay>
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	2120      	movs	r1, #32
 8001508:	4808      	ldr	r0, [pc, #32]	; (800152c <ESP_RESET+0x4c>)
 800150a:	f002 f8c1 	bl	8003690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2110      	movs	r1, #16
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <ESP_RESET+0x4c>)
 8001514:	f002 f8bc 	bl	8003690 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(pc_uart, "ESP Reset\r\n", strlen( "ESP Reset\r\n"), 100);
 8001518:	2364      	movs	r3, #100	; 0x64
 800151a:	220b      	movs	r2, #11
 800151c:	4904      	ldr	r1, [pc, #16]	; (8001530 <ESP_RESET+0x50>)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <ESP_RESET+0x54>)
 8001520:	f003 fa1d 	bl	800495e <HAL_UART_Transmit>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	40020400 	.word	0x40020400
 8001530:	08006cfc 	.word	0x08006cfc
 8001534:	20000998 	.word	0x20000998

08001538 <ESP_Server_Init>:

void ESP_Server_Init()
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	ESP_RESET();
 800153c:	f7ff ffd0 	bl	80014e0 <ESP_RESET>
	HAL_Delay(1000);
 8001540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001544:	f001 f974 	bl	8002830 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, "Start\r\n", strlen( "Start\r\n"), 100);
 8001548:	2364      	movs	r3, #100	; 0x64
 800154a:	2207      	movs	r2, #7
 800154c:	492d      	ldr	r1, [pc, #180]	; (8001604 <ESP_Server_Init+0xcc>)
 800154e:	482e      	ldr	r0, [pc, #184]	; (8001608 <ESP_Server_Init+0xd0>)
 8001550:	f003 fa05 	bl	800495e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 8001554:	f000 f86e 	bl	8001634 <ESP_Clear_Buffer>
//	huart3.Init.BaudRate = 115200;
//	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CIOBAUD=115200\r\n", strlen("AT+CIOBAUD=115200\r\n"), 100);
//	huart3.Init.BaudRate = 115200;

//	HAL_Delay(1000);
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+RST\r\n", strlen("AT+RST\r\n"), 100);
 8001558:	2364      	movs	r3, #100	; 0x64
 800155a:	2208      	movs	r2, #8
 800155c:	492b      	ldr	r1, [pc, #172]	; (800160c <ESP_Server_Init+0xd4>)
 800155e:	482c      	ldr	r0, [pc, #176]	; (8001610 <ESP_Server_Init+0xd8>)
 8001560:	f003 f9fd 	bl	800495e <HAL_UART_Transmit>
	HAL_Delay(1500);
 8001564:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001568:	f001 f962 	bl	8002830 <HAL_Delay>
//	HAL_UART_Transmit(pc_uart, buffer, 1000, 1000);
//	HAL_UART_Transmit(pc_uart, (uint8_t*)"AT+RST\r\n", strlen("AT+RST\r\n"), 100);
	ESP_Clear_Buffer();
 800156c:	f000 f862 	bl	8001634 <ESP_Clear_Buffer>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"), 100);
 8001570:	2364      	movs	r3, #100	; 0x64
 8001572:	220d      	movs	r2, #13
 8001574:	4927      	ldr	r1, [pc, #156]	; (8001614 <ESP_Server_Init+0xdc>)
 8001576:	4826      	ldr	r0, [pc, #152]	; (8001610 <ESP_Server_Init+0xd8>)
 8001578:	f003 f9f1 	bl	800495e <HAL_UART_Transmit>
	HAL_Delay(100);
 800157c:	2064      	movs	r0, #100	; 0x64
 800157e:	f001 f957 	bl	8002830 <HAL_Delay>
//	HAL_UART_Transmit(pc_uart, buffer, 1000, 1000);
	ESP_Clear_Buffer();
 8001582:	f000 f857 	bl	8001634 <ESP_Clear_Buffer>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWDHCP=1,1\r\n", strlen("AT+CWDHCP=1,1\r\n"), 100);
 8001586:	2364      	movs	r3, #100	; 0x64
 8001588:	220f      	movs	r2, #15
 800158a:	4923      	ldr	r1, [pc, #140]	; (8001618 <ESP_Server_Init+0xe0>)
 800158c:	4820      	ldr	r0, [pc, #128]	; (8001610 <ESP_Server_Init+0xd8>)
 800158e:	f003 f9e6 	bl	800495e <HAL_UART_Transmit>
	HAL_Delay(100);
 8001592:	2064      	movs	r0, #100	; 0x64
 8001594:	f001 f94c 	bl	8002830 <HAL_Delay>
//	HAL_UART_Transmit(pc_uart, buffer, 1000, 1000);
	ESP_Clear_Buffer();
 8001598:	f000 f84c 	bl	8001634 <ESP_Clear_Buffer>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"), 100);
 800159c:	2364      	movs	r3, #100	; 0x64
 800159e:	220d      	movs	r2, #13
 80015a0:	491e      	ldr	r1, [pc, #120]	; (800161c <ESP_Server_Init+0xe4>)
 80015a2:	481b      	ldr	r0, [pc, #108]	; (8001610 <ESP_Server_Init+0xd8>)
 80015a4:	f003 f9db 	bl	800495e <HAL_UART_Transmit>
	HAL_Delay(100);
 80015a8:	2064      	movs	r0, #100	; 0x64
 80015aa:	f001 f941 	bl	8002830 <HAL_Delay>
//	HAL_UART_Transmit(pc_uart, buffer, 1000, 1000);
	ESP_Clear_Buffer();
 80015ae:	f000 f841 	bl	8001634 <ESP_Clear_Buffer>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CIPSERVER=1,80\r\n", strlen("AT+CIPSERVER=1,80\r\n"), 100);
 80015b2:	2364      	movs	r3, #100	; 0x64
 80015b4:	2213      	movs	r2, #19
 80015b6:	491a      	ldr	r1, [pc, #104]	; (8001620 <ESP_Server_Init+0xe8>)
 80015b8:	4815      	ldr	r0, [pc, #84]	; (8001610 <ESP_Server_Init+0xd8>)
 80015ba:	f003 f9d0 	bl	800495e <HAL_UART_Transmit>
	HAL_Delay(100);
 80015be:	2064      	movs	r0, #100	; 0x64
 80015c0:	f001 f936 	bl	8002830 <HAL_Delay>
	HAL_UART_Transmit(pc_uart, buffer, 1000, 1000);
 80015c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015cc:	4915      	ldr	r1, [pc, #84]	; (8001624 <ESP_Server_Init+0xec>)
 80015ce:	480e      	ldr	r0, [pc, #56]	; (8001608 <ESP_Server_Init+0xd0>)
 80015d0:	f003 f9c5 	bl	800495e <HAL_UART_Transmit>
	ESP_Clear_Buffer();
 80015d4:	f000 f82e 	bl	8001634 <ESP_Clear_Buffer>

	//Change your WiFi SSID credentials below
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWJAP=\"MichelCel\",\"michel123\"\r\n", strlen("AT+CWJAP=\"MichelCel\",\"MichelCel\"\r\n"), 100);
 80015d8:	2364      	movs	r3, #100	; 0x64
 80015da:	2222      	movs	r2, #34	; 0x22
 80015dc:	4912      	ldr	r1, [pc, #72]	; (8001628 <ESP_Server_Init+0xf0>)
 80015de:	480c      	ldr	r0, [pc, #48]	; (8001610 <ESP_Server_Init+0xd8>)
 80015e0:	f003 f9bd 	bl	800495e <HAL_UART_Transmit>
	HAL_UART_Transmit(pc_uart, "Connected to WiFi\r\n", strlen( "Connected to WiFi\r\n"), 100);
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	2213      	movs	r2, #19
 80015e8:	4910      	ldr	r1, [pc, #64]	; (800162c <ESP_Server_Init+0xf4>)
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <ESP_Server_Init+0xd0>)
 80015ec:	f003 f9b7 	bl	800495e <HAL_UART_Transmit>
	HAL_Delay(2000);
 80015f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015f4:	f001 f91c 	bl	8002830 <HAL_Delay>
//	HAL_UART_Transmit(pc_uart, buffer, 1000, 1000);
//	ESP_Clear_Buffer();
//	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CIFSR\r\n", strlen("AT+CIFSR\r\n"), 100);
//	HAL_Delay(2000);
	resetTime = 3;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <ESP_Server_Init+0xf8>)
 80015fa:	2203      	movs	r2, #3
 80015fc:	601a      	str	r2, [r3, #0]
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	08006d08 	.word	0x08006d08
 8001608:	20000998 	.word	0x20000998
 800160c:	08006d10 	.word	0x08006d10
 8001610:	200000ac 	.word	0x200000ac
 8001614:	08006d1c 	.word	0x08006d1c
 8001618:	08006d2c 	.word	0x08006d2c
 800161c:	08006d3c 	.word	0x08006d3c
 8001620:	08006d4c 	.word	0x08006d4c
 8001624:	20000180 	.word	0x20000180
 8001628:	08006d60 	.word	0x08006d60
 800162c:	08006d84 	.word	0x08006d84
 8001630:	20000000 	.word	0x20000000

08001634 <ESP_Clear_Buffer>:

void ESP_Clear_Buffer()
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	memset(buffer, 0, 2000);
 8001638:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800163c:	2100      	movs	r1, #0
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <ESP_Clear_Buffer+0x1c>)
 8001640:	f004 f974 	bl	800592c <memset>
	buffer_index = 0;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <ESP_Clear_Buffer+0x20>)
 8001646:	2200      	movs	r2, #0
 8001648:	801a      	strh	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000180 	.word	0x20000180
 8001654:	20000090 	.word	0x20000090

08001658 <string_compare>:
//	if(percent > 100.0f)
//		percent = 100.0f;
//}

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	4613      	mov	r3, r2
 8001664:	80fb      	strh	r3, [r7, #6]
	 uint16_t comVAR=0, i;
 8001666:	2300      	movs	r3, #0
 8001668:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 800166a:	2300      	movs	r3, #0
 800166c:	82bb      	strh	r3, [r7, #20]
 800166e:	e012      	b.n	8001696 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8001670:	8abb      	ldrh	r3, [r7, #20]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	781a      	ldrb	r2, [r3, #0]
 8001678:	8abb      	ldrh	r3, [r7, #20]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	440b      	add	r3, r1
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d103      	bne.n	800168c <string_compare+0x34>
	   	  		  comVAR++;
 8001684:	8afb      	ldrh	r3, [r7, #22]
 8001686:	3301      	adds	r3, #1
 8001688:	82fb      	strh	r3, [r7, #22]
 800168a:	e001      	b.n	8001690 <string_compare+0x38>
	   	  	  else comVAR=0;
 800168c:	2300      	movs	r3, #0
 800168e:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 8001690:	8abb      	ldrh	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	82bb      	strh	r3, [r7, #20]
 8001696:	8aba      	ldrh	r2, [r7, #20]
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3e8      	bcc.n	8001670 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 800169e:	8afa      	ldrh	r2, [r7, #22]
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d101      	bne.n	80016aa <string_compare+0x52>
		 	return 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <string_compare+0x54>
	 else 	return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <string_contains>:

int string_contains(char bufferArray[], char searchedString[], uint16_t length)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	4613      	mov	r3, r2
 80016c4:	80fb      	strh	r3, [r7, #6]
	uint8_t result=0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	757b      	strb	r3, [r7, #21]
	for(uint16_t i=0; i<length; i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	82fb      	strh	r3, [r7, #22]
 80016ce:	e016      	b.n	80016fe <string_contains+0x46>
	{
		result = string_compare(&bufferArray[i], &searchedString[0], strlen(searchedString));
 80016d0:	8afb      	ldrh	r3, [r7, #22]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	18d4      	adds	r4, r2, r3
 80016d6:	68b8      	ldr	r0, [r7, #8]
 80016d8:	f7fe fd7a 	bl	80001d0 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff ffb7 	bl	8001658 <string_compare>
 80016ea:	4603      	mov	r3, r0
 80016ec:	757b      	strb	r3, [r7, #21]
		if(result == 1)
 80016ee:	7d7b      	ldrb	r3, [r7, #21]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <string_contains+0x40>
			return i;
 80016f4:	8afb      	ldrh	r3, [r7, #22]
 80016f6:	e008      	b.n	800170a <string_contains+0x52>
	for(uint16_t i=0; i<length; i++)
 80016f8:	8afb      	ldrh	r3, [r7, #22]
 80016fa:	3301      	adds	r3, #1
 80016fc:	82fb      	strh	r3, [r7, #22]
 80016fe:	8afa      	ldrh	r2, [r7, #22]
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	429a      	cmp	r2, r3
 8001704:	d3e4      	bcc.n	80016d0 <string_contains+0x18>
	}
	return -1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170a:	4618      	mov	r0, r3
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
	...

08001714 <getLink>:

int getLink(int position)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	while (buffer[position] != ',' && position != 0) position--;
 800171c:	e002      	b.n	8001724 <getLink+0x10>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3b01      	subs	r3, #1
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <getLink+0x44>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b2c      	cmp	r3, #44	; 0x2c
 800172e:	d002      	beq.n	8001736 <getLink+0x22>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f3      	bne.n	800171e <getLink+0xa>
	if (position != 0)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <getLink+0x34>
		return (int) buffer[position-1] -48;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <getLink+0x44>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	3b30      	subs	r3, #48	; 0x30
 8001746:	e000      	b.n	800174a <getLink+0x36>
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000180 	.word	0x20000180

0800175c <messageHandler>:

void messageHandler()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
	__HAL_UART_DISABLE_IT(wifi_uart, UART_IT_RXNE);
 8001762:	4bb9      	ldr	r3, [pc, #740]	; (8001a48 <messageHandler+0x2ec>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	4bb7      	ldr	r3, [pc, #732]	; (8001a48 <messageHandler+0x2ec>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0220 	bic.w	r2, r2, #32
 8001770:	60da      	str	r2, [r3, #12]
	int position = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
	handle = 1;
 8001776:	4bb5      	ldr	r3, [pc, #724]	; (8001a4c <messageHandler+0x2f0>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

	if((position = string_contains((char*)buffer, "GET", buffer_index)) != -1)
 800177c:	4bb4      	ldr	r3, [pc, #720]	; (8001a50 <messageHandler+0x2f4>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	49b4      	ldr	r1, [pc, #720]	; (8001a54 <messageHandler+0x2f8>)
 8001784:	48b4      	ldr	r0, [pc, #720]	; (8001a58 <messageHandler+0x2fc>)
 8001786:	f7ff ff97 	bl	80016b8 <string_contains>
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001792:	d007      	beq.n	80017a4 <messageHandler+0x48>
	{
		int link = getLink(position);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffbd 	bl	8001714 <getLink>
 800179a:	6038      	str	r0, [r7, #0]
		sendData(link);
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f000 f9e3 	bl	8001b68 <sendData>
 80017a2:	e1bb      	b.n	8001b1c <messageHandler+0x3c0>
//		if (string_contains((char*)buffer, "/ledon", buffer_index) != -1)
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//		else if (string_contains((char*)buffer, "/ledoff", buffer_index) != -1)
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	}
	else if((position = string_contains((char*)buffer, "SPACE", buffer_index))!= -1)
 80017a4:	4baa      	ldr	r3, [pc, #680]	; (8001a50 <messageHandler+0x2f4>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	49ac      	ldr	r1, [pc, #688]	; (8001a5c <messageHandler+0x300>)
 80017ac:	48aa      	ldr	r0, [pc, #680]	; (8001a58 <messageHandler+0x2fc>)
 80017ae:	f7ff ff83 	bl	80016b8 <string_contains>
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ba:	d01c      	beq.n	80017f6 <messageHandler+0x9a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c2:	48a7      	ldr	r0, [pc, #668]	; (8001a60 <messageHandler+0x304>)
 80017c4:	f001 ff64 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ce:	48a4      	ldr	r0, [pc, #656]	; (8001a60 <messageHandler+0x304>)
 80017d0:	f001 ff5e 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017da:	48a1      	ldr	r0, [pc, #644]	; (8001a60 <messageHandler+0x304>)
 80017dc:	f001 ff58 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e6:	489e      	ldr	r0, [pc, #632]	; (8001a60 <messageHandler+0x304>)
 80017e8:	f001 ff52 	bl	8003690 <HAL_GPIO_WritePin>
		controlArm();
 80017ec:	f000 fa3a 	bl	8001c64 <controlArm>
		resetServos();
 80017f0:	f000 fb96 	bl	8001f20 <resetServos>
 80017f4:	e192      	b.n	8001b1c <messageHandler+0x3c0>
	}
	else if((position = string_contains((char*)buffer, "F-", buffer_index)) != -1)
 80017f6:	4b96      	ldr	r3, [pc, #600]	; (8001a50 <messageHandler+0x2f4>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4999      	ldr	r1, [pc, #612]	; (8001a64 <messageHandler+0x308>)
 80017fe:	4896      	ldr	r0, [pc, #600]	; (8001a58 <messageHandler+0x2fc>)
 8001800:	f7ff ff5a 	bl	80016b8 <string_contains>
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d018      	beq.n	8001840 <messageHandler+0xe4>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001814:	4892      	ldr	r0, [pc, #584]	; (8001a60 <messageHandler+0x304>)
 8001816:	f001 ff3b 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001820:	488f      	ldr	r0, [pc, #572]	; (8001a60 <messageHandler+0x304>)
 8001822:	f001 ff35 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182c:	488c      	ldr	r0, [pc, #560]	; (8001a60 <messageHandler+0x304>)
 800182e:	f001 ff2f 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001838:	4889      	ldr	r0, [pc, #548]	; (8001a60 <messageHandler+0x304>)
 800183a:	f001 ff29 	bl	8003690 <HAL_GPIO_WritePin>
 800183e:	e16d      	b.n	8001b1c <messageHandler+0x3c0>
	}else if((position = string_contains((char*)buffer, "B-", buffer_index)) != -1)
 8001840:	4b83      	ldr	r3, [pc, #524]	; (8001a50 <messageHandler+0x2f4>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4988      	ldr	r1, [pc, #544]	; (8001a68 <messageHandler+0x30c>)
 8001848:	4883      	ldr	r0, [pc, #524]	; (8001a58 <messageHandler+0x2fc>)
 800184a:	f7ff ff35 	bl	80016b8 <string_contains>
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001856:	d018      	beq.n	800188a <messageHandler+0x12e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800185e:	4880      	ldr	r0, [pc, #512]	; (8001a60 <messageHandler+0x304>)
 8001860:	f001 ff16 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800186a:	487d      	ldr	r0, [pc, #500]	; (8001a60 <messageHandler+0x304>)
 800186c:	f001 ff10 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001876:	487a      	ldr	r0, [pc, #488]	; (8001a60 <messageHandler+0x304>)
 8001878:	f001 ff0a 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001882:	4877      	ldr	r0, [pc, #476]	; (8001a60 <messageHandler+0x304>)
 8001884:	f001 ff04 	bl	8003690 <HAL_GPIO_WritePin>
 8001888:	e148      	b.n	8001b1c <messageHandler+0x3c0>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 1);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "-R", buffer_index)) != -1)
 800188a:	4b71      	ldr	r3, [pc, #452]	; (8001a50 <messageHandler+0x2f4>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	4976      	ldr	r1, [pc, #472]	; (8001a6c <messageHandler+0x310>)
 8001892:	4871      	ldr	r0, [pc, #452]	; (8001a58 <messageHandler+0x2fc>)
 8001894:	f7ff ff10 	bl	80016b8 <string_contains>
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d018      	beq.n	80018d4 <messageHandler+0x178>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a8:	486d      	ldr	r0, [pc, #436]	; (8001a60 <messageHandler+0x304>)
 80018aa:	f001 fef1 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b4:	486a      	ldr	r0, [pc, #424]	; (8001a60 <messageHandler+0x304>)
 80018b6:	f001 feeb 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c0:	4867      	ldr	r0, [pc, #412]	; (8001a60 <messageHandler+0x304>)
 80018c2:	f001 fee5 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018cc:	4864      	ldr	r0, [pc, #400]	; (8001a60 <messageHandler+0x304>)
 80018ce:	f001 fedf 	bl	8003690 <HAL_GPIO_WritePin>
 80018d2:	e123      	b.n	8001b1c <messageHandler+0x3c0>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 1);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "-L", buffer_index)) != -1)
 80018d4:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <messageHandler+0x2f4>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4965      	ldr	r1, [pc, #404]	; (8001a70 <messageHandler+0x314>)
 80018dc:	485e      	ldr	r0, [pc, #376]	; (8001a58 <messageHandler+0x2fc>)
 80018de:	f7ff feeb 	bl	80016b8 <string_contains>
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ea:	d018      	beq.n	800191e <messageHandler+0x1c2>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f2:	485b      	ldr	r0, [pc, #364]	; (8001a60 <messageHandler+0x304>)
 80018f4:	f001 fecc 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fe:	4858      	ldr	r0, [pc, #352]	; (8001a60 <messageHandler+0x304>)
 8001900:	f001 fec6 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190a:	4855      	ldr	r0, [pc, #340]	; (8001a60 <messageHandler+0x304>)
 800190c:	f001 fec0 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001916:	4852      	ldr	r0, [pc, #328]	; (8001a60 <messageHandler+0x304>)
 8001918:	f001 feba 	bl	8003690 <HAL_GPIO_WritePin>
 800191c:	e0fe      	b.n	8001b1c <messageHandler+0x3c0>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 1);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "FR", buffer_index)) != -1)
 800191e:	4b4c      	ldr	r3, [pc, #304]	; (8001a50 <messageHandler+0x2f4>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	4953      	ldr	r1, [pc, #332]	; (8001a74 <messageHandler+0x318>)
 8001926:	484c      	ldr	r0, [pc, #304]	; (8001a58 <messageHandler+0x2fc>)
 8001928:	f7ff fec6 	bl	80016b8 <string_contains>
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d018      	beq.n	8001968 <messageHandler+0x20c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800193c:	4848      	ldr	r0, [pc, #288]	; (8001a60 <messageHandler+0x304>)
 800193e:	f001 fea7 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001948:	4845      	ldr	r0, [pc, #276]	; (8001a60 <messageHandler+0x304>)
 800194a:	f001 fea1 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001954:	4842      	ldr	r0, [pc, #264]	; (8001a60 <messageHandler+0x304>)
 8001956:	f001 fe9b 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001960:	483f      	ldr	r0, [pc, #252]	; (8001a60 <messageHandler+0x304>)
 8001962:	f001 fe95 	bl	8003690 <HAL_GPIO_WritePin>
 8001966:	e0d9      	b.n	8001b1c <messageHandler+0x3c0>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 1);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "FL", buffer_index)) != -1)
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <messageHandler+0x2f4>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4942      	ldr	r1, [pc, #264]	; (8001a78 <messageHandler+0x31c>)
 8001970:	4839      	ldr	r0, [pc, #228]	; (8001a58 <messageHandler+0x2fc>)
 8001972:	f7ff fea1 	bl	80016b8 <string_contains>
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197e:	d018      	beq.n	80019b2 <messageHandler+0x256>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001986:	4836      	ldr	r0, [pc, #216]	; (8001a60 <messageHandler+0x304>)
 8001988:	f001 fe82 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001992:	4833      	ldr	r0, [pc, #204]	; (8001a60 <messageHandler+0x304>)
 8001994:	f001 fe7c 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800199e:	4830      	ldr	r0, [pc, #192]	; (8001a60 <messageHandler+0x304>)
 80019a0:	f001 fe76 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019aa:	482d      	ldr	r0, [pc, #180]	; (8001a60 <messageHandler+0x304>)
 80019ac:	f001 fe70 	bl	8003690 <HAL_GPIO_WritePin>
 80019b0:	e0b4      	b.n	8001b1c <messageHandler+0x3c0>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 1);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "BR", buffer_index)) != -1)
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <messageHandler+0x2f4>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4930      	ldr	r1, [pc, #192]	; (8001a7c <messageHandler+0x320>)
 80019ba:	4827      	ldr	r0, [pc, #156]	; (8001a58 <messageHandler+0x2fc>)
 80019bc:	f7ff fe7c 	bl	80016b8 <string_contains>
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c8:	d018      	beq.n	80019fc <messageHandler+0x2a0>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d0:	4823      	ldr	r0, [pc, #140]	; (8001a60 <messageHandler+0x304>)
 80019d2:	f001 fe5d 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019dc:	4820      	ldr	r0, [pc, #128]	; (8001a60 <messageHandler+0x304>)
 80019de:	f001 fe57 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e8:	481d      	ldr	r0, [pc, #116]	; (8001a60 <messageHandler+0x304>)
 80019ea:	f001 fe51 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f4:	481a      	ldr	r0, [pc, #104]	; (8001a60 <messageHandler+0x304>)
 80019f6:	f001 fe4b 	bl	8003690 <HAL_GPIO_WritePin>
 80019fa:	e08f      	b.n	8001b1c <messageHandler+0x3c0>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 1);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 1);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "BL", buffer_index)) != -1)
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <messageHandler+0x2f4>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	491f      	ldr	r1, [pc, #124]	; (8001a80 <messageHandler+0x324>)
 8001a04:	4814      	ldr	r0, [pc, #80]	; (8001a58 <messageHandler+0x2fc>)
 8001a06:	f7ff fe57 	bl	80016b8 <string_contains>
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a12:	d037      	beq.n	8001a84 <messageHandler+0x328>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1a:	4811      	ldr	r0, [pc, #68]	; (8001a60 <messageHandler+0x304>)
 8001a1c:	f001 fe38 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a26:	480e      	ldr	r0, [pc, #56]	; (8001a60 <messageHandler+0x304>)
 8001a28:	f001 fe32 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a32:	480b      	ldr	r0, [pc, #44]	; (8001a60 <messageHandler+0x304>)
 8001a34:	f001 fe2c 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a3e:	4808      	ldr	r0, [pc, #32]	; (8001a60 <messageHandler+0x304>)
 8001a40:	f001 fe26 	bl	8003690 <HAL_GPIO_WritePin>
 8001a44:	e06a      	b.n	8001b1c <messageHandler+0x3c0>
 8001a46:	bf00      	nop
 8001a48:	200000ac 	.word	0x200000ac
 8001a4c:	2000009c 	.word	0x2000009c
 8001a50:	20000090 	.word	0x20000090
 8001a54:	08006d98 	.word	0x08006d98
 8001a58:	20000180 	.word	0x20000180
 8001a5c:	08006d9c 	.word	0x08006d9c
 8001a60:	40020c00 	.word	0x40020c00
 8001a64:	08006da4 	.word	0x08006da4
 8001a68:	08006da8 	.word	0x08006da8
 8001a6c:	08006dac 	.word	0x08006dac
 8001a70:	08006db0 	.word	0x08006db0
 8001a74:	08006db4 	.word	0x08006db4
 8001a78:	08006db8 	.word	0x08006db8
 8001a7c:	08006dbc 	.word	0x08006dbc
 8001a80:	08006dc0 	.word	0x08006dc0
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 1);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 1);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if((position = string_contains((char*)buffer, "--", buffer_index)) != -1)
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <messageHandler+0x3e4>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	492e      	ldr	r1, [pc, #184]	; (8001b44 <messageHandler+0x3e8>)
 8001a8c:	482e      	ldr	r0, [pc, #184]	; (8001b48 <messageHandler+0x3ec>)
 8001a8e:	f7ff fe13 	bl	80016b8 <string_contains>
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9a:	d018      	beq.n	8001ace <messageHandler+0x372>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa2:	482a      	ldr	r0, [pc, #168]	; (8001b4c <messageHandler+0x3f0>)
 8001aa4:	f001 fdf4 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aae:	4827      	ldr	r0, [pc, #156]	; (8001b4c <messageHandler+0x3f0>)
 8001ab0:	f001 fdee 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aba:	4824      	ldr	r0, [pc, #144]	; (8001b4c <messageHandler+0x3f0>)
 8001abc:	f001 fde8 	bl	8003690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac6:	4821      	ldr	r0, [pc, #132]	; (8001b4c <messageHandler+0x3f0>)
 8001ac8:	f001 fde2 	bl	8003690 <HAL_GPIO_WritePin>
 8001acc:	e026      	b.n	8001b1c <messageHandler+0x3c0>
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 0);
//		HAL_GPIO_WritePin(Steering_A_GPIO_Port, Steering_A_Pin, 0);
//		HAL_GPIO_WritePin(Steering_B_GPIO_Port, Steering_B_Pin, 0);
//		if(buffer[position+2] == 'T')
//			drivingAssistance();
	}else if(string_contains((char*)buffer, "+CWJAP:", buffer_index) != -1
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <messageHandler+0x3e4>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	491e      	ldr	r1, [pc, #120]	; (8001b50 <messageHandler+0x3f4>)
 8001ad6:	481c      	ldr	r0, [pc, #112]	; (8001b48 <messageHandler+0x3ec>)
 8001ad8:	f7ff fdee 	bl	80016b8 <string_contains>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae2:	d01b      	beq.n	8001b1c <messageHandler+0x3c0>
			&& (string_contains((char*)buffer, "FAIL", buffer_index) != -1
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <messageHandler+0x3e4>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	491a      	ldr	r1, [pc, #104]	; (8001b54 <messageHandler+0x3f8>)
 8001aec:	4816      	ldr	r0, [pc, #88]	; (8001b48 <messageHandler+0x3ec>)
 8001aee:	f7ff fde3 	bl	80016b8 <string_contains>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d10a      	bne.n	8001b10 <messageHandler+0x3b4>
			|| string_contains((char*)buffer, "DISCONNECT", buffer_index) != -1))
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <messageHandler+0x3e4>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	4915      	ldr	r1, [pc, #84]	; (8001b58 <messageHandler+0x3fc>)
 8001b02:	4811      	ldr	r0, [pc, #68]	; (8001b48 <messageHandler+0x3ec>)
 8001b04:	f7ff fdd8 	bl	80016b8 <string_contains>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0e:	d005      	beq.n	8001b1c <messageHandler+0x3c0>
	{
		//Change your WiFi SSID credentials below
		HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWJAP=\"MichelCel\",\"michel123\"\r\n", strlen("AT+CWJAP=\"MichelCel\",\"michel123\"\r\n"), 100);
 8001b10:	2364      	movs	r3, #100	; 0x64
 8001b12:	2222      	movs	r2, #34	; 0x22
 8001b14:	4911      	ldr	r1, [pc, #68]	; (8001b5c <messageHandler+0x400>)
 8001b16:	4812      	ldr	r0, [pc, #72]	; (8001b60 <messageHandler+0x404>)
 8001b18:	f002 ff21 	bl	800495e <HAL_UART_Transmit>
	}
	handle = 0;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <messageHandler+0x408>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
//	HAL_UART_Transmit(pc_uart, buffer, strlen(buffer), 1000);
	ESP_Clear_Buffer();
 8001b22:	f7ff fd87 	bl	8001634 <ESP_Clear_Buffer>
	__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <messageHandler+0x404>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <messageHandler+0x404>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0220 	orr.w	r2, r2, #32
 8001b34:	60da      	str	r2, [r3, #12]
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000090 	.word	0x20000090
 8001b44:	08006dc4 	.word	0x08006dc4
 8001b48:	20000180 	.word	0x20000180
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	08006dc8 	.word	0x08006dc8
 8001b54:	08006dd0 	.word	0x08006dd0
 8001b58:	08006dd8 	.word	0x08006dd8
 8001b5c:	08006d60 	.word	0x08006d60
 8001b60:	200000ac 	.word	0x200000ac
 8001b64:	2000009c 	.word	0x2000009c

08001b68 <sendData>:

void sendData(int link)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	memset(outputString, 0, 100);
 8001b70:	2264      	movs	r2, #100	; 0x64
 8001b72:	2100      	movs	r1, #0
 8001b74:	4831      	ldr	r0, [pc, #196]	; (8001c3c <sendData+0xd4>)
 8001b76:	f003 fed9 	bl	800592c <memset>
	memset(cipsend, 0, 50);
 8001b7a:	2232      	movs	r2, #50	; 0x32
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4830      	ldr	r0, [pc, #192]	; (8001c40 <sendData+0xd8>)
 8001b80:	f003 fed4 	bl	800592c <memset>
	memset(response, 0, 300);
 8001b84:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b88:	2100      	movs	r1, #0
 8001b8a:	482e      	ldr	r0, [pc, #184]	; (8001c44 <sendData+0xdc>)
 8001b8c:	f003 fece 	bl	800592c <memset>
	memset(cipclose, 0, 14);
 8001b90:	220e      	movs	r2, #14
 8001b92:	2100      	movs	r1, #0
 8001b94:	482c      	ldr	r0, [pc, #176]	; (8001c48 <sendData+0xe0>)
 8001b96:	f003 fec9 	bl	800592c <memset>

	sprintf(outputString, "Battery: %i%%\n", (int)rand() % 100);
 8001b9a:	f003 fecf 	bl	800593c <rand>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <sendData+0xe4>)
 8001ba2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ba6:	1159      	asrs	r1, r3, #5
 8001ba8:	17d3      	asrs	r3, r2, #31
 8001baa:	1acb      	subs	r3, r1, r3
 8001bac:	2164      	movs	r1, #100	; 0x64
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4926      	ldr	r1, [pc, #152]	; (8001c50 <sendData+0xe8>)
 8001bb8:	4820      	ldr	r0, [pc, #128]	; (8001c3c <sendData+0xd4>)
 8001bba:	f003 feff 	bl	80059bc <siprintf>
	sprintf(response, "HTTP/1.1 200 OK\r\nContent-Length: %i\r\nContent-Type: text/plain\r\n\r\n%s", strlen(outputString), outputString);
 8001bbe:	481f      	ldr	r0, [pc, #124]	; (8001c3c <sendData+0xd4>)
 8001bc0:	f7fe fb06 	bl	80001d0 <strlen>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <sendData+0xd4>)
 8001bc8:	4922      	ldr	r1, [pc, #136]	; (8001c54 <sendData+0xec>)
 8001bca:	481e      	ldr	r0, [pc, #120]	; (8001c44 <sendData+0xdc>)
 8001bcc:	f003 fef6 	bl	80059bc <siprintf>
	sprintf(cipsend, "AT+CIPSEND=%d,%i\r\n", link, strlen(response));
 8001bd0:	481c      	ldr	r0, [pc, #112]	; (8001c44 <sendData+0xdc>)
 8001bd2:	f7fe fafd 	bl	80001d0 <strlen>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	491f      	ldr	r1, [pc, #124]	; (8001c58 <sendData+0xf0>)
 8001bdc:	4818      	ldr	r0, [pc, #96]	; (8001c40 <sendData+0xd8>)
 8001bde:	f003 feed 	bl	80059bc <siprintf>
	sprintf(cipclose, "AT+CIPCLOSE=%d\r\n", link);
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	491d      	ldr	r1, [pc, #116]	; (8001c5c <sendData+0xf4>)
 8001be6:	4818      	ldr	r0, [pc, #96]	; (8001c48 <sendData+0xe0>)
 8001be8:	f003 fee8 	bl	80059bc <siprintf>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)cipsend, strlen(cipsend), 100);
 8001bec:	4814      	ldr	r0, [pc, #80]	; (8001c40 <sendData+0xd8>)
 8001bee:	f7fe faef 	bl	80001d0 <strlen>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	2364      	movs	r3, #100	; 0x64
 8001bf8:	4911      	ldr	r1, [pc, #68]	; (8001c40 <sendData+0xd8>)
 8001bfa:	4819      	ldr	r0, [pc, #100]	; (8001c60 <sendData+0xf8>)
 8001bfc:	f002 feaf 	bl	800495e <HAL_UART_Transmit>
	HAL_Delay(50);
 8001c00:	2032      	movs	r0, #50	; 0x32
 8001c02:	f000 fe15 	bl	8002830 <HAL_Delay>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)response, strlen(response), 100);
 8001c06:	480f      	ldr	r0, [pc, #60]	; (8001c44 <sendData+0xdc>)
 8001c08:	f7fe fae2 	bl	80001d0 <strlen>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	490c      	ldr	r1, [pc, #48]	; (8001c44 <sendData+0xdc>)
 8001c14:	4812      	ldr	r0, [pc, #72]	; (8001c60 <sendData+0xf8>)
 8001c16:	f002 fea2 	bl	800495e <HAL_UART_Transmit>
	HAL_Delay(50);
 8001c1a:	2032      	movs	r0, #50	; 0x32
 8001c1c:	f000 fe08 	bl	8002830 <HAL_Delay>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)cipclose, strlen(cipclose), 100);
 8001c20:	4809      	ldr	r0, [pc, #36]	; (8001c48 <sendData+0xe0>)
 8001c22:	f7fe fad5 	bl	80001d0 <strlen>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	2364      	movs	r3, #100	; 0x64
 8001c2c:	4906      	ldr	r1, [pc, #24]	; (8001c48 <sendData+0xe0>)
 8001c2e:	480c      	ldr	r0, [pc, #48]	; (8001c60 <sendData+0xf8>)
 8001c30:	f002 fe95 	bl	800495e <HAL_UART_Transmit>
//	HAL_UART_Transmit(pc_uart, (uint8_t*)outputString, strlen(outputString), 100);
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000b50 	.word	0x20000b50
 8001c40:	20000bb4 	.word	0x20000bb4
 8001c44:	20000a24 	.word	0x20000a24
 8001c48:	20000be8 	.word	0x20000be8
 8001c4c:	51eb851f 	.word	0x51eb851f
 8001c50:	08006de4 	.word	0x08006de4
 8001c54:	08006df4 	.word	0x08006df4
 8001c58:	08006e38 	.word	0x08006e38
 8001c5c:	08006e4c 	.word	0x08006e4c
 8001c60:	200000ac 	.word	0x200000ac

08001c64 <controlArm>:
//		HAL_GPIO_WritePin(Motor_B_GPIO_Port, Motor_B_Pin, 1);
//	}
//}

void controlArm()
{
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	466b      	mov	r3, sp
 8001c6c:	461d      	mov	r5, r3
	uint8_t length = 5;
 8001c6e:	2305      	movs	r3, #5
 8001c70:	74fb      	strb	r3, [r7, #19]
	  uint8_t servos[length];
 8001c72:	7cfc      	ldrb	r4, [r7, #19]
 8001c74:	4623      	mov	r3, r4
 8001c76:	3b01      	subs	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	b2e0      	uxtb	r0, r4
 8001c7c:	f04f 0100 	mov.w	r1, #0
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	00cb      	lsls	r3, r1, #3
 8001c8a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c8e:	00c2      	lsls	r2, r0, #3
 8001c90:	b2e0      	uxtb	r0, r4
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	00cb      	lsls	r3, r1, #3
 8001ca0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ca4:	00c2      	lsls	r2, r0, #3
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	3307      	adds	r3, #7
 8001caa:	08db      	lsrs	r3, r3, #3
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	ebad 0d03 	sub.w	sp, sp, r3
 8001cb2:	466b      	mov	r3, sp
 8001cb4:	3300      	adds	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
	  uint32_t angles[length];
 8001cb8:	7cfc      	ldrb	r4, [r7, #19]
 8001cba:	4623      	mov	r3, r4
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	b2e0      	uxtb	r0, r4
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	014b      	lsls	r3, r1, #5
 8001cd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cd4:	0142      	lsls	r2, r0, #5
 8001cd6:	b2e0      	uxtb	r0, r4
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	014b      	lsls	r3, r1, #5
 8001ce6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cea:	0142      	lsls	r2, r0, #5
 8001cec:	4623      	mov	r3, r4
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	3307      	adds	r3, #7
 8001cf2:	08db      	lsrs	r3, r3, #3
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	ebad 0d03 	sub.w	sp, sp, r3
 8001cfa:	466b      	mov	r3, sp
 8001cfc:	3303      	adds	r3, #3
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	603b      	str	r3, [r7, #0]
	  for (int i = 0; i < length; i++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	e011      	b.n	8001d2e <controlArm+0xca>
	  {
		  servos[i] = i + 2;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	3302      	adds	r3, #2
 8001d10:	b2d9      	uxtb	r1, r3
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	460a      	mov	r2, r1
 8001d1a:	701a      	strb	r2, [r3, #0]
		  angles[i] = 1500;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for (int i = 0; i < length; i++)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	7cfb      	ldrb	r3, [r7, #19]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	dbe9      	blt.n	8001d0a <controlArm+0xa6>
	  }

	  moveServos(servos, angles, length);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	6839      	ldr	r1, [r7, #0]
 8001d3a:	7cfa      	ldrb	r2, [r7, #19]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 f853 	bl	8001de8 <moveServos>
	  // Claw pivot servo - doesn't ever need to change
	  angles[0] = 1500;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d48:	601a      	str	r2, [r3, #0]

	  //Top arm servo -
	  angles[1] = 1000;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d50:	605a      	str	r2, [r3, #4]
	  //600 down straight
	  //1500 right angle

	  // Mid-arm servo
	  angles[2] = 400;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d58:	609a      	str	r2, [r3, #8]
	  // 400 forwards down

	  // Base servo
	  angles[3] = 2200;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f640 0298 	movw	r2, #2200	; 0x898
 8001d60:	60da      	str	r2, [r3, #12]
	  //800 backwards down

	  // Claw
	  // 1500 open completely
	  // 2500 closed with contact
	  angles[4] = 1500;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d68:	611a      	str	r2, [r3, #16]
	  /* USER CODE END 2 */

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  moveServos(servos, angles, length);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	7cfa      	ldrb	r2, [r7, #19]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f839 	bl	8001de8 <moveServos>

	  //Grab the object
	  angles[4] = 2000;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d7c:	611a      	str	r2, [r3, #16]
	  moveServos(servos, angles, length);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	7cfa      	ldrb	r2, [r7, #19]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f82f 	bl	8001de8 <moveServos>

	  //Move the arm backwards
	  angles[3] = 1500;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d90:	60da      	str	r2, [r3, #12]
	  moveServos(servos, angles, length);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	6839      	ldr	r1, [r7, #0]
 8001d96:	7cfa      	ldrb	r2, [r7, #19]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 f825 	bl	8001de8 <moveServos>
	  angles[1] = 1500;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001da4:	605a      	str	r2, [r3, #4]
	  angles[2] = 1500;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001dac:	609a      	str	r2, [r3, #8]
	  angles[3] = 1500;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001db4:	60da      	str	r2, [r3, #12]
	  angles[4] = 2000;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dbc:	611a      	str	r2, [r3, #16]
	  moveServos(servos, angles, length);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	6839      	ldr	r1, [r7, #0]
 8001dc2:	7cfa      	ldrb	r2, [r7, #19]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f80f 	bl	8001de8 <moveServos>

	  //Drop the item
	  angles[4] = 1500;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001dd0:	611a      	str	r2, [r3, #16]
	  moveServos(servos, angles, length);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	6839      	ldr	r1, [r7, #0]
 8001dd6:	7cfa      	ldrb	r2, [r7, #19]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f805 	bl	8001de8 <moveServos>
 8001dde:	46ad      	mov	sp, r5
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdb0      	pop	{r4, r5, r7, pc}

08001de8 <moveServos>:

void moveServos(uint8_t* servos, uint32_t* angles, uint8_t length)
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	4613      	mov	r3, r2
 8001df4:	71fb      	strb	r3, [r7, #7]
 8001df6:	466b      	mov	r3, sp
 8001df8:	461d      	mov	r5, r3
	uint16_t time = 1000; //default time because why not
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	837b      	strh	r3, [r7, #26]

	uint8_t data[7 + (length * 3)];
 8001e00:	79fa      	ldrb	r2, [r7, #7]
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	1ddc      	adds	r4, r3, #7
 8001e0a:	1e63      	subs	r3, r4, #1
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	4623      	mov	r3, r4
 8001e10:	4618      	mov	r0, r3
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	00cb      	lsls	r3, r1, #3
 8001e20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e24:	00c2      	lsls	r2, r0, #3
 8001e26:	4623      	mov	r3, r4
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f04f 0100 	mov.w	r1, #0
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	00cb      	lsls	r3, r1, #3
 8001e38:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e3c:	00c2      	lsls	r2, r0, #3
 8001e3e:	4623      	mov	r3, r4
 8001e40:	3307      	adds	r3, #7
 8001e42:	08db      	lsrs	r3, r3, #3
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	ebad 0d03 	sub.w	sp, sp, r3
 8001e4a:	466b      	mov	r3, sp
 8001e4c:	3300      	adds	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
	data[0] = 0x55; //header 1
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2255      	movs	r2, #85	; 0x55
 8001e54:	701a      	strb	r2, [r3, #0]
	data[1] = 0x55; //header 2
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2255      	movs	r2, #85	; 0x55
 8001e5a:	705a      	strb	r2, [r3, #1]
	data[2] = 0x05 + (length * 3); //length
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	0052      	lsls	r2, r2, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3305      	adds	r3, #5
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	709a      	strb	r2, [r3, #2]
	data[3] = 0x03; //cmd
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2203      	movs	r2, #3
 8001e72:	70da      	strb	r2, [r3, #3]
	data[4] = length; //# servos
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	79fa      	ldrb	r2, [r7, #7]
 8001e78:	711a      	strb	r2, [r3, #4]
	data[5] = GET_LOW_BYTE(time); //lower 8 time
 8001e7a:	8b7b      	ldrh	r3, [r7, #26]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	715a      	strb	r2, [r3, #5]
	data[6] = GET_HIGH_BYTE(time); //upper 8 time
 8001e82:	8b7b      	ldrh	r3, [r7, #26]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < length; i++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e028      	b.n	8001ee6 <moveServos+0xfe>
	{
		data[7 + (i * 3)] = servos[i];
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	18d1      	adds	r1, r2, r3
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3307      	adds	r3, #7
 8001ea4:	7809      	ldrb	r1, [r1, #0]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	54d1      	strb	r1, [r2, r3]
		data[8 + (i * 3)] = GET_LOW_BYTE(angles[i]);
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	6819      	ldr	r1, [r3, #0]
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	3308      	adds	r3, #8
 8001ebe:	b2c9      	uxtb	r1, r1
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	54d1      	strb	r1, [r2, r3]
		data[9 + (i * 3)] = GET_HIGH_BYTE(angles[i]);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	4413      	add	r3, r2
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0a19      	lsrs	r1, r3, #8
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3309      	adds	r3, #9
 8001eda:	b2c9      	uxtb	r1, r1
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < length; i++)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbd2      	blt.n	8001e94 <moveServos+0xac>
	}
	HAL_UART_Transmit(servos_uart, data, 7 + (length * 3), time + 250);
 8001eee:	6939      	ldr	r1, [r7, #16]
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	0052      	lsls	r2, r2, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3307      	adds	r3, #7
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	8b7b      	ldrh	r3, [r7, #26]
 8001f02:	33fa      	adds	r3, #250	; 0xfa
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <moveServos+0x134>)
 8001f06:	f002 fd2a 	bl	800495e <HAL_UART_Transmit>
	HAL_Delay(3000);
 8001f0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f0e:	f000 fc8f 	bl	8002830 <HAL_Delay>
 8001f12:	46ad      	mov	sp, r5
}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1c:	20000950 	.word	0x20000950

08001f20 <resetServos>:

void resetServos()
{
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	466b      	mov	r3, sp
 8001f28:	461d      	mov	r5, r3
	uint8_t length = 5;
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	74fb      	strb	r3, [r7, #19]
	uint8_t servos[length];
 8001f2e:	7cfc      	ldrb	r4, [r7, #19]
 8001f30:	4623      	mov	r3, r4
 8001f32:	3b01      	subs	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	b2e0      	uxtb	r0, r4
 8001f38:	f04f 0100 	mov.w	r1, #0
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	00cb      	lsls	r3, r1, #3
 8001f46:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f4a:	00c2      	lsls	r2, r0, #3
 8001f4c:	b2e0      	uxtb	r0, r4
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	00cb      	lsls	r3, r1, #3
 8001f5c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f60:	00c2      	lsls	r2, r0, #3
 8001f62:	4623      	mov	r3, r4
 8001f64:	3307      	adds	r3, #7
 8001f66:	08db      	lsrs	r3, r3, #3
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	ebad 0d03 	sub.w	sp, sp, r3
 8001f6e:	466b      	mov	r3, sp
 8001f70:	3300      	adds	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
	uint32_t angles[length];
 8001f74:	7cfc      	ldrb	r4, [r7, #19]
 8001f76:	4623      	mov	r3, r4
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	b2e0      	uxtb	r0, r4
 8001f7e:	f04f 0100 	mov.w	r1, #0
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	014b      	lsls	r3, r1, #5
 8001f8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f90:	0142      	lsls	r2, r0, #5
 8001f92:	b2e0      	uxtb	r0, r4
 8001f94:	f04f 0100 	mov.w	r1, #0
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	014b      	lsls	r3, r1, #5
 8001fa2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fa6:	0142      	lsls	r2, r0, #5
 8001fa8:	4623      	mov	r3, r4
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	3307      	adds	r3, #7
 8001fae:	08db      	lsrs	r3, r3, #3
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	ebad 0d03 	sub.w	sp, sp, r3
 8001fb6:	466b      	mov	r3, sp
 8001fb8:	3303      	adds	r3, #3
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < length; i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e011      	b.n	8001fea <resetServos+0xca>
	{
		servos[i] = i + 2;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	3302      	adds	r3, #2
 8001fcc:	b2d9      	uxtb	r1, r3
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
		angles[i] = 1500;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < length; i++)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbe9      	blt.n	8001fc6 <resetServos+0xa6>
	}
//	angles[1] = 600;
	angles[4] = 2000;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ff8:	611a      	str	r2, [r3, #16]
	moveServos(servos, angles, length);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	6839      	ldr	r1, [r7, #0]
 8001ffe:	7cfa      	ldrb	r2, [r7, #19]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fef1 	bl	8001de8 <moveServos>
 8002006:	46ad      	mov	sp, r5
}
 8002008:	bf00      	nop
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <HAL_GetTick>:
  }
  float Vbatt2 = (raw / 4096.0) * 3 * 6;
  return Vbatt2;
}
uint32_t HAL_GetTick(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
//	if(timeout == 1)
//		safeCounter++;
	if(safeCounter > resetTime)
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <HAL_GetTick+0x24>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_GetTick+0x28>)
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	4293      	cmp	r3, r2
 800201e:	d904      	bls.n	800202a <HAL_GetTick+0x1a>
	{
		safeCounter = 0;
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_GetTick+0x24>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
		SysTickDisable();
		HAL_TIM_Base_Stop_IT(&htim4);//58us
		HAL_TIM_Base_Start_IT(&htim3);//20ms
		SysTickEnable();
		__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);*/
		NVIC_SystemReset();
 8002026:	f7ff fa45 	bl	80014b4 <__NVIC_SystemReset>
		return uwTick;
	}
  return uwTick;
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_GetTick+0x2c>)
 800202c:	681b      	ldr	r3, [r3, #0]
}
 800202e:	4618      	mov	r0, r3
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000098 	.word	0x20000098
 8002038:	20000000 	.word	0x20000000
 800203c:	20000c04 	.word	0x20000c04

08002040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_MspInit+0x4c>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_MspInit+0x4c>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_MspInit+0x4c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_MspInit+0x4c>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_MspInit+0x4c>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_MspInit+0x4c>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800207e:	2007      	movs	r0, #7
 8002080:	f001 f896 	bl	80031b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800

08002090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_ADC_MspInit+0x7c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d127      	bne.n	8002102 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_ADC_MspInit+0x80>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4a15      	ldr	r2, [pc, #84]	; (8002110 <HAL_ADC_MspInit+0x80>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_ADC_MspInit+0x80>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_ADC_MspInit+0x80>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <HAL_ADC_MspInit+0x80>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <HAL_ADC_MspInit+0x80>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020ea:	2310      	movs	r3, #16
 80020ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ee:	2303      	movs	r3, #3
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <HAL_ADC_MspInit+0x84>)
 80020fe:	f001 f92b 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002102:	bf00      	nop
 8002104:	3728      	adds	r7, #40	; 0x28
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40012000 	.word	0x40012000
 8002110:	40023800 	.word	0x40023800
 8002114:	40020800 	.word	0x40020800

08002118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_TIM_Base_MspInit+0x80>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d116      	bne.n	8002158 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_TIM_Base_MspInit+0x84>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a1a      	ldr	r2, [pc, #104]	; (800219c <HAL_TIM_Base_MspInit+0x84>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_TIM_Base_MspInit+0x84>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	201d      	movs	r0, #29
 800214c:	f001 f83b 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002150:	201d      	movs	r0, #29
 8002152:	f001 f854 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002156:	e01a      	b.n	800218e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_TIM_Base_MspInit+0x88>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d115      	bne.n	800218e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_TIM_Base_MspInit+0x84>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a0c      	ldr	r2, [pc, #48]	; (800219c <HAL_TIM_Base_MspInit+0x84>)
 800216c:	f043 0320 	orr.w	r3, r3, #32
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_TIM_Base_MspInit+0x84>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	2037      	movs	r0, #55	; 0x37
 8002184:	f001 f81f 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002188:	2037      	movs	r0, #55	; 0x37
 800218a:	f001 f838 	bl	80031fe <HAL_NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40000400 	.word	0x40000400
 800219c:	40023800 	.word	0x40023800
 80021a0:	40001400 	.word	0x40001400

080021a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08e      	sub	sp, #56	; 0x38
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a63      	ldr	r2, [pc, #396]	; (8002350 <HAL_UART_MspInit+0x1ac>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d134      	bne.n	8002230 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
 80021ca:	4b62      	ldr	r3, [pc, #392]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a61      	ldr	r2, [pc, #388]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b5f      	ldr	r3, [pc, #380]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a5a      	ldr	r2, [pc, #360]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b58      	ldr	r3, [pc, #352]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021fe:	230c      	movs	r3, #12
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800220e:	2307      	movs	r3, #7
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002216:	4619      	mov	r1, r3
 8002218:	484f      	ldr	r0, [pc, #316]	; (8002358 <HAL_UART_MspInit+0x1b4>)
 800221a:	f001 f89d 	bl	8003358 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2026      	movs	r0, #38	; 0x26
 8002224:	f000 ffcf 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002228:	2026      	movs	r0, #38	; 0x26
 800222a:	f000 ffe8 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800222e:	e08a      	b.n	8002346 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a49      	ldr	r2, [pc, #292]	; (800235c <HAL_UART_MspInit+0x1b8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d154      	bne.n	80022e4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	4b45      	ldr	r3, [pc, #276]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a44      	ldr	r2, [pc, #272]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a3d      	ldr	r2, [pc, #244]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a36      	ldr	r2, [pc, #216]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800228e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022a0:	2307      	movs	r3, #7
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	482d      	ldr	r0, [pc, #180]	; (8002360 <HAL_UART_MspInit+0x1bc>)
 80022ac:	f001 f854 	bl	8003358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022c2:	2307      	movs	r3, #7
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ca:	4619      	mov	r1, r3
 80022cc:	4825      	ldr	r0, [pc, #148]	; (8002364 <HAL_UART_MspInit+0x1c0>)
 80022ce:	f001 f843 	bl	8003358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	2027      	movs	r0, #39	; 0x27
 80022d8:	f000 ff75 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022dc:	2027      	movs	r0, #39	; 0x27
 80022de:	f000 ff8e 	bl	80031fe <HAL_NVIC_EnableIRQ>
}
 80022e2:	e030      	b.n	8002346 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <HAL_UART_MspInit+0x1c4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d12b      	bne.n	8002346 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 80022f8:	f043 0320 	orr.w	r3, r3, #32
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a10      	ldr	r2, [pc, #64]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <HAL_UART_MspInit+0x1b0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002326:	23c0      	movs	r3, #192	; 0xc0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002336:	2308      	movs	r3, #8
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800233a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233e:	4619      	mov	r1, r3
 8002340:	480a      	ldr	r0, [pc, #40]	; (800236c <HAL_UART_MspInit+0x1c8>)
 8002342:	f001 f809 	bl	8003358 <HAL_GPIO_Init>
}
 8002346:	bf00      	nop
 8002348:	3738      	adds	r7, #56	; 0x38
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40004400 	.word	0x40004400
 8002354:	40023800 	.word	0x40023800
 8002358:	40020000 	.word	0x40020000
 800235c:	40004800 	.word	0x40004800
 8002360:	40020400 	.word	0x40020400
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40011400 	.word	0x40011400
 800236c:	40020800 	.word	0x40020800

08002370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <NMI_Handler+0x4>

08002376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237a:	e7fe      	b.n	800237a <HardFault_Handler+0x4>

0800237c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <MemManage_Handler+0x4>

08002382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002386:	e7fe      	b.n	8002386 <BusFault_Handler+0x4>

08002388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800238c:	e7fe      	b.n	800238c <UsageFault_Handler+0x4>

0800238e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023bc:	f000 fa24 	bl	8002808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
//		if(netTimeout > 50)
//		{	//STOP MOTORS
////			stopMotors();
//			__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
//		}
		if (!handle)
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <TIM3_IRQHandler+0x20>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <TIM3_IRQHandler+0x16>
			safeCounter += 1;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <TIM3_IRQHandler+0x24>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <TIM3_IRQHandler+0x24>)
 80023d8:	6013      	str	r3, [r2, #0]
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, value1);
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, value1);
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, value1);
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, value1);
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023da:	4804      	ldr	r0, [pc, #16]	; (80023ec <TIM3_IRQHandler+0x28>)
 80023dc:	f001 fea6 	bl	800412c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2000009c 	.word	0x2000009c
 80023e8:	20000098 	.word	0x20000098
 80023ec:	200000f0 	.word	0x200000f0

080023f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <USART2_IRQHandler+0x10>)
 80023f6:	f002 fbe7 	bl	8004bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000998 	.word	0x20000998

08002404 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
		timeout = 1;
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <USART3_IRQHandler+0x94>)
 800240a:	2201      	movs	r2, #1
 800240c:	801a      	strh	r2, [r3, #0]
	  	safeCounter = 0;
 800240e:	4b23      	ldr	r3, [pc, #140]	; (800249c <USART3_IRQHandler+0x98>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

	  	if(buffer_index < 2000)
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <USART3_IRQHandler+0x9c>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800241c:	d20e      	bcs.n	800243c <USART3_IRQHandler+0x38>
	  	{
	  		HAL_UART_Receive(wifi_uart, &buffer[buffer_index++], 1, 10);
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <USART3_IRQHandler+0x9c>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	b291      	uxth	r1, r2
 8002426:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <USART3_IRQHandler+0x9c>)
 8002428:	8011      	strh	r1, [r2, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <USART3_IRQHandler+0xa0>)
 800242e:	18d1      	adds	r1, r2, r3
 8002430:	230a      	movs	r3, #10
 8002432:	2201      	movs	r2, #1
 8002434:	481c      	ldr	r0, [pc, #112]	; (80024a8 <USART3_IRQHandler+0xa4>)
 8002436:	f002 fb24 	bl	8004a82 <HAL_UART_Receive>
 800243a:	e005      	b.n	8002448 <USART3_IRQHandler+0x44>
	  		huart1.RxXferCount = 0;
	  		huart1.RxState = HAL_UART_STATE_READY;*/
	  	}
	  	else
	  	{
	  		HAL_UART_Receive(wifi_uart, &buffer[1999], 1, 10);
 800243c:	230a      	movs	r3, #10
 800243e:	2201      	movs	r2, #1
 8002440:	491a      	ldr	r1, [pc, #104]	; (80024ac <USART3_IRQHandler+0xa8>)
 8002442:	4819      	ldr	r0, [pc, #100]	; (80024a8 <USART3_IRQHandler+0xa4>)
 8002444:	f002 fb1d 	bl	8004a82 <HAL_UART_Receive>
	  		buffer[1999] = huart1.Instance->DR;
	  		huart1.RxXferCount = 0;
	  		huart1.RxState = HAL_UART_STATE_READY;*/
	  	}

	  	if(buffer_index > 5)
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <USART3_IRQHandler+0x9c>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d91e      	bls.n	800248e <USART3_IRQHandler+0x8a>
	  	{
	  		if(buffer[buffer_index-4] == '\r' && buffer[buffer_index-3] == '\n' && buffer[buffer_index-2] == '\r' && buffer[buffer_index-1] == '\n')
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <USART3_IRQHandler+0x9c>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	3b04      	subs	r3, #4
 8002456:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <USART3_IRQHandler+0xa0>)
 8002458:	5cd3      	ldrb	r3, [r2, r3]
 800245a:	2b0d      	cmp	r3, #13
 800245c:	d117      	bne.n	800248e <USART3_IRQHandler+0x8a>
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <USART3_IRQHandler+0x9c>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	3b03      	subs	r3, #3
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <USART3_IRQHandler+0xa0>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	2b0a      	cmp	r3, #10
 800246a:	d110      	bne.n	800248e <USART3_IRQHandler+0x8a>
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <USART3_IRQHandler+0x9c>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	3b02      	subs	r3, #2
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <USART3_IRQHandler+0xa0>)
 8002474:	5cd3      	ldrb	r3, [r2, r3]
 8002476:	2b0d      	cmp	r3, #13
 8002478:	d109      	bne.n	800248e <USART3_IRQHandler+0x8a>
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <USART3_IRQHandler+0x9c>)
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	3b01      	subs	r3, #1
 8002480:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <USART3_IRQHandler+0xa0>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	2b0a      	cmp	r3, #10
 8002486:	d102      	bne.n	800248e <USART3_IRQHandler+0x8a>
	  			messageHandlerFlag = 1;
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <USART3_IRQHandler+0xac>)
 800248a:	2201      	movs	r2, #1
 800248c:	801a      	strh	r2, [r3, #0]
	  	}
//	    HAL_UART_IRQHandler(&huart3);
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800248e:	4806      	ldr	r0, [pc, #24]	; (80024a8 <USART3_IRQHandler+0xa4>)
 8002490:	f002 fb9a 	bl	8004bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */



  /* USER CODE END USART3_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000092 	.word	0x20000092
 800249c:	20000098 	.word	0x20000098
 80024a0:	20000090 	.word	0x20000090
 80024a4:	20000180 	.word	0x20000180
 80024a8:	200000ac 	.word	0x200000ac
 80024ac:	2000094f 	.word	0x2000094f
 80024b0:	20000094 	.word	0x20000094

080024b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
//	value1 %= 2;
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, value1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, value1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, value1);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, value1);
		float raw = 0;
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	607b      	str	r3, [r7, #4]
	if(HAL_ADC_Start(&hadc1) == HAL_OK) {
 80024c0:	4820      	ldr	r0, [pc, #128]	; (8002544 <TIM7_IRQHandler+0x90>)
 80024c2:	f000 fa1d 	bl	8002900 <HAL_ADC_Start>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10f      	bne.n	80024ec <TIM7_IRQHandler+0x38>
			  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 80024cc:	491e      	ldr	r1, [pc, #120]	; (8002548 <TIM7_IRQHandler+0x94>)
 80024ce:	481d      	ldr	r0, [pc, #116]	; (8002544 <TIM7_IRQHandler+0x90>)
 80024d0:	f000 fae8 	bl	8002aa4 <HAL_ADC_PollForConversion>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d108      	bne.n	80024ec <TIM7_IRQHandler+0x38>
			  {
				  raw = HAL_ADC_GetValue(&hadc1);
 80024da:	481a      	ldr	r0, [pc, #104]	; (8002544 <TIM7_IRQHandler+0x90>)
 80024dc:	f000 fb6d 	bl	8002bba <HAL_ADC_GetValue>
 80024e0:	ee07 0a90 	vmov	s15, r0
 80024e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e8:	edc7 7a01 	vstr	s15, [r7, #4]
			  }
		  }
		  float Vbatt2 = (raw / 4096.0) * 3 * 6;
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7fe f82b 	bl	8000548 <__aeabi_f2d>
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <TIM7_IRQHandler+0x98>)
 80024f8:	f7fe f9a8 	bl	800084c <__aeabi_ddiv>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <TIM7_IRQHandler+0x9c>)
 800250a:	f7fe f875 	bl	80005f8 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <TIM7_IRQHandler+0xa0>)
 800251c:	f7fe f86c 	bl	80005f8 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe fa78 	bl	8000a1c <__aeabi_d2f>
 800252c:	4603      	mov	r3, r0
 800252e:	603b      	str	r3, [r7, #0]
		  batteryVoltage = Vbatt2;
 8002530:	4a09      	ldr	r2, [pc, #36]	; (8002558 <TIM7_IRQHandler+0xa4>)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002536:	4809      	ldr	r0, [pc, #36]	; (800255c <TIM7_IRQHandler+0xa8>)
 8002538:	f001 fdf8 	bl	800412c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000138 	.word	0x20000138
 8002548:	000f4240 	.word	0x000f4240
 800254c:	40b00000 	.word	0x40b00000
 8002550:	40080000 	.word	0x40080000
 8002554:	40180000 	.word	0x40180000
 8002558:	20000994 	.word	0x20000994
 800255c:	200009dc 	.word	0x200009dc

08002560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
	return 1;
 8002564:	2301      	movs	r3, #1
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_kill>:

int _kill(int pid, int sig)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800257a:	f003 f9ad 	bl	80058d8 <__errno>
 800257e:	4603      	mov	r3, r0
 8002580:	2216      	movs	r2, #22
 8002582:	601a      	str	r2, [r3, #0]
	return -1;
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_exit>:

void _exit (int status)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ffe7 	bl	8002570 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025a2:	e7fe      	b.n	80025a2 <_exit+0x12>

080025a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e00a      	b.n	80025cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025b6:	f3af 8000 	nop.w
 80025ba:	4601      	mov	r1, r0
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	60ba      	str	r2, [r7, #8]
 80025c2:	b2ca      	uxtb	r2, r1
 80025c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dbf0      	blt.n	80025b6 <_read+0x12>
	}

return len;
 80025d4:	687b      	ldr	r3, [r7, #4]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e009      	b.n	8002604 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	60ba      	str	r2, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	dbf1      	blt.n	80025f0 <_write+0x12>
	}
	return len;
 800260c:	687b      	ldr	r3, [r7, #4]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <_close>:

int _close(int file)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
	return -1;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800263e:	605a      	str	r2, [r3, #4]
	return 0;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_isatty>:

int _isatty(int file)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
	return 1;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
	return 0;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002688:	4a14      	ldr	r2, [pc, #80]	; (80026dc <_sbrk+0x5c>)
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <_sbrk+0x60>)
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <_sbrk+0x64>)
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <_sbrk+0x68>)
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <_sbrk+0x64>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d207      	bcs.n	80026c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b0:	f003 f912 	bl	80058d8 <__errno>
 80026b4:	4603      	mov	r3, r0
 80026b6:	220c      	movs	r2, #12
 80026b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	e009      	b.n	80026d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <_sbrk+0x64>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026c6:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <_sbrk+0x64>)
 80026d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026d2:	68fb      	ldr	r3, [r7, #12]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20020000 	.word	0x20020000
 80026e0:	00000400 	.word	0x00000400
 80026e4:	200000a0 	.word	0x200000a0
 80026e8:	20000c18 	.word	0x20000c18

080026ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <SystemInit+0x20>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	4a05      	ldr	r2, [pc, #20]	; (800270c <SystemInit+0x20>)
 80026f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002714:	480d      	ldr	r0, [pc, #52]	; (800274c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002716:	490e      	ldr	r1, [pc, #56]	; (8002750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800271c:	e002      	b.n	8002724 <LoopCopyDataInit>

0800271e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002722:	3304      	adds	r3, #4

08002724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002728:	d3f9      	bcc.n	800271e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272a:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800272c:	4c0b      	ldr	r4, [pc, #44]	; (800275c <LoopFillZerobss+0x26>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002730:	e001      	b.n	8002736 <LoopFillZerobss>

08002732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002734:	3204      	adds	r2, #4

08002736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002738:	d3fb      	bcc.n	8002732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800273a:	f7ff ffd7 	bl	80026ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800273e:	f003 f8d1 	bl	80058e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002742:	f7fe fb37 	bl	8000db4 <main>
  bx  lr    
 8002746:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002750:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002754:	08006fd4 	.word	0x08006fd4
  ldr r2, =_sbss
 8002758:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800275c:	20000c18 	.word	0x20000c18

08002760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC_IRQHandler>
	...

08002764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_Init+0x40>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <HAL_Init+0x40>)
 800276e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_Init+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <HAL_Init+0x40>)
 800277a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <HAL_Init+0x40>)
 8002786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278c:	2003      	movs	r0, #3
 800278e:	f000 fd0f 	bl	80031b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002792:	2000      	movs	r0, #0
 8002794:	f000 f808 	bl	80027a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002798:	f7ff fc52 	bl	8002040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023c00 	.word	0x40023c00

080027a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_InitTick+0x54>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_InitTick+0x58>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4619      	mov	r1, r3
 80027ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027be:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fd27 	bl	800321a <HAL_SYSTICK_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00e      	b.n	80027f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b0f      	cmp	r3, #15
 80027da:	d80a      	bhi.n	80027f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027dc:	2200      	movs	r2, #0
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f000 fcef 	bl	80031c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e8:	4a06      	ldr	r2, [pc, #24]	; (8002804 <HAL_InitTick+0x5c>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000004 	.word	0x20000004
 8002800:	2000000c 	.word	0x2000000c
 8002804:	20000008 	.word	0x20000008

08002808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_IncTick+0x20>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_IncTick+0x24>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4413      	add	r3, r2
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_IncTick+0x24>)
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	2000000c 	.word	0x2000000c
 800282c:	20000c04 	.word	0x20000c04

08002830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff fbea 	bl	8002010 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d005      	beq.n	8002856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_Delay+0x44>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002856:	bf00      	nop
 8002858:	f7ff fbda 	bl	8002010 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	429a      	cmp	r2, r3
 8002866:	d8f7      	bhi.n	8002858 <HAL_Delay+0x28>
  {
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000000c 	.word	0x2000000c

08002878 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e033      	b.n	80028f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fbfa 	bl	8002090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d118      	bne.n	80028e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028be:	f023 0302 	bic.w	r3, r3, #2
 80028c2:	f043 0202 	orr.w	r2, r3, #2
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 faa4 	bl	8002e18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f023 0303 	bic.w	r3, r3, #3
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
 80028e6:	e001      	b.n	80028ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_ADC_Start+0x1a>
 8002916:	2302      	movs	r3, #2
 8002918:	e0b2      	b.n	8002a80 <HAL_ADC_Start+0x180>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d018      	beq.n	8002962 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002940:	4b52      	ldr	r3, [pc, #328]	; (8002a8c <HAL_ADC_Start+0x18c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a52      	ldr	r2, [pc, #328]	; (8002a90 <HAL_ADC_Start+0x190>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0c9a      	lsrs	r2, r3, #18
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002954:	e002      	b.n	800295c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3b01      	subs	r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f9      	bne.n	8002956 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d17a      	bne.n	8002a66 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800299a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ae:	d106      	bne.n	80029be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	f023 0206 	bic.w	r2, r3, #6
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44
 80029bc:	e002      	b.n	80029c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029cc:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_ADC_Start+0x194>)
 80029ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d12a      	bne.n	8002a3c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <HAL_ADC_Start+0x198>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d015      	beq.n	8002a1c <HAL_ADC_Start+0x11c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <HAL_ADC_Start+0x19c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d105      	bne.n	8002a06 <HAL_ADC_Start+0x106>
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <HAL_ADC_Start+0x194>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <HAL_ADC_Start+0x1a0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d136      	bne.n	8002a7e <HAL_ADC_Start+0x17e>
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_ADC_Start+0x194>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d130      	bne.n	8002a7e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d129      	bne.n	8002a7e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	e020      	b.n	8002a7e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <HAL_ADC_Start+0x198>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d11b      	bne.n	8002a7e <HAL_ADC_Start+0x17e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d114      	bne.n	8002a7e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e00b      	b.n	8002a7e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f043 0210 	orr.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	20000004 	.word	0x20000004
 8002a90:	431bde83 	.word	0x431bde83
 8002a94:	40012300 	.word	0x40012300
 8002a98:	40012000 	.word	0x40012000
 8002a9c:	40012100 	.word	0x40012100
 8002aa0:	40012200 	.word	0x40012200

08002aa4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac0:	d113      	bne.n	8002aea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad0:	d10b      	bne.n	8002aea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e063      	b.n	8002bb2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002aea:	f7ff fa91 	bl	8002010 <HAL_GetTick>
 8002aee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002af0:	e021      	b.n	8002b36 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d01d      	beq.n	8002b36 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_ADC_PollForConversion+0x6c>
 8002b00:	f7ff fa86 	bl	8002010 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d212      	bcs.n	8002b36 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d00b      	beq.n	8002b36 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e03d      	b.n	8002bb2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d1d6      	bne.n	8002af2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0212 	mvn.w	r2, #18
 8002b4c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d123      	bne.n	8002bb0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d11f      	bne.n	8002bb0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d111      	bne.n	8002bb0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1c>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e105      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x228>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b09      	cmp	r3, #9
 8002bfe:	d925      	bls.n	8002c4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68d9      	ldr	r1, [r3, #12]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	3b1e      	subs	r3, #30
 8002c16:	2207      	movs	r2, #7
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	400a      	ands	r2, r1
 8002c24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68d9      	ldr	r1, [r3, #12]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	4603      	mov	r3, r0
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4403      	add	r3, r0
 8002c3e:	3b1e      	subs	r3, #30
 8002c40:	409a      	lsls	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	e022      	b.n	8002c92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6919      	ldr	r1, [r3, #16]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	2207      	movs	r2, #7
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	4618      	mov	r0, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4403      	add	r3, r0
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d824      	bhi.n	8002ce4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	3b05      	subs	r3, #5
 8002cac:	221f      	movs	r2, #31
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	400a      	ands	r2, r1
 8002cba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b05      	subs	r3, #5
 8002cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce2:	e04c      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d824      	bhi.n	8002d36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b23      	subs	r3, #35	; 0x23
 8002cfe:	221f      	movs	r2, #31
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43da      	mvns	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3b23      	subs	r3, #35	; 0x23
 8002d28:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
 8002d34:	e023      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	3b41      	subs	r3, #65	; 0x41
 8002d48:	221f      	movs	r2, #31
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	400a      	ands	r2, r1
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4618      	mov	r0, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b41      	subs	r3, #65	; 0x41
 8002d72:	fa00 f203 	lsl.w	r2, r0, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <HAL_ADC_ConfigChannel+0x234>)
 8002d80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a21      	ldr	r2, [pc, #132]	; (8002e0c <HAL_ADC_ConfigChannel+0x238>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d109      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x1cc>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b12      	cmp	r3, #18
 8002d92:	d105      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_ADC_ConfigChannel+0x238>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d123      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x21e>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d003      	beq.n	8002dba <HAL_ADC_ConfigChannel+0x1e6>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b11      	cmp	r3, #17
 8002db8:	d11b      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d111      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_ADC_ConfigChannel+0x23c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <HAL_ADC_ConfigChannel+0x240>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	0c9a      	lsrs	r2, r3, #18
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002de4:	e002      	b.n	8002dec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f9      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40012300 	.word	0x40012300
 8002e0c:	40012000 	.word	0x40012000
 8002e10:	20000004 	.word	0x20000004
 8002e14:	431bde83 	.word	0x431bde83

08002e18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e20:	4b79      	ldr	r3, [pc, #484]	; (8003008 <ADC_Init+0x1f0>)
 8002e22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	021a      	lsls	r2, r3, #8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	4a58      	ldr	r2, [pc, #352]	; (800300c <ADC_Init+0x1f4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ebe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ee0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	e00f      	b.n	8002f16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0202 	bic.w	r2, r2, #2
 8002f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7e1b      	ldrb	r3, [r3, #24]
 8002f30:	005a      	lsls	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01b      	beq.n	8002f7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	035a      	lsls	r2, r3, #13
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e007      	b.n	8002f8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	051a      	lsls	r2, r3, #20
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6899      	ldr	r1, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fce:	025a      	lsls	r2, r3, #9
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6899      	ldr	r1, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	029a      	lsls	r2, r3, #10
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40012300 	.word	0x40012300
 800300c:	0f000001 	.word	0x0f000001

08003010 <__NVIC_SetPriorityGrouping>:
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800302c:	4013      	ands	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800303c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_GetPriorityGrouping>:
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <__NVIC_GetPriorityGrouping+0x18>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 0307 	and.w	r3, r3, #7
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_EnableIRQ>:
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	db0b      	blt.n	800309e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4907      	ldr	r1, [pc, #28]	; (80030ac <__NVIC_EnableIRQ+0x38>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2001      	movs	r0, #1
 8003096:	fa00 f202 	lsl.w	r2, r0, r2
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000e100 	.word	0xe000e100

080030b0 <__NVIC_SetPriority>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	db0a      	blt.n	80030da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	490c      	ldr	r1, [pc, #48]	; (80030fc <__NVIC_SetPriority+0x4c>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	0112      	lsls	r2, r2, #4
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	440b      	add	r3, r1
 80030d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030d8:	e00a      	b.n	80030f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4908      	ldr	r1, [pc, #32]	; (8003100 <__NVIC_SetPriority+0x50>)
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	3b04      	subs	r3, #4
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	440b      	add	r3, r1
 80030ee:	761a      	strb	r2, [r3, #24]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000e100 	.word	0xe000e100
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <NVIC_EncodePriority>:
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	; 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f1c3 0307 	rsb	r3, r3, #7
 800311e:	2b04      	cmp	r3, #4
 8003120:	bf28      	it	cs
 8003122:	2304      	movcs	r3, #4
 8003124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3304      	adds	r3, #4
 800312a:	2b06      	cmp	r3, #6
 800312c:	d902      	bls.n	8003134 <NVIC_EncodePriority+0x30>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3b03      	subs	r3, #3
 8003132:	e000      	b.n	8003136 <NVIC_EncodePriority+0x32>
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	f04f 32ff 	mov.w	r2, #4294967295
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43da      	mvns	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	401a      	ands	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800314c:	f04f 31ff 	mov.w	r1, #4294967295
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	43d9      	mvns	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	4313      	orrs	r3, r2
}
 800315e:	4618      	mov	r0, r3
 8003160:	3724      	adds	r7, #36	; 0x24
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800317c:	d301      	bcc.n	8003182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317e:	2301      	movs	r3, #1
 8003180:	e00f      	b.n	80031a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <SysTick_Config+0x40>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318a:	210f      	movs	r1, #15
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	f7ff ff8e 	bl	80030b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <SysTick_Config+0x40>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <SysTick_Config+0x40>)
 800319c:	2207      	movs	r2, #7
 800319e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	e000e010 	.word	0xe000e010

080031b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ff29 	bl	8003010 <__NVIC_SetPriorityGrouping>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031d8:	f7ff ff3e 	bl	8003058 <__NVIC_GetPriorityGrouping>
 80031dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	6978      	ldr	r0, [r7, #20]
 80031e4:	f7ff ff8e 	bl	8003104 <NVIC_EncodePriority>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff5d 	bl	80030b0 <__NVIC_SetPriority>
}
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff31 	bl	8003074 <__NVIC_EnableIRQ>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffa2 	bl	800316c <SysTick_Config>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003240:	f7fe fee6 	bl	8002010 <HAL_GetTick>
 8003244:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d008      	beq.n	8003264 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e052      	b.n	800330a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0216 	bic.w	r2, r2, #22
 8003272:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003282:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <HAL_DMA_Abort+0x62>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0208 	bic.w	r2, r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b4:	e013      	b.n	80032de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b6:	f7fe feab 	bl	8002010 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d90c      	bls.n	80032de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e015      	b.n	800330a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e4      	bne.n	80032b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	223f      	movs	r2, #63	; 0x3f
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d004      	beq.n	8003330 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e00c      	b.n	800334a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2205      	movs	r2, #5
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	e16b      	b.n	800364c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003374:	2201      	movs	r2, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	f040 815a 	bne.w	8003646 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d005      	beq.n	80033aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d130      	bne.n	800340c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 0201 	and.w	r2, r3, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b03      	cmp	r3, #3
 8003416:	d017      	beq.n	8003448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d123      	bne.n	800349c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	08da      	lsrs	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3208      	adds	r2, #8
 800345c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	220f      	movs	r2, #15
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	08da      	lsrs	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3208      	adds	r2, #8
 8003496:	69b9      	ldr	r1, [r7, #24]
 8003498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80b4 	beq.w	8003646 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	4b60      	ldr	r3, [pc, #384]	; (8003664 <HAL_GPIO_Init+0x30c>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4a5f      	ldr	r2, [pc, #380]	; (8003664 <HAL_GPIO_Init+0x30c>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ec:	6453      	str	r3, [r2, #68]	; 0x44
 80034ee:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <HAL_GPIO_Init+0x30c>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fa:	4a5b      	ldr	r2, [pc, #364]	; (8003668 <HAL_GPIO_Init+0x310>)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	220f      	movs	r2, #15
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a52      	ldr	r2, [pc, #328]	; (800366c <HAL_GPIO_Init+0x314>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02b      	beq.n	800357e <HAL_GPIO_Init+0x226>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a51      	ldr	r2, [pc, #324]	; (8003670 <HAL_GPIO_Init+0x318>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d025      	beq.n	800357a <HAL_GPIO_Init+0x222>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a50      	ldr	r2, [pc, #320]	; (8003674 <HAL_GPIO_Init+0x31c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01f      	beq.n	8003576 <HAL_GPIO_Init+0x21e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4f      	ldr	r2, [pc, #316]	; (8003678 <HAL_GPIO_Init+0x320>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d019      	beq.n	8003572 <HAL_GPIO_Init+0x21a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4e      	ldr	r2, [pc, #312]	; (800367c <HAL_GPIO_Init+0x324>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0x216>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4d      	ldr	r2, [pc, #308]	; (8003680 <HAL_GPIO_Init+0x328>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_Init+0x212>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4c      	ldr	r2, [pc, #304]	; (8003684 <HAL_GPIO_Init+0x32c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_Init+0x20e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4b      	ldr	r2, [pc, #300]	; (8003688 <HAL_GPIO_Init+0x330>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_Init+0x20a>
 800355e:	2307      	movs	r3, #7
 8003560:	e00e      	b.n	8003580 <HAL_GPIO_Init+0x228>
 8003562:	2308      	movs	r3, #8
 8003564:	e00c      	b.n	8003580 <HAL_GPIO_Init+0x228>
 8003566:	2306      	movs	r3, #6
 8003568:	e00a      	b.n	8003580 <HAL_GPIO_Init+0x228>
 800356a:	2305      	movs	r3, #5
 800356c:	e008      	b.n	8003580 <HAL_GPIO_Init+0x228>
 800356e:	2304      	movs	r3, #4
 8003570:	e006      	b.n	8003580 <HAL_GPIO_Init+0x228>
 8003572:	2303      	movs	r3, #3
 8003574:	e004      	b.n	8003580 <HAL_GPIO_Init+0x228>
 8003576:	2302      	movs	r3, #2
 8003578:	e002      	b.n	8003580 <HAL_GPIO_Init+0x228>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_GPIO_Init+0x228>
 800357e:	2300      	movs	r3, #0
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	f002 0203 	and.w	r2, r2, #3
 8003586:	0092      	lsls	r2, r2, #2
 8003588:	4093      	lsls	r3, r2
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003590:	4935      	ldr	r1, [pc, #212]	; (8003668 <HAL_GPIO_Init+0x310>)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	3302      	adds	r3, #2
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_GPIO_Init+0x334>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035c2:	4a32      	ldr	r2, [pc, #200]	; (800368c <HAL_GPIO_Init+0x334>)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <HAL_GPIO_Init+0x334>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ec:	4a27      	ldr	r2, [pc, #156]	; (800368c <HAL_GPIO_Init+0x334>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035f2:	4b26      	ldr	r3, [pc, #152]	; (800368c <HAL_GPIO_Init+0x334>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003616:	4a1d      	ldr	r2, [pc, #116]	; (800368c <HAL_GPIO_Init+0x334>)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_GPIO_Init+0x334>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003640:	4a12      	ldr	r2, [pc, #72]	; (800368c <HAL_GPIO_Init+0x334>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3301      	adds	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	f67f ae90 	bls.w	8003374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	40013800 	.word	0x40013800
 800366c:	40020000 	.word	0x40020000
 8003670:	40020400 	.word	0x40020400
 8003674:	40020800 	.word	0x40020800
 8003678:	40020c00 	.word	0x40020c00
 800367c:	40021000 	.word	0x40021000
 8003680:	40021400 	.word	0x40021400
 8003684:	40021800 	.word	0x40021800
 8003688:	40021c00 	.word	0x40021c00
 800368c:	40013c00 	.word	0x40013c00

08003690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
 800369c:	4613      	mov	r3, r2
 800369e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a0:	787b      	ldrb	r3, [r7, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036ac:	e003      	b.n	80036b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	041a      	lsls	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	619a      	str	r2, [r3, #24]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e264      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d075      	beq.n	80037ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036e2:	4ba3      	ldr	r3, [pc, #652]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d00c      	beq.n	8003708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ee:	4ba0      	ldr	r3, [pc, #640]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d112      	bne.n	8003720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fa:	4b9d      	ldr	r3, [pc, #628]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003706:	d10b      	bne.n	8003720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	4b99      	ldr	r3, [pc, #612]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05b      	beq.n	80037cc <HAL_RCC_OscConfig+0x108>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d157      	bne.n	80037cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e23f      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x74>
 800372a:	4b91      	ldr	r3, [pc, #580]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a90      	ldr	r2, [pc, #576]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e01d      	b.n	8003774 <HAL_RCC_OscConfig+0xb0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x98>
 8003742:	4b8b      	ldr	r3, [pc, #556]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a8a      	ldr	r2, [pc, #552]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a87      	ldr	r2, [pc, #540]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0xb0>
 800375c:	4b84      	ldr	r3, [pc, #528]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a83      	ldr	r2, [pc, #524]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b81      	ldr	r3, [pc, #516]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a80      	ldr	r2, [pc, #512]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fe fc48 	bl	8002010 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003784:	f7fe fc44 	bl	8002010 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e204      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b76      	ldr	r3, [pc, #472]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0xc0>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe fc34 	bl	8002010 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fe fc30 	bl	8002010 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e1f0      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0xe8>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037da:	4b65      	ldr	r3, [pc, #404]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e6:	4b62      	ldr	r3, [pc, #392]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d11c      	bne.n	800382c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f2:	4b5f      	ldr	r3, [pc, #380]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d116      	bne.n	800382c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	4b5c      	ldr	r3, [pc, #368]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_RCC_OscConfig+0x152>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e1c4      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003816:	4b56      	ldr	r3, [pc, #344]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4952      	ldr	r1, [pc, #328]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	e03a      	b.n	80038a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003834:	4b4f      	ldr	r3, [pc, #316]	; (8003974 <HAL_RCC_OscConfig+0x2b0>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fe fbe9 	bl	8002010 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003842:	f7fe fbe5 	bl	8002010 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1a5      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003854:	4b46      	ldr	r3, [pc, #280]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b43      	ldr	r3, [pc, #268]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4940      	ldr	r1, [pc, #256]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003876:	4b3f      	ldr	r3, [pc, #252]	; (8003974 <HAL_RCC_OscConfig+0x2b0>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe fbc8 	bl	8002010 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003884:	f7fe fbc4 	bl	8002010 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e184      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d030      	beq.n	8003910 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b6:	4b30      	ldr	r3, [pc, #192]	; (8003978 <HAL_RCC_OscConfig+0x2b4>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fe fba8 	bl	8002010 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c4:	f7fe fba4 	bl	8002010 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e164      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x200>
 80038e2:	e015      	b.n	8003910 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e4:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_OscConfig+0x2b4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ea:	f7fe fb91 	bl	8002010 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f2:	f7fe fb8d 	bl	8002010 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e14d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a0 	beq.w	8003a5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10f      	bne.n	800394e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	4a0e      	ldr	r2, [pc, #56]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393c:	6413      	str	r3, [r2, #64]	; 0x40
 800393e:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_OscConfig+0x2b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d121      	bne.n	800399e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <HAL_RCC_OscConfig+0x2b8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a07      	ldr	r2, [pc, #28]	; (800397c <HAL_RCC_OscConfig+0x2b8>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003966:	f7fe fb53 	bl	8002010 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	e011      	b.n	8003992 <HAL_RCC_OscConfig+0x2ce>
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	42470000 	.word	0x42470000
 8003978:	42470e80 	.word	0x42470e80
 800397c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003980:	f7fe fb46 	bl	8002010 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e106      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b85      	ldr	r3, [pc, #532]	; (8003ba8 <HAL_RCC_OscConfig+0x4e4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d106      	bne.n	80039b4 <HAL_RCC_OscConfig+0x2f0>
 80039a6:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	4a80      	ldr	r2, [pc, #512]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6713      	str	r3, [r2, #112]	; 0x70
 80039b2:	e01c      	b.n	80039ee <HAL_RCC_OscConfig+0x32a>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d10c      	bne.n	80039d6 <HAL_RCC_OscConfig+0x312>
 80039bc:	4b7b      	ldr	r3, [pc, #492]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a7a      	ldr	r2, [pc, #488]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 80039c2:	f043 0304 	orr.w	r3, r3, #4
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
 80039c8:	4b78      	ldr	r3, [pc, #480]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	4a77      	ldr	r2, [pc, #476]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6713      	str	r3, [r2, #112]	; 0x70
 80039d4:	e00b      	b.n	80039ee <HAL_RCC_OscConfig+0x32a>
 80039d6:	4b75      	ldr	r3, [pc, #468]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a74      	ldr	r2, [pc, #464]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
 80039e2:	4b72      	ldr	r3, [pc, #456]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	4a71      	ldr	r2, [pc, #452]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d015      	beq.n	8003a22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f6:	f7fe fb0b 	bl	8002010 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fe fb07 	bl	8002010 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e0c5      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a14:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ee      	beq.n	80039fe <HAL_RCC_OscConfig+0x33a>
 8003a20:	e014      	b.n	8003a4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a22:	f7fe faf5 	bl	8002010 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fe faf1 	bl	8002010 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0af      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a40:	4b5a      	ldr	r3, [pc, #360]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ee      	bne.n	8003a2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d105      	bne.n	8003a5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a52:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4a55      	ldr	r2, [pc, #340]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 8003a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 809b 	beq.w	8003b9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a68:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d05c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d141      	bne.n	8003b00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7c:	4b4c      	ldr	r3, [pc, #304]	; (8003bb0 <HAL_RCC_OscConfig+0x4ec>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fe fac5 	bl	8002010 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8a:	f7fe fac1 	bl	8002010 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e081      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9c:	4b43      	ldr	r3, [pc, #268]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	019b      	lsls	r3, r3, #6
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	041b      	lsls	r3, r3, #16
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	4937      	ldr	r1, [pc, #220]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad2:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <HAL_RCC_OscConfig+0x4ec>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fe fa9a 	bl	8002010 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fe fa96 	bl	8002010 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e056      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af2:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x41c>
 8003afe:	e04e      	b.n	8003b9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCC_OscConfig+0x4ec>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b06:	f7fe fa83 	bl	8002010 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fe fa7f 	bl	8002010 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e03f      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b20:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f0      	bne.n	8003b0e <HAL_RCC_OscConfig+0x44a>
 8003b2c:	e037      	b.n	8003b9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e032      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <HAL_RCC_OscConfig+0x4e8>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d028      	beq.n	8003b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d121      	bne.n	8003b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d11a      	bne.n	8003b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d111      	bne.n	8003b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	3b01      	subs	r3, #1
 8003b84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d107      	bne.n	8003b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d001      	beq.n	8003b9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	42470060 	.word	0x42470060

08003bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0cc      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d90c      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b65      	ldr	r3, [pc, #404]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0b8      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c20:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	494d      	ldr	r1, [pc, #308]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d044      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d119      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d003      	beq.n	8003c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	4b3f      	ldr	r3, [pc, #252]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c82:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e067      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c92:	4b37      	ldr	r3, [pc, #220]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f023 0203 	bic.w	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4934      	ldr	r1, [pc, #208]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca4:	f7fe f9b4 	bl	8002010 <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cac:	f7fe f9b0 	bl	8002010 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e04f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 020c 	and.w	r2, r3, #12
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d1eb      	bne.n	8003cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d20c      	bcs.n	8003cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce2:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e032      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4916      	ldr	r1, [pc, #88]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	490e      	ldr	r1, [pc, #56]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d3a:	f000 f821 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	490a      	ldr	r1, [pc, #40]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	5ccb      	ldrb	r3, [r1, r3]
 8003d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fd24 	bl	80027a8 <HAL_InitTick>

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40023c00 	.word	0x40023c00
 8003d70:	40023800 	.word	0x40023800
 8003d74:	08006e60 	.word	0x08006e60
 8003d78:	20000004 	.word	0x20000004
 8003d7c:	20000008 	.word	0x20000008

08003d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	607b      	str	r3, [r7, #4]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	2300      	movs	r3, #0
 8003d92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d98:	4b67      	ldr	r3, [pc, #412]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d00d      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	f200 80bd 	bhi.w	8003f24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0x3a>
 8003db2:	e0b7      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db4:	4b61      	ldr	r3, [pc, #388]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003db6:	60bb      	str	r3, [r7, #8]
       break;
 8003db8:	e0b7      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dba:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003dbc:	60bb      	str	r3, [r7, #8]
      break;
 8003dbe:	e0b4      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc0:	4b5d      	ldr	r3, [pc, #372]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dca:	4b5b      	ldr	r3, [pc, #364]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d04d      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd6:	4b58      	ldr	r3, [pc, #352]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	099b      	lsrs	r3, r3, #6
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	ea02 0800 	and.w	r8, r2, r0
 8003dee:	ea03 0901 	and.w	r9, r3, r1
 8003df2:	4640      	mov	r0, r8
 8003df4:	4649      	mov	r1, r9
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	014b      	lsls	r3, r1, #5
 8003e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e04:	0142      	lsls	r2, r0, #5
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	ebb0 0008 	subs.w	r0, r0, r8
 8003e0e:	eb61 0109 	sbc.w	r1, r1, r9
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	018b      	lsls	r3, r1, #6
 8003e1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e20:	0182      	lsls	r2, r0, #6
 8003e22:	1a12      	subs	r2, r2, r0
 8003e24:	eb63 0301 	sbc.w	r3, r3, r1
 8003e28:	f04f 0000 	mov.w	r0, #0
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	00d9      	lsls	r1, r3, #3
 8003e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e36:	00d0      	lsls	r0, r2, #3
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	eb12 0208 	adds.w	r2, r2, r8
 8003e40:	eb43 0309 	adc.w	r3, r3, r9
 8003e44:	f04f 0000 	mov.w	r0, #0
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	0259      	lsls	r1, r3, #9
 8003e4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e52:	0250      	lsls	r0, r2, #9
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	f7fc fe2a 	bl	8000abc <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	e04a      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e72:	4b31      	ldr	r3, [pc, #196]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	ea02 0400 	and.w	r4, r2, r0
 8003e8a:	ea03 0501 	and.w	r5, r3, r1
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4629      	mov	r1, r5
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	014b      	lsls	r3, r1, #5
 8003e9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ea0:	0142      	lsls	r2, r0, #5
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	1b00      	subs	r0, r0, r4
 8003ea8:	eb61 0105 	sbc.w	r1, r1, r5
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	018b      	lsls	r3, r1, #6
 8003eb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003eba:	0182      	lsls	r2, r0, #6
 8003ebc:	1a12      	subs	r2, r2, r0
 8003ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f04f 0100 	mov.w	r1, #0
 8003eca:	00d9      	lsls	r1, r3, #3
 8003ecc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ed0:	00d0      	lsls	r0, r2, #3
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	1912      	adds	r2, r2, r4
 8003ed8:	eb45 0303 	adc.w	r3, r5, r3
 8003edc:	f04f 0000 	mov.w	r0, #0
 8003ee0:	f04f 0100 	mov.w	r1, #0
 8003ee4:	0299      	lsls	r1, r3, #10
 8003ee6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003eea:	0290      	lsls	r0, r2, #10
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	f7fc fdde 	bl	8000abc <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4613      	mov	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	3301      	adds	r3, #1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	60bb      	str	r3, [r7, #8]
      break;
 8003f22:	e002      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f26:	60bb      	str	r3, [r7, #8]
      break;
 8003f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	007a1200 	.word	0x007a1200

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000004 	.word	0x20000004

08003f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f60:	f7ff fff0 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0a9b      	lsrs	r3, r3, #10
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	08006e70 	.word	0x08006e70

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f88:	f7ff ffdc 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0b5b      	lsrs	r3, r3, #13
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	08006e70 	.word	0x08006e70

08003fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e041      	b.n	8004042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fe f8a0 	bl	8002118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f000 faa0 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d001      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e04e      	b.n	8004102 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a23      	ldr	r2, [pc, #140]	; (8004110 <HAL_TIM_Base_Start_IT+0xc4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d022      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408e:	d01d      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <HAL_TIM_Base_Start_IT+0xc8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d018      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <HAL_TIM_Base_Start_IT+0xcc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d013      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_TIM_Base_Start_IT+0xd0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00e      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <HAL_TIM_Base_Start_IT+0xd4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d009      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a19      	ldr	r2, [pc, #100]	; (8004124 <HAL_TIM_Base_Start_IT+0xd8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_TIM_Base_Start_IT+0xdc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d111      	bne.n	80040f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d010      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ee:	e007      	b.n	8004100 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40010400 	.word	0x40010400
 8004124:	40014000 	.word	0x40014000
 8004128:	40001800 	.word	0x40001800

0800412c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d122      	bne.n	8004188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b02      	cmp	r3, #2
 800414e:	d11b      	bne.n	8004188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0202 	mvn.w	r2, #2
 8004158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f9bf 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f9b1 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f9c2 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b04      	cmp	r3, #4
 8004194:	d122      	bne.n	80041dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d11b      	bne.n	80041dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0204 	mvn.w	r2, #4
 80041ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f995 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 80041c8:	e005      	b.n	80041d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f987 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f998 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d122      	bne.n	8004230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d11b      	bne.n	8004230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0208 	mvn.w	r2, #8
 8004200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2204      	movs	r2, #4
 8004206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f96b 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f95d 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f96e 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b10      	cmp	r3, #16
 800423c:	d122      	bne.n	8004284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b10      	cmp	r3, #16
 800424a:	d11b      	bne.n	8004284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0210 	mvn.w	r2, #16
 8004254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2208      	movs	r2, #8
 800425a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f941 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f933 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f944 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b01      	cmp	r3, #1
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0201 	mvn.w	r2, #1
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f90d 	bl	80044ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 faea 	bl	80048b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d10e      	bne.n	8004308 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d107      	bne.n	8004308 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f909 	bl	800451a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b20      	cmp	r3, #32
 8004314:	d10e      	bne.n	8004334 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b20      	cmp	r3, #32
 8004322:	d107      	bne.n	8004334 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0220 	mvn.w	r2, #32
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fab4 	bl	800489c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_TIM_ConfigClockSource+0x1c>
 8004354:	2302      	movs	r3, #2
 8004356:	e0b4      	b.n	80044c2 <HAL_TIM_ConfigClockSource+0x186>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800437e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004390:	d03e      	beq.n	8004410 <HAL_TIM_ConfigClockSource+0xd4>
 8004392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004396:	f200 8087 	bhi.w	80044a8 <HAL_TIM_ConfigClockSource+0x16c>
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	f000 8086 	beq.w	80044ae <HAL_TIM_ConfigClockSource+0x172>
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a6:	d87f      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b70      	cmp	r3, #112	; 0x70
 80043aa:	d01a      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0xa6>
 80043ac:	2b70      	cmp	r3, #112	; 0x70
 80043ae:	d87b      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b60      	cmp	r3, #96	; 0x60
 80043b2:	d050      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x11a>
 80043b4:	2b60      	cmp	r3, #96	; 0x60
 80043b6:	d877      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b50      	cmp	r3, #80	; 0x50
 80043ba:	d03c      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0xfa>
 80043bc:	2b50      	cmp	r3, #80	; 0x50
 80043be:	d873      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d058      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x13a>
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d86f      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b30      	cmp	r3, #48	; 0x30
 80043ca:	d064      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15a>
 80043cc:	2b30      	cmp	r3, #48	; 0x30
 80043ce:	d86b      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d060      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15a>
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d867      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d05c      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15a>
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d05a      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15a>
 80043e0:	e062      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6899      	ldr	r1, [r3, #8]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f000 f9b7 	bl	8004764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004404:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	609a      	str	r2, [r3, #8]
      break;
 800440e:	e04f      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6899      	ldr	r1, [r3, #8]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f000 f9a0 	bl	8004764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004432:	609a      	str	r2, [r3, #8]
      break;
 8004434:	e03c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	461a      	mov	r2, r3
 8004444:	f000 f914 	bl	8004670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2150      	movs	r1, #80	; 0x50
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f96d 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 8004454:	e02c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	461a      	mov	r2, r3
 8004464:	f000 f933 	bl	80046ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2160      	movs	r1, #96	; 0x60
 800446e:	4618      	mov	r0, r3
 8004470:	f000 f95d 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 8004474:	e01c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6859      	ldr	r1, [r3, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	461a      	mov	r2, r3
 8004484:	f000 f8f4 	bl	8004670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2140      	movs	r1, #64	; 0x40
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f94d 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 8004494:	e00c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f000 f944 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 80044a6:	e003      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      break;
 80044ac:	e000      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a40      	ldr	r2, [pc, #256]	; (8004644 <TIM_Base_SetConfig+0x114>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454e:	d00f      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3d      	ldr	r2, [pc, #244]	; (8004648 <TIM_Base_SetConfig+0x118>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00b      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a3c      	ldr	r2, [pc, #240]	; (800464c <TIM_Base_SetConfig+0x11c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a3b      	ldr	r2, [pc, #236]	; (8004650 <TIM_Base_SetConfig+0x120>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a3a      	ldr	r2, [pc, #232]	; (8004654 <TIM_Base_SetConfig+0x124>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d108      	bne.n	8004582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2f      	ldr	r2, [pc, #188]	; (8004644 <TIM_Base_SetConfig+0x114>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d02b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004590:	d027      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2c      	ldr	r2, [pc, #176]	; (8004648 <TIM_Base_SetConfig+0x118>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d023      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2b      	ldr	r2, [pc, #172]	; (800464c <TIM_Base_SetConfig+0x11c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01f      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <TIM_Base_SetConfig+0x120>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a29      	ldr	r2, [pc, #164]	; (8004654 <TIM_Base_SetConfig+0x124>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d017      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a28      	ldr	r2, [pc, #160]	; (8004658 <TIM_Base_SetConfig+0x128>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a27      	ldr	r2, [pc, #156]	; (800465c <TIM_Base_SetConfig+0x12c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00f      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a26      	ldr	r2, [pc, #152]	; (8004660 <TIM_Base_SetConfig+0x130>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a25      	ldr	r2, [pc, #148]	; (8004664 <TIM_Base_SetConfig+0x134>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a24      	ldr	r2, [pc, #144]	; (8004668 <TIM_Base_SetConfig+0x138>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d003      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a23      	ldr	r2, [pc, #140]	; (800466c <TIM_Base_SetConfig+0x13c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <TIM_Base_SetConfig+0x114>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_Base_SetConfig+0xf8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <TIM_Base_SetConfig+0x124>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	615a      	str	r2, [r3, #20]
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00
 8004654:	40010400 	.word	0x40010400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	40001800 	.word	0x40001800
 8004668:	40001c00 	.word	0x40001c00
 800466c:	40002000 	.word	0x40002000

08004670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0201 	bic.w	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800469a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 030a 	bic.w	r3, r3, #10
 80046ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b087      	sub	sp, #28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0210 	bic.w	r2, r3, #16
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	031b      	lsls	r3, r3, #12
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800470a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	f043 0307 	orr.w	r3, r3, #7
 8004750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800477e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	021a      	lsls	r2, r3, #8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	431a      	orrs	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e05a      	b.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a21      	ldr	r2, [pc, #132]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d01d      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1a      	ldr	r2, [pc, #104]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a17      	ldr	r2, [pc, #92]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a15      	ldr	r2, [pc, #84]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d10c      	bne.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4313      	orrs	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40010400 	.word	0x40010400
 8004894:	40014000 	.word	0x40014000
 8004898:	40001800 	.word	0x40001800

0800489c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e03f      	b.n	8004956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd fc5a 	bl	80021a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	; 0x24
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fe1d 	bl	8005548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800491c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800492c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b08a      	sub	sp, #40	; 0x28
 8004962:	af02      	add	r7, sp, #8
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	4613      	mov	r3, r2
 800496c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b20      	cmp	r3, #32
 800497c:	d17c      	bne.n	8004a78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_UART_Transmit+0x2c>
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e075      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_UART_Transmit+0x3e>
 8004998:	2302      	movs	r3, #2
 800499a:	e06e      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2221      	movs	r2, #33	; 0x21
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b2:	f7fd fb2d 	bl	8002010 <HAL_GetTick>
 80049b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049cc:	d108      	bne.n	80049e0 <HAL_UART_Transmit+0x82>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e003      	b.n	80049e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049f0:	e02a      	b.n	8004a48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2180      	movs	r1, #128	; 0x80
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fb9b 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e036      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	3302      	adds	r3, #2
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	e007      	b.n	8004a3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	3301      	adds	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1cf      	bne.n	80049f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2140      	movs	r1, #64	; 0x40
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fb6b 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e006      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e000      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b08a      	sub	sp, #40	; 0x28
 8004a86:	af02      	add	r7, sp, #8
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	603b      	str	r3, [r7, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	f040 808c 	bne.w	8004bbc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_UART_Receive+0x2e>
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e084      	b.n	8004bbe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_UART_Receive+0x40>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e07d      	b.n	8004bbe <HAL_UART_Receive+0x13c>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2222      	movs	r2, #34	; 0x22
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ade:	f7fd fa97 	bl	8002010 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	88fa      	ldrh	r2, [r7, #6]
 8004ae8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	88fa      	ldrh	r2, [r7, #6]
 8004aee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af8:	d108      	bne.n	8004b0c <HAL_UART_Receive+0x8a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e003      	b.n	8004b14 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b1c:	e043      	b.n	8004ba6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2120      	movs	r1, #32
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fb05 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e042      	b.n	8004bbe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10c      	bne.n	8004b58 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	3302      	adds	r3, #2
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e01f      	b.n	8004b98 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b60:	d007      	beq.n	8004b72 <HAL_UART_Receive+0xf0>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <HAL_UART_Receive+0xfe>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e008      	b.n	8004b92 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3301      	adds	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1b6      	bne.n	8004b1e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b0ba      	sub	sp, #232	; 0xe8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10f      	bne.n	8004c2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_UART_IRQHandler+0x66>
 8004c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fbd3 	bl	80053d2 <UART_Receive_IT>
      return;
 8004c2c:	e256      	b.n	80050dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80de 	beq.w	8004df4 <HAL_UART_IRQHandler+0x22c>
 8004c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80d1 	beq.w	8004df4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00b      	beq.n	8004c76 <HAL_UART_IRQHandler+0xae>
 8004c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f043 0201 	orr.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <HAL_UART_IRQHandler+0xd2>
 8004c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f043 0202 	orr.w	r2, r3, #2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_UART_IRQHandler+0xf6>
 8004ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f043 0204 	orr.w	r2, r3, #4
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d011      	beq.n	8004cee <HAL_UART_IRQHandler+0x126>
 8004cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d105      	bne.n	8004ce2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0208 	orr.w	r2, r3, #8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 81ed 	beq.w	80050d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_UART_IRQHandler+0x14e>
 8004d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fb5e 	bl	80053d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <HAL_UART_IRQHandler+0x17a>
 8004d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d04f      	beq.n	8004de2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fa66 	bl	8005214 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d141      	bne.n	8004dda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3314      	adds	r3, #20
 8004d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3314      	adds	r3, #20
 8004d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1d9      	bne.n	8004d56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d013      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	4a7d      	ldr	r2, [pc, #500]	; (8004fa4 <HAL_UART_IRQHandler+0x3dc>)
 8004db0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe faab 	bl	8003312 <HAL_DMA_Abort_IT>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d016      	beq.n	8004df0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd0:	e00e      	b.n	8004df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f99a 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	e00a      	b.n	8004df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f996 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	e006      	b.n	8004df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f992 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004dee:	e170      	b.n	80050d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df0:	bf00      	nop
    return;
 8004df2:	e16e      	b.n	80050d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	f040 814a 	bne.w	8005092 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8143 	beq.w	8005092 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 813c 	beq.w	8005092 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	f040 80b4 	bne.w	8004fa8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8140 	beq.w	80050d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	f080 8139 	bcs.w	80050d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e76:	f000 8088 	beq.w	8004f8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1d9      	bne.n	8004e7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3314      	adds	r3, #20
 8004ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e1      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3314      	adds	r3, #20
 8004f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e3      	bne.n	8004f02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f5a:	f023 0310 	bic.w	r3, r3, #16
 8004f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e3      	bne.n	8004f48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe f954 	bl	8003232 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f8c0 	bl	8005120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fa0:	e099      	b.n	80050d6 <HAL_UART_IRQHandler+0x50e>
 8004fa2:	bf00      	nop
 8004fa4:	080052db 	.word	0x080052db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 808b 	beq.w	80050da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8086 	beq.w	80050da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ff2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e3      	bne.n	8004fce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	623b      	str	r3, [r7, #32]
   return(result);
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3314      	adds	r3, #20
 8005026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800502a:	633a      	str	r2, [r7, #48]	; 0x30
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e3      	bne.n	8005006 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	330c      	adds	r3, #12
 8005052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	60fb      	str	r3, [r7, #12]
   return(result);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0310 	bic.w	r3, r3, #16
 8005062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	330c      	adds	r3, #12
 800506c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005070:	61fa      	str	r2, [r7, #28]
 8005072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	617b      	str	r3, [r7, #20]
   return(result);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e3      	bne.n	800504c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005088:	4619      	mov	r1, r3
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f848 	bl	8005120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005090:	e023      	b.n	80050da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <HAL_UART_IRQHandler+0x4ea>
 800509e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f929 	bl	8005302 <UART_Transmit_IT>
    return;
 80050b0:	e014      	b.n	80050dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00e      	beq.n	80050dc <HAL_UART_IRQHandler+0x514>
 80050be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f969 	bl	80053a2 <UART_EndTransmit_IT>
    return;
 80050d0:	e004      	b.n	80050dc <HAL_UART_IRQHandler+0x514>
    return;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <HAL_UART_IRQHandler+0x514>
      return;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <HAL_UART_IRQHandler+0x514>
      return;
 80050da:	bf00      	nop
  }
}
 80050dc:	37e8      	adds	r7, #232	; 0xe8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop

080050e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b090      	sub	sp, #64	; 0x40
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005148:	e050      	b.n	80051ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d04c      	beq.n	80051ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <UART_WaitOnFlagUntilTimeout+0x30>
 8005158:	f7fc ff5a 	bl	8002010 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005164:	429a      	cmp	r2, r3
 8005166:	d241      	bcs.n	80051ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005188:	637a      	str	r2, [r7, #52]	; 0x34
 800518a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800518e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	613b      	str	r3, [r7, #16]
   return(result);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051bc:	623a      	str	r2, [r7, #32]
 80051be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	69f9      	ldr	r1, [r7, #28]
 80051c2:	6a3a      	ldr	r2, [r7, #32]
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e00f      	b.n	800520c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4013      	ands	r3, r2
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	429a      	cmp	r2, r3
 8005208:	d09f      	beq.n	800514a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3740      	adds	r7, #64	; 0x40
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b095      	sub	sp, #84	; 0x54
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800523c:	643a      	str	r2, [r7, #64]	; 0x40
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3314      	adds	r3, #20
 800526e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005270:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	2b01      	cmp	r3, #1
 800528a:	d119      	bne.n	80052c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	60bb      	str	r3, [r7, #8]
   return(result);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f023 0310 	bic.w	r3, r3, #16
 80052a2:	647b      	str	r3, [r7, #68]	; 0x44
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ac:	61ba      	str	r2, [r7, #24]
 80052ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6979      	ldr	r1, [r7, #20]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052ce:	bf00      	nop
 80052d0:	3754      	adds	r7, #84	; 0x54
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff ff09 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b21      	cmp	r3, #33	; 0x21
 8005314:	d13e      	bne.n	8005394 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531e:	d114      	bne.n	800534a <UART_Transmit_IT+0x48>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d110      	bne.n	800534a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800533c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	1c9a      	adds	r2, r3, #2
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]
 8005348:	e008      	b.n	800535c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	1c59      	adds	r1, r3, #1
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6211      	str	r1, [r2, #32]
 8005354:	781a      	ldrb	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29b      	uxth	r3, r3
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	4619      	mov	r1, r3
 800536a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10f      	bne.n	8005390 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800537e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800538e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	e000      	b.n	8005396 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fe8e 	bl	80050e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b08c      	sub	sp, #48	; 0x30
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b22      	cmp	r3, #34	; 0x22
 80053e4:	f040 80ab 	bne.w	800553e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f0:	d117      	bne.n	8005422 <UART_Receive_IT+0x50>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d113      	bne.n	8005422 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005410:	b29a      	uxth	r2, r3
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	1c9a      	adds	r2, r3, #2
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
 8005420:	e026      	b.n	8005470 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005434:	d007      	beq.n	8005446 <UART_Receive_IT+0x74>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <UART_Receive_IT+0x82>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	b2da      	uxtb	r2, r3
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	e008      	b.n	8005466 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005460:	b2da      	uxtb	r2, r3
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29b      	uxth	r3, r3
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4619      	mov	r1, r3
 800547e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005480:	2b00      	cmp	r3, #0
 8005482:	d15a      	bne.n	800553a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0220 	bic.w	r2, r2, #32
 8005492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d135      	bne.n	8005530 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330c      	adds	r3, #12
 80054d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	613b      	str	r3, [r7, #16]
   return(result);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f023 0310 	bic.w	r3, r3, #16
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	330c      	adds	r3, #12
 80054e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ea:	623a      	str	r2, [r7, #32]
 80054ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	69f9      	ldr	r1, [r7, #28]
 80054f0:	6a3a      	ldr	r2, [r7, #32]
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e5      	bne.n	80054ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b10      	cmp	r3, #16
 800550a:	d10a      	bne.n	8005522 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fdf9 	bl	8005120 <HAL_UARTEx_RxEventCallback>
 800552e:	e002      	b.n	8005536 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fde1 	bl	80050f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	e002      	b.n	8005540 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e000      	b.n	8005540 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3730      	adds	r7, #48	; 0x30
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	b09f      	sub	sp, #124	; 0x7c
 800554e:	af00      	add	r7, sp, #0
 8005550:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800555c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555e:	68d9      	ldr	r1, [r3, #12]
 8005560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	ea40 0301 	orr.w	r3, r0, r1
 8005568:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800556a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	431a      	orrs	r2, r3
 8005574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	431a      	orrs	r2, r3
 800557a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	4313      	orrs	r3, r2
 8005580:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800558c:	f021 010c 	bic.w	r1, r1, #12
 8005590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005596:	430b      	orrs	r3, r1
 8005598:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800559a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a6:	6999      	ldr	r1, [r3, #24]
 80055a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	ea40 0301 	orr.w	r3, r0, r1
 80055b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4bc5      	ldr	r3, [pc, #788]	; (80058cc <UART_SetConfig+0x384>)
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d004      	beq.n	80055c6 <UART_SetConfig+0x7e>
 80055bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4bc3      	ldr	r3, [pc, #780]	; (80058d0 <UART_SetConfig+0x388>)
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d103      	bne.n	80055ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055c6:	f7fe fcdd 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 80055ca:	6778      	str	r0, [r7, #116]	; 0x74
 80055cc:	e002      	b.n	80055d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055ce:	f7fe fcc5 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 80055d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055dc:	f040 80b6 	bne.w	800574c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e2:	461c      	mov	r4, r3
 80055e4:	f04f 0500 	mov.w	r5, #0
 80055e8:	4622      	mov	r2, r4
 80055ea:	462b      	mov	r3, r5
 80055ec:	1891      	adds	r1, r2, r2
 80055ee:	6439      	str	r1, [r7, #64]	; 0x40
 80055f0:	415b      	adcs	r3, r3
 80055f2:	647b      	str	r3, [r7, #68]	; 0x44
 80055f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055f8:	1912      	adds	r2, r2, r4
 80055fa:	eb45 0303 	adc.w	r3, r5, r3
 80055fe:	f04f 0000 	mov.w	r0, #0
 8005602:	f04f 0100 	mov.w	r1, #0
 8005606:	00d9      	lsls	r1, r3, #3
 8005608:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800560c:	00d0      	lsls	r0, r2, #3
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	1911      	adds	r1, r2, r4
 8005614:	6639      	str	r1, [r7, #96]	; 0x60
 8005616:	416b      	adcs	r3, r5
 8005618:	667b      	str	r3, [r7, #100]	; 0x64
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	461a      	mov	r2, r3
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	1891      	adds	r1, r2, r2
 8005626:	63b9      	str	r1, [r7, #56]	; 0x38
 8005628:	415b      	adcs	r3, r3
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800562c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005630:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005634:	f7fb fa42 	bl	8000abc <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4ba5      	ldr	r3, [pc, #660]	; (80058d4 <UART_SetConfig+0x38c>)
 800563e:	fba3 2302 	umull	r2, r3, r3, r2
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	011e      	lsls	r6, r3, #4
 8005646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005648:	461c      	mov	r4, r3
 800564a:	f04f 0500 	mov.w	r5, #0
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	1891      	adds	r1, r2, r2
 8005654:	6339      	str	r1, [r7, #48]	; 0x30
 8005656:	415b      	adcs	r3, r3
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
 800565a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800565e:	1912      	adds	r2, r2, r4
 8005660:	eb45 0303 	adc.w	r3, r5, r3
 8005664:	f04f 0000 	mov.w	r0, #0
 8005668:	f04f 0100 	mov.w	r1, #0
 800566c:	00d9      	lsls	r1, r3, #3
 800566e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005672:	00d0      	lsls	r0, r2, #3
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	1911      	adds	r1, r2, r4
 800567a:	65b9      	str	r1, [r7, #88]	; 0x58
 800567c:	416b      	adcs	r3, r5
 800567e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	461a      	mov	r2, r3
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	1891      	adds	r1, r2, r2
 800568c:	62b9      	str	r1, [r7, #40]	; 0x28
 800568e:	415b      	adcs	r3, r3
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005696:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800569a:	f7fb fa0f 	bl	8000abc <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4b8c      	ldr	r3, [pc, #560]	; (80058d4 <UART_SetConfig+0x38c>)
 80056a4:	fba3 1302 	umull	r1, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	2164      	movs	r1, #100	; 0x64
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	3332      	adds	r3, #50	; 0x32
 80056b6:	4a87      	ldr	r2, [pc, #540]	; (80058d4 <UART_SetConfig+0x38c>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056c4:	441e      	add	r6, r3
 80056c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056c8:	4618      	mov	r0, r3
 80056ca:	f04f 0100 	mov.w	r1, #0
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	1894      	adds	r4, r2, r2
 80056d4:	623c      	str	r4, [r7, #32]
 80056d6:	415b      	adcs	r3, r3
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
 80056da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056de:	1812      	adds	r2, r2, r0
 80056e0:	eb41 0303 	adc.w	r3, r1, r3
 80056e4:	f04f 0400 	mov.w	r4, #0
 80056e8:	f04f 0500 	mov.w	r5, #0
 80056ec:	00dd      	lsls	r5, r3, #3
 80056ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056f2:	00d4      	lsls	r4, r2, #3
 80056f4:	4622      	mov	r2, r4
 80056f6:	462b      	mov	r3, r5
 80056f8:	1814      	adds	r4, r2, r0
 80056fa:	653c      	str	r4, [r7, #80]	; 0x50
 80056fc:	414b      	adcs	r3, r1
 80056fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	461a      	mov	r2, r3
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	1891      	adds	r1, r2, r2
 800570c:	61b9      	str	r1, [r7, #24]
 800570e:	415b      	adcs	r3, r3
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005716:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800571a:	f7fb f9cf 	bl	8000abc <__aeabi_uldivmod>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4b6c      	ldr	r3, [pc, #432]	; (80058d4 <UART_SetConfig+0x38c>)
 8005724:	fba3 1302 	umull	r1, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	3332      	adds	r3, #50	; 0x32
 8005736:	4a67      	ldr	r2, [pc, #412]	; (80058d4 <UART_SetConfig+0x38c>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f003 0207 	and.w	r2, r3, #7
 8005742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4432      	add	r2, r6
 8005748:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800574a:	e0b9      	b.n	80058c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800574c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800574e:	461c      	mov	r4, r3
 8005750:	f04f 0500 	mov.w	r5, #0
 8005754:	4622      	mov	r2, r4
 8005756:	462b      	mov	r3, r5
 8005758:	1891      	adds	r1, r2, r2
 800575a:	6139      	str	r1, [r7, #16]
 800575c:	415b      	adcs	r3, r3
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005764:	1912      	adds	r2, r2, r4
 8005766:	eb45 0303 	adc.w	r3, r5, r3
 800576a:	f04f 0000 	mov.w	r0, #0
 800576e:	f04f 0100 	mov.w	r1, #0
 8005772:	00d9      	lsls	r1, r3, #3
 8005774:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005778:	00d0      	lsls	r0, r2, #3
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	eb12 0804 	adds.w	r8, r2, r4
 8005782:	eb43 0905 	adc.w	r9, r3, r5
 8005786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4618      	mov	r0, r3
 800578c:	f04f 0100 	mov.w	r1, #0
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	008b      	lsls	r3, r1, #2
 800579a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800579e:	0082      	lsls	r2, r0, #2
 80057a0:	4640      	mov	r0, r8
 80057a2:	4649      	mov	r1, r9
 80057a4:	f7fb f98a 	bl	8000abc <__aeabi_uldivmod>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4b49      	ldr	r3, [pc, #292]	; (80058d4 <UART_SetConfig+0x38c>)
 80057ae:	fba3 2302 	umull	r2, r3, r3, r2
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	011e      	lsls	r6, r3, #4
 80057b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b8:	4618      	mov	r0, r3
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	1894      	adds	r4, r2, r2
 80057c4:	60bc      	str	r4, [r7, #8]
 80057c6:	415b      	adcs	r3, r3
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057ce:	1812      	adds	r2, r2, r0
 80057d0:	eb41 0303 	adc.w	r3, r1, r3
 80057d4:	f04f 0400 	mov.w	r4, #0
 80057d8:	f04f 0500 	mov.w	r5, #0
 80057dc:	00dd      	lsls	r5, r3, #3
 80057de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057e2:	00d4      	lsls	r4, r2, #3
 80057e4:	4622      	mov	r2, r4
 80057e6:	462b      	mov	r3, r5
 80057e8:	1814      	adds	r4, r2, r0
 80057ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80057ec:	414b      	adcs	r3, r1
 80057ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f04f 0100 	mov.w	r1, #0
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	008b      	lsls	r3, r1, #2
 8005804:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005808:	0082      	lsls	r2, r0, #2
 800580a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800580e:	f7fb f955 	bl	8000abc <__aeabi_uldivmod>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4b2f      	ldr	r3, [pc, #188]	; (80058d4 <UART_SetConfig+0x38c>)
 8005818:	fba3 1302 	umull	r1, r3, r3, r2
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	2164      	movs	r1, #100	; 0x64
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	3332      	adds	r3, #50	; 0x32
 800582a:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <UART_SetConfig+0x38c>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005836:	441e      	add	r6, r3
 8005838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583a:	4618      	mov	r0, r3
 800583c:	f04f 0100 	mov.w	r1, #0
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	1894      	adds	r4, r2, r2
 8005846:	603c      	str	r4, [r7, #0]
 8005848:	415b      	adcs	r3, r3
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005850:	1812      	adds	r2, r2, r0
 8005852:	eb41 0303 	adc.w	r3, r1, r3
 8005856:	f04f 0400 	mov.w	r4, #0
 800585a:	f04f 0500 	mov.w	r5, #0
 800585e:	00dd      	lsls	r5, r3, #3
 8005860:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005864:	00d4      	lsls	r4, r2, #3
 8005866:	4622      	mov	r2, r4
 8005868:	462b      	mov	r3, r5
 800586a:	eb12 0a00 	adds.w	sl, r2, r0
 800586e:	eb43 0b01 	adc.w	fp, r3, r1
 8005872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	4618      	mov	r0, r3
 8005878:	f04f 0100 	mov.w	r1, #0
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	008b      	lsls	r3, r1, #2
 8005886:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800588a:	0082      	lsls	r2, r0, #2
 800588c:	4650      	mov	r0, sl
 800588e:	4659      	mov	r1, fp
 8005890:	f7fb f914 	bl	8000abc <__aeabi_uldivmod>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4b0e      	ldr	r3, [pc, #56]	; (80058d4 <UART_SetConfig+0x38c>)
 800589a:	fba3 1302 	umull	r1, r3, r3, r2
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2164      	movs	r1, #100	; 0x64
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	3332      	adds	r3, #50	; 0x32
 80058ac:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <UART_SetConfig+0x38c>)
 80058ae:	fba2 2303 	umull	r2, r3, r2, r3
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	f003 020f 	and.w	r2, r3, #15
 80058b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4432      	add	r2, r6
 80058be:	609a      	str	r2, [r3, #8]
}
 80058c0:	bf00      	nop
 80058c2:	377c      	adds	r7, #124	; 0x7c
 80058c4:	46bd      	mov	sp, r7
 80058c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ca:	bf00      	nop
 80058cc:	40011000 	.word	0x40011000
 80058d0:	40011400 	.word	0x40011400
 80058d4:	51eb851f 	.word	0x51eb851f

080058d8 <__errno>:
 80058d8:	4b01      	ldr	r3, [pc, #4]	; (80058e0 <__errno+0x8>)
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000010 	.word	0x20000010

080058e4 <__libc_init_array>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	4d0d      	ldr	r5, [pc, #52]	; (800591c <__libc_init_array+0x38>)
 80058e8:	4c0d      	ldr	r4, [pc, #52]	; (8005920 <__libc_init_array+0x3c>)
 80058ea:	1b64      	subs	r4, r4, r5
 80058ec:	10a4      	asrs	r4, r4, #2
 80058ee:	2600      	movs	r6, #0
 80058f0:	42a6      	cmp	r6, r4
 80058f2:	d109      	bne.n	8005908 <__libc_init_array+0x24>
 80058f4:	4d0b      	ldr	r5, [pc, #44]	; (8005924 <__libc_init_array+0x40>)
 80058f6:	4c0c      	ldr	r4, [pc, #48]	; (8005928 <__libc_init_array+0x44>)
 80058f8:	f001 f9f4 	bl	8006ce4 <_init>
 80058fc:	1b64      	subs	r4, r4, r5
 80058fe:	10a4      	asrs	r4, r4, #2
 8005900:	2600      	movs	r6, #0
 8005902:	42a6      	cmp	r6, r4
 8005904:	d105      	bne.n	8005912 <__libc_init_array+0x2e>
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	f855 3b04 	ldr.w	r3, [r5], #4
 800590c:	4798      	blx	r3
 800590e:	3601      	adds	r6, #1
 8005910:	e7ee      	b.n	80058f0 <__libc_init_array+0xc>
 8005912:	f855 3b04 	ldr.w	r3, [r5], #4
 8005916:	4798      	blx	r3
 8005918:	3601      	adds	r6, #1
 800591a:	e7f2      	b.n	8005902 <__libc_init_array+0x1e>
 800591c:	08006fcc 	.word	0x08006fcc
 8005920:	08006fcc 	.word	0x08006fcc
 8005924:	08006fcc 	.word	0x08006fcc
 8005928:	08006fd0 	.word	0x08006fd0

0800592c <memset>:
 800592c:	4402      	add	r2, r0
 800592e:	4603      	mov	r3, r0
 8005930:	4293      	cmp	r3, r2
 8005932:	d100      	bne.n	8005936 <memset+0xa>
 8005934:	4770      	bx	lr
 8005936:	f803 1b01 	strb.w	r1, [r3], #1
 800593a:	e7f9      	b.n	8005930 <memset+0x4>

0800593c <rand>:
 800593c:	4b17      	ldr	r3, [pc, #92]	; (800599c <rand+0x60>)
 800593e:	b510      	push	{r4, lr}
 8005940:	681c      	ldr	r4, [r3, #0]
 8005942:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005944:	b9b3      	cbnz	r3, 8005974 <rand+0x38>
 8005946:	2018      	movs	r0, #24
 8005948:	f000 f888 	bl	8005a5c <malloc>
 800594c:	63a0      	str	r0, [r4, #56]	; 0x38
 800594e:	b928      	cbnz	r0, 800595c <rand+0x20>
 8005950:	4602      	mov	r2, r0
 8005952:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <rand+0x64>)
 8005954:	4813      	ldr	r0, [pc, #76]	; (80059a4 <rand+0x68>)
 8005956:	214e      	movs	r1, #78	; 0x4e
 8005958:	f000 f850 	bl	80059fc <__assert_func>
 800595c:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <rand+0x6c>)
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <rand+0x70>)
 8005960:	e9c0 2300 	strd	r2, r3, [r0]
 8005964:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <rand+0x74>)
 8005966:	6083      	str	r3, [r0, #8]
 8005968:	230b      	movs	r3, #11
 800596a:	8183      	strh	r3, [r0, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	2300      	movs	r3, #0
 8005970:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005974:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005976:	480f      	ldr	r0, [pc, #60]	; (80059b4 <rand+0x78>)
 8005978:	690a      	ldr	r2, [r1, #16]
 800597a:	694b      	ldr	r3, [r1, #20]
 800597c:	4c0e      	ldr	r4, [pc, #56]	; (80059b8 <rand+0x7c>)
 800597e:	4350      	muls	r0, r2
 8005980:	fb04 0003 	mla	r0, r4, r3, r0
 8005984:	fba2 3404 	umull	r3, r4, r2, r4
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	4404      	add	r4, r0
 800598c:	f144 0000 	adc.w	r0, r4, #0
 8005990:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8005994:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005998:	bd10      	pop	{r4, pc}
 800599a:	bf00      	nop
 800599c:	20000010 	.word	0x20000010
 80059a0:	08006e7c 	.word	0x08006e7c
 80059a4:	08006e93 	.word	0x08006e93
 80059a8:	abcd330e 	.word	0xabcd330e
 80059ac:	e66d1234 	.word	0xe66d1234
 80059b0:	0005deec 	.word	0x0005deec
 80059b4:	5851f42d 	.word	0x5851f42d
 80059b8:	4c957f2d 	.word	0x4c957f2d

080059bc <siprintf>:
 80059bc:	b40e      	push	{r1, r2, r3}
 80059be:	b500      	push	{lr}
 80059c0:	b09c      	sub	sp, #112	; 0x70
 80059c2:	ab1d      	add	r3, sp, #116	; 0x74
 80059c4:	9002      	str	r0, [sp, #8]
 80059c6:	9006      	str	r0, [sp, #24]
 80059c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059cc:	4809      	ldr	r0, [pc, #36]	; (80059f4 <siprintf+0x38>)
 80059ce:	9107      	str	r1, [sp, #28]
 80059d0:	9104      	str	r1, [sp, #16]
 80059d2:	4909      	ldr	r1, [pc, #36]	; (80059f8 <siprintf+0x3c>)
 80059d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80059d8:	9105      	str	r1, [sp, #20]
 80059da:	6800      	ldr	r0, [r0, #0]
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	a902      	add	r1, sp, #8
 80059e0:	f000 f94a 	bl	8005c78 <_svfiprintf_r>
 80059e4:	9b02      	ldr	r3, [sp, #8]
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	b01c      	add	sp, #112	; 0x70
 80059ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80059f0:	b003      	add	sp, #12
 80059f2:	4770      	bx	lr
 80059f4:	20000010 	.word	0x20000010
 80059f8:	ffff0208 	.word	0xffff0208

080059fc <__assert_func>:
 80059fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059fe:	4614      	mov	r4, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <__assert_func+0x2c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4605      	mov	r5, r0
 8005a08:	68d8      	ldr	r0, [r3, #12]
 8005a0a:	b14c      	cbz	r4, 8005a20 <__assert_func+0x24>
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <__assert_func+0x30>)
 8005a0e:	9100      	str	r1, [sp, #0]
 8005a10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a14:	4906      	ldr	r1, [pc, #24]	; (8005a30 <__assert_func+0x34>)
 8005a16:	462b      	mov	r3, r5
 8005a18:	f000 f80e 	bl	8005a38 <fiprintf>
 8005a1c:	f000 fdea 	bl	80065f4 <abort>
 8005a20:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <__assert_func+0x38>)
 8005a22:	461c      	mov	r4, r3
 8005a24:	e7f3      	b.n	8005a0e <__assert_func+0x12>
 8005a26:	bf00      	nop
 8005a28:	20000010 	.word	0x20000010
 8005a2c:	08006ef2 	.word	0x08006ef2
 8005a30:	08006eff 	.word	0x08006eff
 8005a34:	08006f2d 	.word	0x08006f2d

08005a38 <fiprintf>:
 8005a38:	b40e      	push	{r1, r2, r3}
 8005a3a:	b503      	push	{r0, r1, lr}
 8005a3c:	4601      	mov	r1, r0
 8005a3e:	ab03      	add	r3, sp, #12
 8005a40:	4805      	ldr	r0, [pc, #20]	; (8005a58 <fiprintf+0x20>)
 8005a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a46:	6800      	ldr	r0, [r0, #0]
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	f000 fa3f 	bl	8005ecc <_vfiprintf_r>
 8005a4e:	b002      	add	sp, #8
 8005a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a54:	b003      	add	sp, #12
 8005a56:	4770      	bx	lr
 8005a58:	20000010 	.word	0x20000010

08005a5c <malloc>:
 8005a5c:	4b02      	ldr	r3, [pc, #8]	; (8005a68 <malloc+0xc>)
 8005a5e:	4601      	mov	r1, r0
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	f000 b853 	b.w	8005b0c <_malloc_r>
 8005a66:	bf00      	nop
 8005a68:	20000010 	.word	0x20000010

08005a6c <_free_r>:
 8005a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a6e:	2900      	cmp	r1, #0
 8005a70:	d048      	beq.n	8005b04 <_free_r+0x98>
 8005a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a76:	9001      	str	r0, [sp, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a7e:	bfb8      	it	lt
 8005a80:	18e4      	addlt	r4, r4, r3
 8005a82:	f001 f805 	bl	8006a90 <__malloc_lock>
 8005a86:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <_free_r+0x9c>)
 8005a88:	9801      	ldr	r0, [sp, #4]
 8005a8a:	6813      	ldr	r3, [r2, #0]
 8005a8c:	4615      	mov	r5, r2
 8005a8e:	b933      	cbnz	r3, 8005a9e <_free_r+0x32>
 8005a90:	6063      	str	r3, [r4, #4]
 8005a92:	6014      	str	r4, [r2, #0]
 8005a94:	b003      	add	sp, #12
 8005a96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a9a:	f000 bfff 	b.w	8006a9c <__malloc_unlock>
 8005a9e:	42a3      	cmp	r3, r4
 8005aa0:	d90b      	bls.n	8005aba <_free_r+0x4e>
 8005aa2:	6821      	ldr	r1, [r4, #0]
 8005aa4:	1862      	adds	r2, r4, r1
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	bf04      	itt	eq
 8005aaa:	681a      	ldreq	r2, [r3, #0]
 8005aac:	685b      	ldreq	r3, [r3, #4]
 8005aae:	6063      	str	r3, [r4, #4]
 8005ab0:	bf04      	itt	eq
 8005ab2:	1852      	addeq	r2, r2, r1
 8005ab4:	6022      	streq	r2, [r4, #0]
 8005ab6:	602c      	str	r4, [r5, #0]
 8005ab8:	e7ec      	b.n	8005a94 <_free_r+0x28>
 8005aba:	461a      	mov	r2, r3
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	b10b      	cbz	r3, 8005ac4 <_free_r+0x58>
 8005ac0:	42a3      	cmp	r3, r4
 8005ac2:	d9fa      	bls.n	8005aba <_free_r+0x4e>
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	1855      	adds	r5, r2, r1
 8005ac8:	42a5      	cmp	r5, r4
 8005aca:	d10b      	bne.n	8005ae4 <_free_r+0x78>
 8005acc:	6824      	ldr	r4, [r4, #0]
 8005ace:	4421      	add	r1, r4
 8005ad0:	1854      	adds	r4, r2, r1
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	6011      	str	r1, [r2, #0]
 8005ad6:	d1dd      	bne.n	8005a94 <_free_r+0x28>
 8005ad8:	681c      	ldr	r4, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	6053      	str	r3, [r2, #4]
 8005ade:	4421      	add	r1, r4
 8005ae0:	6011      	str	r1, [r2, #0]
 8005ae2:	e7d7      	b.n	8005a94 <_free_r+0x28>
 8005ae4:	d902      	bls.n	8005aec <_free_r+0x80>
 8005ae6:	230c      	movs	r3, #12
 8005ae8:	6003      	str	r3, [r0, #0]
 8005aea:	e7d3      	b.n	8005a94 <_free_r+0x28>
 8005aec:	6825      	ldr	r5, [r4, #0]
 8005aee:	1961      	adds	r1, r4, r5
 8005af0:	428b      	cmp	r3, r1
 8005af2:	bf04      	itt	eq
 8005af4:	6819      	ldreq	r1, [r3, #0]
 8005af6:	685b      	ldreq	r3, [r3, #4]
 8005af8:	6063      	str	r3, [r4, #4]
 8005afa:	bf04      	itt	eq
 8005afc:	1949      	addeq	r1, r1, r5
 8005afe:	6021      	streq	r1, [r4, #0]
 8005b00:	6054      	str	r4, [r2, #4]
 8005b02:	e7c7      	b.n	8005a94 <_free_r+0x28>
 8005b04:	b003      	add	sp, #12
 8005b06:	bd30      	pop	{r4, r5, pc}
 8005b08:	200000a4 	.word	0x200000a4

08005b0c <_malloc_r>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	1ccd      	adds	r5, r1, #3
 8005b10:	f025 0503 	bic.w	r5, r5, #3
 8005b14:	3508      	adds	r5, #8
 8005b16:	2d0c      	cmp	r5, #12
 8005b18:	bf38      	it	cc
 8005b1a:	250c      	movcc	r5, #12
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	4606      	mov	r6, r0
 8005b20:	db01      	blt.n	8005b26 <_malloc_r+0x1a>
 8005b22:	42a9      	cmp	r1, r5
 8005b24:	d903      	bls.n	8005b2e <_malloc_r+0x22>
 8005b26:	230c      	movs	r3, #12
 8005b28:	6033      	str	r3, [r6, #0]
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b2e:	f000 ffaf 	bl	8006a90 <__malloc_lock>
 8005b32:	4921      	ldr	r1, [pc, #132]	; (8005bb8 <_malloc_r+0xac>)
 8005b34:	680a      	ldr	r2, [r1, #0]
 8005b36:	4614      	mov	r4, r2
 8005b38:	b99c      	cbnz	r4, 8005b62 <_malloc_r+0x56>
 8005b3a:	4f20      	ldr	r7, [pc, #128]	; (8005bbc <_malloc_r+0xb0>)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	b923      	cbnz	r3, 8005b4a <_malloc_r+0x3e>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4630      	mov	r0, r6
 8005b44:	f000 fc86 	bl	8006454 <_sbrk_r>
 8005b48:	6038      	str	r0, [r7, #0]
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 fc81 	bl	8006454 <_sbrk_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d123      	bne.n	8005b9e <_malloc_r+0x92>
 8005b56:	230c      	movs	r3, #12
 8005b58:	6033      	str	r3, [r6, #0]
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f000 ff9e 	bl	8006a9c <__malloc_unlock>
 8005b60:	e7e3      	b.n	8005b2a <_malloc_r+0x1e>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	1b5b      	subs	r3, r3, r5
 8005b66:	d417      	bmi.n	8005b98 <_malloc_r+0x8c>
 8005b68:	2b0b      	cmp	r3, #11
 8005b6a:	d903      	bls.n	8005b74 <_malloc_r+0x68>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	441c      	add	r4, r3
 8005b70:	6025      	str	r5, [r4, #0]
 8005b72:	e004      	b.n	8005b7e <_malloc_r+0x72>
 8005b74:	6863      	ldr	r3, [r4, #4]
 8005b76:	42a2      	cmp	r2, r4
 8005b78:	bf0c      	ite	eq
 8005b7a:	600b      	streq	r3, [r1, #0]
 8005b7c:	6053      	strne	r3, [r2, #4]
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f000 ff8c 	bl	8006a9c <__malloc_unlock>
 8005b84:	f104 000b 	add.w	r0, r4, #11
 8005b88:	1d23      	adds	r3, r4, #4
 8005b8a:	f020 0007 	bic.w	r0, r0, #7
 8005b8e:	1ac2      	subs	r2, r0, r3
 8005b90:	d0cc      	beq.n	8005b2c <_malloc_r+0x20>
 8005b92:	1a1b      	subs	r3, r3, r0
 8005b94:	50a3      	str	r3, [r4, r2]
 8005b96:	e7c9      	b.n	8005b2c <_malloc_r+0x20>
 8005b98:	4622      	mov	r2, r4
 8005b9a:	6864      	ldr	r4, [r4, #4]
 8005b9c:	e7cc      	b.n	8005b38 <_malloc_r+0x2c>
 8005b9e:	1cc4      	adds	r4, r0, #3
 8005ba0:	f024 0403 	bic.w	r4, r4, #3
 8005ba4:	42a0      	cmp	r0, r4
 8005ba6:	d0e3      	beq.n	8005b70 <_malloc_r+0x64>
 8005ba8:	1a21      	subs	r1, r4, r0
 8005baa:	4630      	mov	r0, r6
 8005bac:	f000 fc52 	bl	8006454 <_sbrk_r>
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d1dd      	bne.n	8005b70 <_malloc_r+0x64>
 8005bb4:	e7cf      	b.n	8005b56 <_malloc_r+0x4a>
 8005bb6:	bf00      	nop
 8005bb8:	200000a4 	.word	0x200000a4
 8005bbc:	200000a8 	.word	0x200000a8

08005bc0 <__ssputs_r>:
 8005bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	688e      	ldr	r6, [r1, #8]
 8005bc6:	429e      	cmp	r6, r3
 8005bc8:	4682      	mov	sl, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	4690      	mov	r8, r2
 8005bce:	461f      	mov	r7, r3
 8005bd0:	d838      	bhi.n	8005c44 <__ssputs_r+0x84>
 8005bd2:	898a      	ldrh	r2, [r1, #12]
 8005bd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bd8:	d032      	beq.n	8005c40 <__ssputs_r+0x80>
 8005bda:	6825      	ldr	r5, [r4, #0]
 8005bdc:	6909      	ldr	r1, [r1, #16]
 8005bde:	eba5 0901 	sub.w	r9, r5, r1
 8005be2:	6965      	ldr	r5, [r4, #20]
 8005be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005be8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bec:	3301      	adds	r3, #1
 8005bee:	444b      	add	r3, r9
 8005bf0:	106d      	asrs	r5, r5, #1
 8005bf2:	429d      	cmp	r5, r3
 8005bf4:	bf38      	it	cc
 8005bf6:	461d      	movcc	r5, r3
 8005bf8:	0553      	lsls	r3, r2, #21
 8005bfa:	d531      	bpl.n	8005c60 <__ssputs_r+0xa0>
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	f7ff ff85 	bl	8005b0c <_malloc_r>
 8005c02:	4606      	mov	r6, r0
 8005c04:	b950      	cbnz	r0, 8005c1c <__ssputs_r+0x5c>
 8005c06:	230c      	movs	r3, #12
 8005c08:	f8ca 3000 	str.w	r3, [sl]
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c12:	81a3      	strh	r3, [r4, #12]
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295
 8005c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1c:	6921      	ldr	r1, [r4, #16]
 8005c1e:	464a      	mov	r2, r9
 8005c20:	f000 ff0e 	bl	8006a40 <memcpy>
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2e:	81a3      	strh	r3, [r4, #12]
 8005c30:	6126      	str	r6, [r4, #16]
 8005c32:	6165      	str	r5, [r4, #20]
 8005c34:	444e      	add	r6, r9
 8005c36:	eba5 0509 	sub.w	r5, r5, r9
 8005c3a:	6026      	str	r6, [r4, #0]
 8005c3c:	60a5      	str	r5, [r4, #8]
 8005c3e:	463e      	mov	r6, r7
 8005c40:	42be      	cmp	r6, r7
 8005c42:	d900      	bls.n	8005c46 <__ssputs_r+0x86>
 8005c44:	463e      	mov	r6, r7
 8005c46:	4632      	mov	r2, r6
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	4641      	mov	r1, r8
 8005c4c:	f000 ff06 	bl	8006a5c <memmove>
 8005c50:	68a3      	ldr	r3, [r4, #8]
 8005c52:	6822      	ldr	r2, [r4, #0]
 8005c54:	1b9b      	subs	r3, r3, r6
 8005c56:	4432      	add	r2, r6
 8005c58:	60a3      	str	r3, [r4, #8]
 8005c5a:	6022      	str	r2, [r4, #0]
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e7db      	b.n	8005c18 <__ssputs_r+0x58>
 8005c60:	462a      	mov	r2, r5
 8005c62:	f000 ff21 	bl	8006aa8 <_realloc_r>
 8005c66:	4606      	mov	r6, r0
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d1e1      	bne.n	8005c30 <__ssputs_r+0x70>
 8005c6c:	6921      	ldr	r1, [r4, #16]
 8005c6e:	4650      	mov	r0, sl
 8005c70:	f7ff fefc 	bl	8005a6c <_free_r>
 8005c74:	e7c7      	b.n	8005c06 <__ssputs_r+0x46>
	...

08005c78 <_svfiprintf_r>:
 8005c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7c:	4698      	mov	r8, r3
 8005c7e:	898b      	ldrh	r3, [r1, #12]
 8005c80:	061b      	lsls	r3, r3, #24
 8005c82:	b09d      	sub	sp, #116	; 0x74
 8005c84:	4607      	mov	r7, r0
 8005c86:	460d      	mov	r5, r1
 8005c88:	4614      	mov	r4, r2
 8005c8a:	d50e      	bpl.n	8005caa <_svfiprintf_r+0x32>
 8005c8c:	690b      	ldr	r3, [r1, #16]
 8005c8e:	b963      	cbnz	r3, 8005caa <_svfiprintf_r+0x32>
 8005c90:	2140      	movs	r1, #64	; 0x40
 8005c92:	f7ff ff3b 	bl	8005b0c <_malloc_r>
 8005c96:	6028      	str	r0, [r5, #0]
 8005c98:	6128      	str	r0, [r5, #16]
 8005c9a:	b920      	cbnz	r0, 8005ca6 <_svfiprintf_r+0x2e>
 8005c9c:	230c      	movs	r3, #12
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca4:	e0d1      	b.n	8005e4a <_svfiprintf_r+0x1d2>
 8005ca6:	2340      	movs	r3, #64	; 0x40
 8005ca8:	616b      	str	r3, [r5, #20]
 8005caa:	2300      	movs	r3, #0
 8005cac:	9309      	str	r3, [sp, #36]	; 0x24
 8005cae:	2320      	movs	r3, #32
 8005cb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cb8:	2330      	movs	r3, #48	; 0x30
 8005cba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e64 <_svfiprintf_r+0x1ec>
 8005cbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cc2:	f04f 0901 	mov.w	r9, #1
 8005cc6:	4623      	mov	r3, r4
 8005cc8:	469a      	mov	sl, r3
 8005cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cce:	b10a      	cbz	r2, 8005cd4 <_svfiprintf_r+0x5c>
 8005cd0:	2a25      	cmp	r2, #37	; 0x25
 8005cd2:	d1f9      	bne.n	8005cc8 <_svfiprintf_r+0x50>
 8005cd4:	ebba 0b04 	subs.w	fp, sl, r4
 8005cd8:	d00b      	beq.n	8005cf2 <_svfiprintf_r+0x7a>
 8005cda:	465b      	mov	r3, fp
 8005cdc:	4622      	mov	r2, r4
 8005cde:	4629      	mov	r1, r5
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7ff ff6d 	bl	8005bc0 <__ssputs_r>
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f000 80aa 	beq.w	8005e40 <_svfiprintf_r+0x1c8>
 8005cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cee:	445a      	add	r2, fp
 8005cf0:	9209      	str	r2, [sp, #36]	; 0x24
 8005cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 80a2 	beq.w	8005e40 <_svfiprintf_r+0x1c8>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005d02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d06:	f10a 0a01 	add.w	sl, sl, #1
 8005d0a:	9304      	str	r3, [sp, #16]
 8005d0c:	9307      	str	r3, [sp, #28]
 8005d0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d12:	931a      	str	r3, [sp, #104]	; 0x68
 8005d14:	4654      	mov	r4, sl
 8005d16:	2205      	movs	r2, #5
 8005d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1c:	4851      	ldr	r0, [pc, #324]	; (8005e64 <_svfiprintf_r+0x1ec>)
 8005d1e:	f7fa fa5f 	bl	80001e0 <memchr>
 8005d22:	9a04      	ldr	r2, [sp, #16]
 8005d24:	b9d8      	cbnz	r0, 8005d5e <_svfiprintf_r+0xe6>
 8005d26:	06d0      	lsls	r0, r2, #27
 8005d28:	bf44      	itt	mi
 8005d2a:	2320      	movmi	r3, #32
 8005d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d30:	0711      	lsls	r1, r2, #28
 8005d32:	bf44      	itt	mi
 8005d34:	232b      	movmi	r3, #43	; 0x2b
 8005d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d40:	d015      	beq.n	8005d6e <_svfiprintf_r+0xf6>
 8005d42:	9a07      	ldr	r2, [sp, #28]
 8005d44:	4654      	mov	r4, sl
 8005d46:	2000      	movs	r0, #0
 8005d48:	f04f 0c0a 	mov.w	ip, #10
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d52:	3b30      	subs	r3, #48	; 0x30
 8005d54:	2b09      	cmp	r3, #9
 8005d56:	d94e      	bls.n	8005df6 <_svfiprintf_r+0x17e>
 8005d58:	b1b0      	cbz	r0, 8005d88 <_svfiprintf_r+0x110>
 8005d5a:	9207      	str	r2, [sp, #28]
 8005d5c:	e014      	b.n	8005d88 <_svfiprintf_r+0x110>
 8005d5e:	eba0 0308 	sub.w	r3, r0, r8
 8005d62:	fa09 f303 	lsl.w	r3, r9, r3
 8005d66:	4313      	orrs	r3, r2
 8005d68:	9304      	str	r3, [sp, #16]
 8005d6a:	46a2      	mov	sl, r4
 8005d6c:	e7d2      	b.n	8005d14 <_svfiprintf_r+0x9c>
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	1d19      	adds	r1, r3, #4
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	9103      	str	r1, [sp, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfbb      	ittet	lt
 8005d7a:	425b      	neglt	r3, r3
 8005d7c:	f042 0202 	orrlt.w	r2, r2, #2
 8005d80:	9307      	strge	r3, [sp, #28]
 8005d82:	9307      	strlt	r3, [sp, #28]
 8005d84:	bfb8      	it	lt
 8005d86:	9204      	strlt	r2, [sp, #16]
 8005d88:	7823      	ldrb	r3, [r4, #0]
 8005d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8005d8c:	d10c      	bne.n	8005da8 <_svfiprintf_r+0x130>
 8005d8e:	7863      	ldrb	r3, [r4, #1]
 8005d90:	2b2a      	cmp	r3, #42	; 0x2a
 8005d92:	d135      	bne.n	8005e00 <_svfiprintf_r+0x188>
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	1d1a      	adds	r2, r3, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	9203      	str	r2, [sp, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bfb8      	it	lt
 8005da0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005da4:	3402      	adds	r4, #2
 8005da6:	9305      	str	r3, [sp, #20]
 8005da8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e74 <_svfiprintf_r+0x1fc>
 8005dac:	7821      	ldrb	r1, [r4, #0]
 8005dae:	2203      	movs	r2, #3
 8005db0:	4650      	mov	r0, sl
 8005db2:	f7fa fa15 	bl	80001e0 <memchr>
 8005db6:	b140      	cbz	r0, 8005dca <_svfiprintf_r+0x152>
 8005db8:	2340      	movs	r3, #64	; 0x40
 8005dba:	eba0 000a 	sub.w	r0, r0, sl
 8005dbe:	fa03 f000 	lsl.w	r0, r3, r0
 8005dc2:	9b04      	ldr	r3, [sp, #16]
 8005dc4:	4303      	orrs	r3, r0
 8005dc6:	3401      	adds	r4, #1
 8005dc8:	9304      	str	r3, [sp, #16]
 8005dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dce:	4826      	ldr	r0, [pc, #152]	; (8005e68 <_svfiprintf_r+0x1f0>)
 8005dd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dd4:	2206      	movs	r2, #6
 8005dd6:	f7fa fa03 	bl	80001e0 <memchr>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d038      	beq.n	8005e50 <_svfiprintf_r+0x1d8>
 8005dde:	4b23      	ldr	r3, [pc, #140]	; (8005e6c <_svfiprintf_r+0x1f4>)
 8005de0:	bb1b      	cbnz	r3, 8005e2a <_svfiprintf_r+0x1b2>
 8005de2:	9b03      	ldr	r3, [sp, #12]
 8005de4:	3307      	adds	r3, #7
 8005de6:	f023 0307 	bic.w	r3, r3, #7
 8005dea:	3308      	adds	r3, #8
 8005dec:	9303      	str	r3, [sp, #12]
 8005dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df0:	4433      	add	r3, r6
 8005df2:	9309      	str	r3, [sp, #36]	; 0x24
 8005df4:	e767      	b.n	8005cc6 <_svfiprintf_r+0x4e>
 8005df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	e7a5      	b.n	8005d4c <_svfiprintf_r+0xd4>
 8005e00:	2300      	movs	r3, #0
 8005e02:	3401      	adds	r4, #1
 8005e04:	9305      	str	r3, [sp, #20]
 8005e06:	4619      	mov	r1, r3
 8005e08:	f04f 0c0a 	mov.w	ip, #10
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e12:	3a30      	subs	r2, #48	; 0x30
 8005e14:	2a09      	cmp	r2, #9
 8005e16:	d903      	bls.n	8005e20 <_svfiprintf_r+0x1a8>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0c5      	beq.n	8005da8 <_svfiprintf_r+0x130>
 8005e1c:	9105      	str	r1, [sp, #20]
 8005e1e:	e7c3      	b.n	8005da8 <_svfiprintf_r+0x130>
 8005e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e24:	4604      	mov	r4, r0
 8005e26:	2301      	movs	r3, #1
 8005e28:	e7f0      	b.n	8005e0c <_svfiprintf_r+0x194>
 8005e2a:	ab03      	add	r3, sp, #12
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	462a      	mov	r2, r5
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <_svfiprintf_r+0x1f8>)
 8005e32:	a904      	add	r1, sp, #16
 8005e34:	4638      	mov	r0, r7
 8005e36:	f3af 8000 	nop.w
 8005e3a:	1c42      	adds	r2, r0, #1
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	d1d6      	bne.n	8005dee <_svfiprintf_r+0x176>
 8005e40:	89ab      	ldrh	r3, [r5, #12]
 8005e42:	065b      	lsls	r3, r3, #25
 8005e44:	f53f af2c 	bmi.w	8005ca0 <_svfiprintf_r+0x28>
 8005e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e4a:	b01d      	add	sp, #116	; 0x74
 8005e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e50:	ab03      	add	r3, sp, #12
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	462a      	mov	r2, r5
 8005e56:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <_svfiprintf_r+0x1f8>)
 8005e58:	a904      	add	r1, sp, #16
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	f000 f9d4 	bl	8006208 <_printf_i>
 8005e60:	e7eb      	b.n	8005e3a <_svfiprintf_r+0x1c2>
 8005e62:	bf00      	nop
 8005e64:	08006f2e 	.word	0x08006f2e
 8005e68:	08006f38 	.word	0x08006f38
 8005e6c:	00000000 	.word	0x00000000
 8005e70:	08005bc1 	.word	0x08005bc1
 8005e74:	08006f34 	.word	0x08006f34

08005e78 <__sfputc_r>:
 8005e78:	6893      	ldr	r3, [r2, #8]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	b410      	push	{r4}
 8005e80:	6093      	str	r3, [r2, #8]
 8005e82:	da08      	bge.n	8005e96 <__sfputc_r+0x1e>
 8005e84:	6994      	ldr	r4, [r2, #24]
 8005e86:	42a3      	cmp	r3, r4
 8005e88:	db01      	blt.n	8005e8e <__sfputc_r+0x16>
 8005e8a:	290a      	cmp	r1, #10
 8005e8c:	d103      	bne.n	8005e96 <__sfputc_r+0x1e>
 8005e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e92:	f000 baef 	b.w	8006474 <__swbuf_r>
 8005e96:	6813      	ldr	r3, [r2, #0]
 8005e98:	1c58      	adds	r0, r3, #1
 8005e9a:	6010      	str	r0, [r2, #0]
 8005e9c:	7019      	strb	r1, [r3, #0]
 8005e9e:	4608      	mov	r0, r1
 8005ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <__sfputs_r>:
 8005ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	460f      	mov	r7, r1
 8005eac:	4614      	mov	r4, r2
 8005eae:	18d5      	adds	r5, r2, r3
 8005eb0:	42ac      	cmp	r4, r5
 8005eb2:	d101      	bne.n	8005eb8 <__sfputs_r+0x12>
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	e007      	b.n	8005ec8 <__sfputs_r+0x22>
 8005eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ebc:	463a      	mov	r2, r7
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f7ff ffda 	bl	8005e78 <__sfputc_r>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d1f3      	bne.n	8005eb0 <__sfputs_r+0xa>
 8005ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ecc <_vfiprintf_r>:
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	460d      	mov	r5, r1
 8005ed2:	b09d      	sub	sp, #116	; 0x74
 8005ed4:	4614      	mov	r4, r2
 8005ed6:	4698      	mov	r8, r3
 8005ed8:	4606      	mov	r6, r0
 8005eda:	b118      	cbz	r0, 8005ee4 <_vfiprintf_r+0x18>
 8005edc:	6983      	ldr	r3, [r0, #24]
 8005ede:	b90b      	cbnz	r3, 8005ee4 <_vfiprintf_r+0x18>
 8005ee0:	f000 fcaa 	bl	8006838 <__sinit>
 8005ee4:	4b89      	ldr	r3, [pc, #548]	; (800610c <_vfiprintf_r+0x240>)
 8005ee6:	429d      	cmp	r5, r3
 8005ee8:	d11b      	bne.n	8005f22 <_vfiprintf_r+0x56>
 8005eea:	6875      	ldr	r5, [r6, #4]
 8005eec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eee:	07d9      	lsls	r1, r3, #31
 8005ef0:	d405      	bmi.n	8005efe <_vfiprintf_r+0x32>
 8005ef2:	89ab      	ldrh	r3, [r5, #12]
 8005ef4:	059a      	lsls	r2, r3, #22
 8005ef6:	d402      	bmi.n	8005efe <_vfiprintf_r+0x32>
 8005ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005efa:	f000 fd3b 	bl	8006974 <__retarget_lock_acquire_recursive>
 8005efe:	89ab      	ldrh	r3, [r5, #12]
 8005f00:	071b      	lsls	r3, r3, #28
 8005f02:	d501      	bpl.n	8005f08 <_vfiprintf_r+0x3c>
 8005f04:	692b      	ldr	r3, [r5, #16]
 8005f06:	b9eb      	cbnz	r3, 8005f44 <_vfiprintf_r+0x78>
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f000 fb04 	bl	8006518 <__swsetup_r>
 8005f10:	b1c0      	cbz	r0, 8005f44 <_vfiprintf_r+0x78>
 8005f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f14:	07dc      	lsls	r4, r3, #31
 8005f16:	d50e      	bpl.n	8005f36 <_vfiprintf_r+0x6a>
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	b01d      	add	sp, #116	; 0x74
 8005f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f22:	4b7b      	ldr	r3, [pc, #492]	; (8006110 <_vfiprintf_r+0x244>)
 8005f24:	429d      	cmp	r5, r3
 8005f26:	d101      	bne.n	8005f2c <_vfiprintf_r+0x60>
 8005f28:	68b5      	ldr	r5, [r6, #8]
 8005f2a:	e7df      	b.n	8005eec <_vfiprintf_r+0x20>
 8005f2c:	4b79      	ldr	r3, [pc, #484]	; (8006114 <_vfiprintf_r+0x248>)
 8005f2e:	429d      	cmp	r5, r3
 8005f30:	bf08      	it	eq
 8005f32:	68f5      	ldreq	r5, [r6, #12]
 8005f34:	e7da      	b.n	8005eec <_vfiprintf_r+0x20>
 8005f36:	89ab      	ldrh	r3, [r5, #12]
 8005f38:	0598      	lsls	r0, r3, #22
 8005f3a:	d4ed      	bmi.n	8005f18 <_vfiprintf_r+0x4c>
 8005f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f3e:	f000 fd1a 	bl	8006976 <__retarget_lock_release_recursive>
 8005f42:	e7e9      	b.n	8005f18 <_vfiprintf_r+0x4c>
 8005f44:	2300      	movs	r3, #0
 8005f46:	9309      	str	r3, [sp, #36]	; 0x24
 8005f48:	2320      	movs	r3, #32
 8005f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f52:	2330      	movs	r3, #48	; 0x30
 8005f54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006118 <_vfiprintf_r+0x24c>
 8005f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f5c:	f04f 0901 	mov.w	r9, #1
 8005f60:	4623      	mov	r3, r4
 8005f62:	469a      	mov	sl, r3
 8005f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f68:	b10a      	cbz	r2, 8005f6e <_vfiprintf_r+0xa2>
 8005f6a:	2a25      	cmp	r2, #37	; 0x25
 8005f6c:	d1f9      	bne.n	8005f62 <_vfiprintf_r+0x96>
 8005f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8005f72:	d00b      	beq.n	8005f8c <_vfiprintf_r+0xc0>
 8005f74:	465b      	mov	r3, fp
 8005f76:	4622      	mov	r2, r4
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f7ff ff93 	bl	8005ea6 <__sfputs_r>
 8005f80:	3001      	adds	r0, #1
 8005f82:	f000 80aa 	beq.w	80060da <_vfiprintf_r+0x20e>
 8005f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f88:	445a      	add	r2, fp
 8005f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8005f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 80a2 	beq.w	80060da <_vfiprintf_r+0x20e>
 8005f96:	2300      	movs	r3, #0
 8005f98:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fa0:	f10a 0a01 	add.w	sl, sl, #1
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	9307      	str	r3, [sp, #28]
 8005fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fac:	931a      	str	r3, [sp, #104]	; 0x68
 8005fae:	4654      	mov	r4, sl
 8005fb0:	2205      	movs	r2, #5
 8005fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb6:	4858      	ldr	r0, [pc, #352]	; (8006118 <_vfiprintf_r+0x24c>)
 8005fb8:	f7fa f912 	bl	80001e0 <memchr>
 8005fbc:	9a04      	ldr	r2, [sp, #16]
 8005fbe:	b9d8      	cbnz	r0, 8005ff8 <_vfiprintf_r+0x12c>
 8005fc0:	06d1      	lsls	r1, r2, #27
 8005fc2:	bf44      	itt	mi
 8005fc4:	2320      	movmi	r3, #32
 8005fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fca:	0713      	lsls	r3, r2, #28
 8005fcc:	bf44      	itt	mi
 8005fce:	232b      	movmi	r3, #43	; 0x2b
 8005fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8005fda:	d015      	beq.n	8006008 <_vfiprintf_r+0x13c>
 8005fdc:	9a07      	ldr	r2, [sp, #28]
 8005fde:	4654      	mov	r4, sl
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	f04f 0c0a 	mov.w	ip, #10
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fec:	3b30      	subs	r3, #48	; 0x30
 8005fee:	2b09      	cmp	r3, #9
 8005ff0:	d94e      	bls.n	8006090 <_vfiprintf_r+0x1c4>
 8005ff2:	b1b0      	cbz	r0, 8006022 <_vfiprintf_r+0x156>
 8005ff4:	9207      	str	r2, [sp, #28]
 8005ff6:	e014      	b.n	8006022 <_vfiprintf_r+0x156>
 8005ff8:	eba0 0308 	sub.w	r3, r0, r8
 8005ffc:	fa09 f303 	lsl.w	r3, r9, r3
 8006000:	4313      	orrs	r3, r2
 8006002:	9304      	str	r3, [sp, #16]
 8006004:	46a2      	mov	sl, r4
 8006006:	e7d2      	b.n	8005fae <_vfiprintf_r+0xe2>
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	1d19      	adds	r1, r3, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	9103      	str	r1, [sp, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	bfbb      	ittet	lt
 8006014:	425b      	neglt	r3, r3
 8006016:	f042 0202 	orrlt.w	r2, r2, #2
 800601a:	9307      	strge	r3, [sp, #28]
 800601c:	9307      	strlt	r3, [sp, #28]
 800601e:	bfb8      	it	lt
 8006020:	9204      	strlt	r2, [sp, #16]
 8006022:	7823      	ldrb	r3, [r4, #0]
 8006024:	2b2e      	cmp	r3, #46	; 0x2e
 8006026:	d10c      	bne.n	8006042 <_vfiprintf_r+0x176>
 8006028:	7863      	ldrb	r3, [r4, #1]
 800602a:	2b2a      	cmp	r3, #42	; 0x2a
 800602c:	d135      	bne.n	800609a <_vfiprintf_r+0x1ce>
 800602e:	9b03      	ldr	r3, [sp, #12]
 8006030:	1d1a      	adds	r2, r3, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	9203      	str	r2, [sp, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfb8      	it	lt
 800603a:	f04f 33ff 	movlt.w	r3, #4294967295
 800603e:	3402      	adds	r4, #2
 8006040:	9305      	str	r3, [sp, #20]
 8006042:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006128 <_vfiprintf_r+0x25c>
 8006046:	7821      	ldrb	r1, [r4, #0]
 8006048:	2203      	movs	r2, #3
 800604a:	4650      	mov	r0, sl
 800604c:	f7fa f8c8 	bl	80001e0 <memchr>
 8006050:	b140      	cbz	r0, 8006064 <_vfiprintf_r+0x198>
 8006052:	2340      	movs	r3, #64	; 0x40
 8006054:	eba0 000a 	sub.w	r0, r0, sl
 8006058:	fa03 f000 	lsl.w	r0, r3, r0
 800605c:	9b04      	ldr	r3, [sp, #16]
 800605e:	4303      	orrs	r3, r0
 8006060:	3401      	adds	r4, #1
 8006062:	9304      	str	r3, [sp, #16]
 8006064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006068:	482c      	ldr	r0, [pc, #176]	; (800611c <_vfiprintf_r+0x250>)
 800606a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800606e:	2206      	movs	r2, #6
 8006070:	f7fa f8b6 	bl	80001e0 <memchr>
 8006074:	2800      	cmp	r0, #0
 8006076:	d03f      	beq.n	80060f8 <_vfiprintf_r+0x22c>
 8006078:	4b29      	ldr	r3, [pc, #164]	; (8006120 <_vfiprintf_r+0x254>)
 800607a:	bb1b      	cbnz	r3, 80060c4 <_vfiprintf_r+0x1f8>
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	3307      	adds	r3, #7
 8006080:	f023 0307 	bic.w	r3, r3, #7
 8006084:	3308      	adds	r3, #8
 8006086:	9303      	str	r3, [sp, #12]
 8006088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800608a:	443b      	add	r3, r7
 800608c:	9309      	str	r3, [sp, #36]	; 0x24
 800608e:	e767      	b.n	8005f60 <_vfiprintf_r+0x94>
 8006090:	fb0c 3202 	mla	r2, ip, r2, r3
 8006094:	460c      	mov	r4, r1
 8006096:	2001      	movs	r0, #1
 8006098:	e7a5      	b.n	8005fe6 <_vfiprintf_r+0x11a>
 800609a:	2300      	movs	r3, #0
 800609c:	3401      	adds	r4, #1
 800609e:	9305      	str	r3, [sp, #20]
 80060a0:	4619      	mov	r1, r3
 80060a2:	f04f 0c0a 	mov.w	ip, #10
 80060a6:	4620      	mov	r0, r4
 80060a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ac:	3a30      	subs	r2, #48	; 0x30
 80060ae:	2a09      	cmp	r2, #9
 80060b0:	d903      	bls.n	80060ba <_vfiprintf_r+0x1ee>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0c5      	beq.n	8006042 <_vfiprintf_r+0x176>
 80060b6:	9105      	str	r1, [sp, #20]
 80060b8:	e7c3      	b.n	8006042 <_vfiprintf_r+0x176>
 80060ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80060be:	4604      	mov	r4, r0
 80060c0:	2301      	movs	r3, #1
 80060c2:	e7f0      	b.n	80060a6 <_vfiprintf_r+0x1da>
 80060c4:	ab03      	add	r3, sp, #12
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	462a      	mov	r2, r5
 80060ca:	4b16      	ldr	r3, [pc, #88]	; (8006124 <_vfiprintf_r+0x258>)
 80060cc:	a904      	add	r1, sp, #16
 80060ce:	4630      	mov	r0, r6
 80060d0:	f3af 8000 	nop.w
 80060d4:	4607      	mov	r7, r0
 80060d6:	1c78      	adds	r0, r7, #1
 80060d8:	d1d6      	bne.n	8006088 <_vfiprintf_r+0x1bc>
 80060da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060dc:	07d9      	lsls	r1, r3, #31
 80060de:	d405      	bmi.n	80060ec <_vfiprintf_r+0x220>
 80060e0:	89ab      	ldrh	r3, [r5, #12]
 80060e2:	059a      	lsls	r2, r3, #22
 80060e4:	d402      	bmi.n	80060ec <_vfiprintf_r+0x220>
 80060e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060e8:	f000 fc45 	bl	8006976 <__retarget_lock_release_recursive>
 80060ec:	89ab      	ldrh	r3, [r5, #12]
 80060ee:	065b      	lsls	r3, r3, #25
 80060f0:	f53f af12 	bmi.w	8005f18 <_vfiprintf_r+0x4c>
 80060f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060f6:	e711      	b.n	8005f1c <_vfiprintf_r+0x50>
 80060f8:	ab03      	add	r3, sp, #12
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	462a      	mov	r2, r5
 80060fe:	4b09      	ldr	r3, [pc, #36]	; (8006124 <_vfiprintf_r+0x258>)
 8006100:	a904      	add	r1, sp, #16
 8006102:	4630      	mov	r0, r6
 8006104:	f000 f880 	bl	8006208 <_printf_i>
 8006108:	e7e4      	b.n	80060d4 <_vfiprintf_r+0x208>
 800610a:	bf00      	nop
 800610c:	08006f84 	.word	0x08006f84
 8006110:	08006fa4 	.word	0x08006fa4
 8006114:	08006f64 	.word	0x08006f64
 8006118:	08006f2e 	.word	0x08006f2e
 800611c:	08006f38 	.word	0x08006f38
 8006120:	00000000 	.word	0x00000000
 8006124:	08005ea7 	.word	0x08005ea7
 8006128:	08006f34 	.word	0x08006f34

0800612c <_printf_common>:
 800612c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	4616      	mov	r6, r2
 8006132:	4699      	mov	r9, r3
 8006134:	688a      	ldr	r2, [r1, #8]
 8006136:	690b      	ldr	r3, [r1, #16]
 8006138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800613c:	4293      	cmp	r3, r2
 800613e:	bfb8      	it	lt
 8006140:	4613      	movlt	r3, r2
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006148:	4607      	mov	r7, r0
 800614a:	460c      	mov	r4, r1
 800614c:	b10a      	cbz	r2, 8006152 <_printf_common+0x26>
 800614e:	3301      	adds	r3, #1
 8006150:	6033      	str	r3, [r6, #0]
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	0699      	lsls	r1, r3, #26
 8006156:	bf42      	ittt	mi
 8006158:	6833      	ldrmi	r3, [r6, #0]
 800615a:	3302      	addmi	r3, #2
 800615c:	6033      	strmi	r3, [r6, #0]
 800615e:	6825      	ldr	r5, [r4, #0]
 8006160:	f015 0506 	ands.w	r5, r5, #6
 8006164:	d106      	bne.n	8006174 <_printf_common+0x48>
 8006166:	f104 0a19 	add.w	sl, r4, #25
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	6832      	ldr	r2, [r6, #0]
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	42ab      	cmp	r3, r5
 8006172:	dc26      	bgt.n	80061c2 <_printf_common+0x96>
 8006174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006178:	1e13      	subs	r3, r2, #0
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	bf18      	it	ne
 800617e:	2301      	movne	r3, #1
 8006180:	0692      	lsls	r2, r2, #26
 8006182:	d42b      	bmi.n	80061dc <_printf_common+0xb0>
 8006184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006188:	4649      	mov	r1, r9
 800618a:	4638      	mov	r0, r7
 800618c:	47c0      	blx	r8
 800618e:	3001      	adds	r0, #1
 8006190:	d01e      	beq.n	80061d0 <_printf_common+0xa4>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	68e5      	ldr	r5, [r4, #12]
 8006196:	6832      	ldr	r2, [r6, #0]
 8006198:	f003 0306 	and.w	r3, r3, #6
 800619c:	2b04      	cmp	r3, #4
 800619e:	bf08      	it	eq
 80061a0:	1aad      	subeq	r5, r5, r2
 80061a2:	68a3      	ldr	r3, [r4, #8]
 80061a4:	6922      	ldr	r2, [r4, #16]
 80061a6:	bf0c      	ite	eq
 80061a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061ac:	2500      	movne	r5, #0
 80061ae:	4293      	cmp	r3, r2
 80061b0:	bfc4      	itt	gt
 80061b2:	1a9b      	subgt	r3, r3, r2
 80061b4:	18ed      	addgt	r5, r5, r3
 80061b6:	2600      	movs	r6, #0
 80061b8:	341a      	adds	r4, #26
 80061ba:	42b5      	cmp	r5, r6
 80061bc:	d11a      	bne.n	80061f4 <_printf_common+0xc8>
 80061be:	2000      	movs	r0, #0
 80061c0:	e008      	b.n	80061d4 <_printf_common+0xa8>
 80061c2:	2301      	movs	r3, #1
 80061c4:	4652      	mov	r2, sl
 80061c6:	4649      	mov	r1, r9
 80061c8:	4638      	mov	r0, r7
 80061ca:	47c0      	blx	r8
 80061cc:	3001      	adds	r0, #1
 80061ce:	d103      	bne.n	80061d8 <_printf_common+0xac>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d8:	3501      	adds	r5, #1
 80061da:	e7c6      	b.n	800616a <_printf_common+0x3e>
 80061dc:	18e1      	adds	r1, r4, r3
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	2030      	movs	r0, #48	; 0x30
 80061e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061e6:	4422      	add	r2, r4
 80061e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061f0:	3302      	adds	r3, #2
 80061f2:	e7c7      	b.n	8006184 <_printf_common+0x58>
 80061f4:	2301      	movs	r3, #1
 80061f6:	4622      	mov	r2, r4
 80061f8:	4649      	mov	r1, r9
 80061fa:	4638      	mov	r0, r7
 80061fc:	47c0      	blx	r8
 80061fe:	3001      	adds	r0, #1
 8006200:	d0e6      	beq.n	80061d0 <_printf_common+0xa4>
 8006202:	3601      	adds	r6, #1
 8006204:	e7d9      	b.n	80061ba <_printf_common+0x8e>
	...

08006208 <_printf_i>:
 8006208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	460c      	mov	r4, r1
 800620e:	4691      	mov	r9, r2
 8006210:	7e27      	ldrb	r7, [r4, #24]
 8006212:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006214:	2f78      	cmp	r7, #120	; 0x78
 8006216:	4680      	mov	r8, r0
 8006218:	469a      	mov	sl, r3
 800621a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800621e:	d807      	bhi.n	8006230 <_printf_i+0x28>
 8006220:	2f62      	cmp	r7, #98	; 0x62
 8006222:	d80a      	bhi.n	800623a <_printf_i+0x32>
 8006224:	2f00      	cmp	r7, #0
 8006226:	f000 80d8 	beq.w	80063da <_printf_i+0x1d2>
 800622a:	2f58      	cmp	r7, #88	; 0x58
 800622c:	f000 80a3 	beq.w	8006376 <_printf_i+0x16e>
 8006230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006238:	e03a      	b.n	80062b0 <_printf_i+0xa8>
 800623a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800623e:	2b15      	cmp	r3, #21
 8006240:	d8f6      	bhi.n	8006230 <_printf_i+0x28>
 8006242:	a001      	add	r0, pc, #4	; (adr r0, 8006248 <_printf_i+0x40>)
 8006244:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006248:	080062a1 	.word	0x080062a1
 800624c:	080062b5 	.word	0x080062b5
 8006250:	08006231 	.word	0x08006231
 8006254:	08006231 	.word	0x08006231
 8006258:	08006231 	.word	0x08006231
 800625c:	08006231 	.word	0x08006231
 8006260:	080062b5 	.word	0x080062b5
 8006264:	08006231 	.word	0x08006231
 8006268:	08006231 	.word	0x08006231
 800626c:	08006231 	.word	0x08006231
 8006270:	08006231 	.word	0x08006231
 8006274:	080063c1 	.word	0x080063c1
 8006278:	080062e5 	.word	0x080062e5
 800627c:	080063a3 	.word	0x080063a3
 8006280:	08006231 	.word	0x08006231
 8006284:	08006231 	.word	0x08006231
 8006288:	080063e3 	.word	0x080063e3
 800628c:	08006231 	.word	0x08006231
 8006290:	080062e5 	.word	0x080062e5
 8006294:	08006231 	.word	0x08006231
 8006298:	08006231 	.word	0x08006231
 800629c:	080063ab 	.word	0x080063ab
 80062a0:	680b      	ldr	r3, [r1, #0]
 80062a2:	1d1a      	adds	r2, r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	600a      	str	r2, [r1, #0]
 80062a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0a3      	b.n	80063fc <_printf_i+0x1f4>
 80062b4:	6825      	ldr	r5, [r4, #0]
 80062b6:	6808      	ldr	r0, [r1, #0]
 80062b8:	062e      	lsls	r6, r5, #24
 80062ba:	f100 0304 	add.w	r3, r0, #4
 80062be:	d50a      	bpl.n	80062d6 <_printf_i+0xce>
 80062c0:	6805      	ldr	r5, [r0, #0]
 80062c2:	600b      	str	r3, [r1, #0]
 80062c4:	2d00      	cmp	r5, #0
 80062c6:	da03      	bge.n	80062d0 <_printf_i+0xc8>
 80062c8:	232d      	movs	r3, #45	; 0x2d
 80062ca:	426d      	negs	r5, r5
 80062cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d0:	485e      	ldr	r0, [pc, #376]	; (800644c <_printf_i+0x244>)
 80062d2:	230a      	movs	r3, #10
 80062d4:	e019      	b.n	800630a <_printf_i+0x102>
 80062d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062da:	6805      	ldr	r5, [r0, #0]
 80062dc:	600b      	str	r3, [r1, #0]
 80062de:	bf18      	it	ne
 80062e0:	b22d      	sxthne	r5, r5
 80062e2:	e7ef      	b.n	80062c4 <_printf_i+0xbc>
 80062e4:	680b      	ldr	r3, [r1, #0]
 80062e6:	6825      	ldr	r5, [r4, #0]
 80062e8:	1d18      	adds	r0, r3, #4
 80062ea:	6008      	str	r0, [r1, #0]
 80062ec:	0628      	lsls	r0, r5, #24
 80062ee:	d501      	bpl.n	80062f4 <_printf_i+0xec>
 80062f0:	681d      	ldr	r5, [r3, #0]
 80062f2:	e002      	b.n	80062fa <_printf_i+0xf2>
 80062f4:	0669      	lsls	r1, r5, #25
 80062f6:	d5fb      	bpl.n	80062f0 <_printf_i+0xe8>
 80062f8:	881d      	ldrh	r5, [r3, #0]
 80062fa:	4854      	ldr	r0, [pc, #336]	; (800644c <_printf_i+0x244>)
 80062fc:	2f6f      	cmp	r7, #111	; 0x6f
 80062fe:	bf0c      	ite	eq
 8006300:	2308      	moveq	r3, #8
 8006302:	230a      	movne	r3, #10
 8006304:	2100      	movs	r1, #0
 8006306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800630a:	6866      	ldr	r6, [r4, #4]
 800630c:	60a6      	str	r6, [r4, #8]
 800630e:	2e00      	cmp	r6, #0
 8006310:	bfa2      	ittt	ge
 8006312:	6821      	ldrge	r1, [r4, #0]
 8006314:	f021 0104 	bicge.w	r1, r1, #4
 8006318:	6021      	strge	r1, [r4, #0]
 800631a:	b90d      	cbnz	r5, 8006320 <_printf_i+0x118>
 800631c:	2e00      	cmp	r6, #0
 800631e:	d04d      	beq.n	80063bc <_printf_i+0x1b4>
 8006320:	4616      	mov	r6, r2
 8006322:	fbb5 f1f3 	udiv	r1, r5, r3
 8006326:	fb03 5711 	mls	r7, r3, r1, r5
 800632a:	5dc7      	ldrb	r7, [r0, r7]
 800632c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006330:	462f      	mov	r7, r5
 8006332:	42bb      	cmp	r3, r7
 8006334:	460d      	mov	r5, r1
 8006336:	d9f4      	bls.n	8006322 <_printf_i+0x11a>
 8006338:	2b08      	cmp	r3, #8
 800633a:	d10b      	bne.n	8006354 <_printf_i+0x14c>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	07df      	lsls	r7, r3, #31
 8006340:	d508      	bpl.n	8006354 <_printf_i+0x14c>
 8006342:	6923      	ldr	r3, [r4, #16]
 8006344:	6861      	ldr	r1, [r4, #4]
 8006346:	4299      	cmp	r1, r3
 8006348:	bfde      	ittt	le
 800634a:	2330      	movle	r3, #48	; 0x30
 800634c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006350:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006354:	1b92      	subs	r2, r2, r6
 8006356:	6122      	str	r2, [r4, #16]
 8006358:	f8cd a000 	str.w	sl, [sp]
 800635c:	464b      	mov	r3, r9
 800635e:	aa03      	add	r2, sp, #12
 8006360:	4621      	mov	r1, r4
 8006362:	4640      	mov	r0, r8
 8006364:	f7ff fee2 	bl	800612c <_printf_common>
 8006368:	3001      	adds	r0, #1
 800636a:	d14c      	bne.n	8006406 <_printf_i+0x1fe>
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	b004      	add	sp, #16
 8006372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006376:	4835      	ldr	r0, [pc, #212]	; (800644c <_printf_i+0x244>)
 8006378:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	680e      	ldr	r6, [r1, #0]
 8006380:	061f      	lsls	r7, r3, #24
 8006382:	f856 5b04 	ldr.w	r5, [r6], #4
 8006386:	600e      	str	r6, [r1, #0]
 8006388:	d514      	bpl.n	80063b4 <_printf_i+0x1ac>
 800638a:	07d9      	lsls	r1, r3, #31
 800638c:	bf44      	itt	mi
 800638e:	f043 0320 	orrmi.w	r3, r3, #32
 8006392:	6023      	strmi	r3, [r4, #0]
 8006394:	b91d      	cbnz	r5, 800639e <_printf_i+0x196>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	f023 0320 	bic.w	r3, r3, #32
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	2310      	movs	r3, #16
 80063a0:	e7b0      	b.n	8006304 <_printf_i+0xfc>
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	f043 0320 	orr.w	r3, r3, #32
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	2378      	movs	r3, #120	; 0x78
 80063ac:	4828      	ldr	r0, [pc, #160]	; (8006450 <_printf_i+0x248>)
 80063ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063b2:	e7e3      	b.n	800637c <_printf_i+0x174>
 80063b4:	065e      	lsls	r6, r3, #25
 80063b6:	bf48      	it	mi
 80063b8:	b2ad      	uxthmi	r5, r5
 80063ba:	e7e6      	b.n	800638a <_printf_i+0x182>
 80063bc:	4616      	mov	r6, r2
 80063be:	e7bb      	b.n	8006338 <_printf_i+0x130>
 80063c0:	680b      	ldr	r3, [r1, #0]
 80063c2:	6826      	ldr	r6, [r4, #0]
 80063c4:	6960      	ldr	r0, [r4, #20]
 80063c6:	1d1d      	adds	r5, r3, #4
 80063c8:	600d      	str	r5, [r1, #0]
 80063ca:	0635      	lsls	r5, r6, #24
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	d501      	bpl.n	80063d4 <_printf_i+0x1cc>
 80063d0:	6018      	str	r0, [r3, #0]
 80063d2:	e002      	b.n	80063da <_printf_i+0x1d2>
 80063d4:	0671      	lsls	r1, r6, #25
 80063d6:	d5fb      	bpl.n	80063d0 <_printf_i+0x1c8>
 80063d8:	8018      	strh	r0, [r3, #0]
 80063da:	2300      	movs	r3, #0
 80063dc:	6123      	str	r3, [r4, #16]
 80063de:	4616      	mov	r6, r2
 80063e0:	e7ba      	b.n	8006358 <_printf_i+0x150>
 80063e2:	680b      	ldr	r3, [r1, #0]
 80063e4:	1d1a      	adds	r2, r3, #4
 80063e6:	600a      	str	r2, [r1, #0]
 80063e8:	681e      	ldr	r6, [r3, #0]
 80063ea:	6862      	ldr	r2, [r4, #4]
 80063ec:	2100      	movs	r1, #0
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7f9 fef6 	bl	80001e0 <memchr>
 80063f4:	b108      	cbz	r0, 80063fa <_printf_i+0x1f2>
 80063f6:	1b80      	subs	r0, r0, r6
 80063f8:	6060      	str	r0, [r4, #4]
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	6123      	str	r3, [r4, #16]
 80063fe:	2300      	movs	r3, #0
 8006400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006404:	e7a8      	b.n	8006358 <_printf_i+0x150>
 8006406:	6923      	ldr	r3, [r4, #16]
 8006408:	4632      	mov	r2, r6
 800640a:	4649      	mov	r1, r9
 800640c:	4640      	mov	r0, r8
 800640e:	47d0      	blx	sl
 8006410:	3001      	adds	r0, #1
 8006412:	d0ab      	beq.n	800636c <_printf_i+0x164>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	079b      	lsls	r3, r3, #30
 8006418:	d413      	bmi.n	8006442 <_printf_i+0x23a>
 800641a:	68e0      	ldr	r0, [r4, #12]
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	4298      	cmp	r0, r3
 8006420:	bfb8      	it	lt
 8006422:	4618      	movlt	r0, r3
 8006424:	e7a4      	b.n	8006370 <_printf_i+0x168>
 8006426:	2301      	movs	r3, #1
 8006428:	4632      	mov	r2, r6
 800642a:	4649      	mov	r1, r9
 800642c:	4640      	mov	r0, r8
 800642e:	47d0      	blx	sl
 8006430:	3001      	adds	r0, #1
 8006432:	d09b      	beq.n	800636c <_printf_i+0x164>
 8006434:	3501      	adds	r5, #1
 8006436:	68e3      	ldr	r3, [r4, #12]
 8006438:	9903      	ldr	r1, [sp, #12]
 800643a:	1a5b      	subs	r3, r3, r1
 800643c:	42ab      	cmp	r3, r5
 800643e:	dcf2      	bgt.n	8006426 <_printf_i+0x21e>
 8006440:	e7eb      	b.n	800641a <_printf_i+0x212>
 8006442:	2500      	movs	r5, #0
 8006444:	f104 0619 	add.w	r6, r4, #25
 8006448:	e7f5      	b.n	8006436 <_printf_i+0x22e>
 800644a:	bf00      	nop
 800644c:	08006f3f 	.word	0x08006f3f
 8006450:	08006f50 	.word	0x08006f50

08006454 <_sbrk_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d06      	ldr	r5, [pc, #24]	; (8006470 <_sbrk_r+0x1c>)
 8006458:	2300      	movs	r3, #0
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f7fc f90e 	bl	8002680 <_sbrk>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_sbrk_r+0x1a>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_sbrk_r+0x1a>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	20000c14 	.word	0x20000c14

08006474 <__swbuf_r>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	460e      	mov	r6, r1
 8006478:	4614      	mov	r4, r2
 800647a:	4605      	mov	r5, r0
 800647c:	b118      	cbz	r0, 8006486 <__swbuf_r+0x12>
 800647e:	6983      	ldr	r3, [r0, #24]
 8006480:	b90b      	cbnz	r3, 8006486 <__swbuf_r+0x12>
 8006482:	f000 f9d9 	bl	8006838 <__sinit>
 8006486:	4b21      	ldr	r3, [pc, #132]	; (800650c <__swbuf_r+0x98>)
 8006488:	429c      	cmp	r4, r3
 800648a:	d12b      	bne.n	80064e4 <__swbuf_r+0x70>
 800648c:	686c      	ldr	r4, [r5, #4]
 800648e:	69a3      	ldr	r3, [r4, #24]
 8006490:	60a3      	str	r3, [r4, #8]
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	071a      	lsls	r2, r3, #28
 8006496:	d52f      	bpl.n	80064f8 <__swbuf_r+0x84>
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	b36b      	cbz	r3, 80064f8 <__swbuf_r+0x84>
 800649c:	6923      	ldr	r3, [r4, #16]
 800649e:	6820      	ldr	r0, [r4, #0]
 80064a0:	1ac0      	subs	r0, r0, r3
 80064a2:	6963      	ldr	r3, [r4, #20]
 80064a4:	b2f6      	uxtb	r6, r6
 80064a6:	4283      	cmp	r3, r0
 80064a8:	4637      	mov	r7, r6
 80064aa:	dc04      	bgt.n	80064b6 <__swbuf_r+0x42>
 80064ac:	4621      	mov	r1, r4
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 f92e 	bl	8006710 <_fflush_r>
 80064b4:	bb30      	cbnz	r0, 8006504 <__swbuf_r+0x90>
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	60a3      	str	r3, [r4, #8]
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	6022      	str	r2, [r4, #0]
 80064c2:	701e      	strb	r6, [r3, #0]
 80064c4:	6963      	ldr	r3, [r4, #20]
 80064c6:	3001      	adds	r0, #1
 80064c8:	4283      	cmp	r3, r0
 80064ca:	d004      	beq.n	80064d6 <__swbuf_r+0x62>
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	07db      	lsls	r3, r3, #31
 80064d0:	d506      	bpl.n	80064e0 <__swbuf_r+0x6c>
 80064d2:	2e0a      	cmp	r6, #10
 80064d4:	d104      	bne.n	80064e0 <__swbuf_r+0x6c>
 80064d6:	4621      	mov	r1, r4
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 f919 	bl	8006710 <_fflush_r>
 80064de:	b988      	cbnz	r0, 8006504 <__swbuf_r+0x90>
 80064e0:	4638      	mov	r0, r7
 80064e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064e4:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <__swbuf_r+0x9c>)
 80064e6:	429c      	cmp	r4, r3
 80064e8:	d101      	bne.n	80064ee <__swbuf_r+0x7a>
 80064ea:	68ac      	ldr	r4, [r5, #8]
 80064ec:	e7cf      	b.n	800648e <__swbuf_r+0x1a>
 80064ee:	4b09      	ldr	r3, [pc, #36]	; (8006514 <__swbuf_r+0xa0>)
 80064f0:	429c      	cmp	r4, r3
 80064f2:	bf08      	it	eq
 80064f4:	68ec      	ldreq	r4, [r5, #12]
 80064f6:	e7ca      	b.n	800648e <__swbuf_r+0x1a>
 80064f8:	4621      	mov	r1, r4
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 f80c 	bl	8006518 <__swsetup_r>
 8006500:	2800      	cmp	r0, #0
 8006502:	d0cb      	beq.n	800649c <__swbuf_r+0x28>
 8006504:	f04f 37ff 	mov.w	r7, #4294967295
 8006508:	e7ea      	b.n	80064e0 <__swbuf_r+0x6c>
 800650a:	bf00      	nop
 800650c:	08006f84 	.word	0x08006f84
 8006510:	08006fa4 	.word	0x08006fa4
 8006514:	08006f64 	.word	0x08006f64

08006518 <__swsetup_r>:
 8006518:	4b32      	ldr	r3, [pc, #200]	; (80065e4 <__swsetup_r+0xcc>)
 800651a:	b570      	push	{r4, r5, r6, lr}
 800651c:	681d      	ldr	r5, [r3, #0]
 800651e:	4606      	mov	r6, r0
 8006520:	460c      	mov	r4, r1
 8006522:	b125      	cbz	r5, 800652e <__swsetup_r+0x16>
 8006524:	69ab      	ldr	r3, [r5, #24]
 8006526:	b913      	cbnz	r3, 800652e <__swsetup_r+0x16>
 8006528:	4628      	mov	r0, r5
 800652a:	f000 f985 	bl	8006838 <__sinit>
 800652e:	4b2e      	ldr	r3, [pc, #184]	; (80065e8 <__swsetup_r+0xd0>)
 8006530:	429c      	cmp	r4, r3
 8006532:	d10f      	bne.n	8006554 <__swsetup_r+0x3c>
 8006534:	686c      	ldr	r4, [r5, #4]
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800653c:	0719      	lsls	r1, r3, #28
 800653e:	d42c      	bmi.n	800659a <__swsetup_r+0x82>
 8006540:	06dd      	lsls	r5, r3, #27
 8006542:	d411      	bmi.n	8006568 <__swsetup_r+0x50>
 8006544:	2309      	movs	r3, #9
 8006546:	6033      	str	r3, [r6, #0]
 8006548:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	f04f 30ff 	mov.w	r0, #4294967295
 8006552:	e03e      	b.n	80065d2 <__swsetup_r+0xba>
 8006554:	4b25      	ldr	r3, [pc, #148]	; (80065ec <__swsetup_r+0xd4>)
 8006556:	429c      	cmp	r4, r3
 8006558:	d101      	bne.n	800655e <__swsetup_r+0x46>
 800655a:	68ac      	ldr	r4, [r5, #8]
 800655c:	e7eb      	b.n	8006536 <__swsetup_r+0x1e>
 800655e:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <__swsetup_r+0xd8>)
 8006560:	429c      	cmp	r4, r3
 8006562:	bf08      	it	eq
 8006564:	68ec      	ldreq	r4, [r5, #12]
 8006566:	e7e6      	b.n	8006536 <__swsetup_r+0x1e>
 8006568:	0758      	lsls	r0, r3, #29
 800656a:	d512      	bpl.n	8006592 <__swsetup_r+0x7a>
 800656c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800656e:	b141      	cbz	r1, 8006582 <__swsetup_r+0x6a>
 8006570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006574:	4299      	cmp	r1, r3
 8006576:	d002      	beq.n	800657e <__swsetup_r+0x66>
 8006578:	4630      	mov	r0, r6
 800657a:	f7ff fa77 	bl	8005a6c <_free_r>
 800657e:	2300      	movs	r3, #0
 8006580:	6363      	str	r3, [r4, #52]	; 0x34
 8006582:	89a3      	ldrh	r3, [r4, #12]
 8006584:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006588:	81a3      	strh	r3, [r4, #12]
 800658a:	2300      	movs	r3, #0
 800658c:	6063      	str	r3, [r4, #4]
 800658e:	6923      	ldr	r3, [r4, #16]
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	f043 0308 	orr.w	r3, r3, #8
 8006598:	81a3      	strh	r3, [r4, #12]
 800659a:	6923      	ldr	r3, [r4, #16]
 800659c:	b94b      	cbnz	r3, 80065b2 <__swsetup_r+0x9a>
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a8:	d003      	beq.n	80065b2 <__swsetup_r+0x9a>
 80065aa:	4621      	mov	r1, r4
 80065ac:	4630      	mov	r0, r6
 80065ae:	f000 fa07 	bl	80069c0 <__smakebuf_r>
 80065b2:	89a0      	ldrh	r0, [r4, #12]
 80065b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065b8:	f010 0301 	ands.w	r3, r0, #1
 80065bc:	d00a      	beq.n	80065d4 <__swsetup_r+0xbc>
 80065be:	2300      	movs	r3, #0
 80065c0:	60a3      	str	r3, [r4, #8]
 80065c2:	6963      	ldr	r3, [r4, #20]
 80065c4:	425b      	negs	r3, r3
 80065c6:	61a3      	str	r3, [r4, #24]
 80065c8:	6923      	ldr	r3, [r4, #16]
 80065ca:	b943      	cbnz	r3, 80065de <__swsetup_r+0xc6>
 80065cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065d0:	d1ba      	bne.n	8006548 <__swsetup_r+0x30>
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
 80065d4:	0781      	lsls	r1, r0, #30
 80065d6:	bf58      	it	pl
 80065d8:	6963      	ldrpl	r3, [r4, #20]
 80065da:	60a3      	str	r3, [r4, #8]
 80065dc:	e7f4      	b.n	80065c8 <__swsetup_r+0xb0>
 80065de:	2000      	movs	r0, #0
 80065e0:	e7f7      	b.n	80065d2 <__swsetup_r+0xba>
 80065e2:	bf00      	nop
 80065e4:	20000010 	.word	0x20000010
 80065e8:	08006f84 	.word	0x08006f84
 80065ec:	08006fa4 	.word	0x08006fa4
 80065f0:	08006f64 	.word	0x08006f64

080065f4 <abort>:
 80065f4:	b508      	push	{r3, lr}
 80065f6:	2006      	movs	r0, #6
 80065f8:	f000 faa4 	bl	8006b44 <raise>
 80065fc:	2001      	movs	r0, #1
 80065fe:	f7fb ffc7 	bl	8002590 <_exit>
	...

08006604 <__sflush_r>:
 8006604:	898a      	ldrh	r2, [r1, #12]
 8006606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800660a:	4605      	mov	r5, r0
 800660c:	0710      	lsls	r0, r2, #28
 800660e:	460c      	mov	r4, r1
 8006610:	d458      	bmi.n	80066c4 <__sflush_r+0xc0>
 8006612:	684b      	ldr	r3, [r1, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	dc05      	bgt.n	8006624 <__sflush_r+0x20>
 8006618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	dc02      	bgt.n	8006624 <__sflush_r+0x20>
 800661e:	2000      	movs	r0, #0
 8006620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006626:	2e00      	cmp	r6, #0
 8006628:	d0f9      	beq.n	800661e <__sflush_r+0x1a>
 800662a:	2300      	movs	r3, #0
 800662c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006630:	682f      	ldr	r7, [r5, #0]
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	d032      	beq.n	800669c <__sflush_r+0x98>
 8006636:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	075a      	lsls	r2, r3, #29
 800663c:	d505      	bpl.n	800664a <__sflush_r+0x46>
 800663e:	6863      	ldr	r3, [r4, #4]
 8006640:	1ac0      	subs	r0, r0, r3
 8006642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006644:	b10b      	cbz	r3, 800664a <__sflush_r+0x46>
 8006646:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006648:	1ac0      	subs	r0, r0, r3
 800664a:	2300      	movs	r3, #0
 800664c:	4602      	mov	r2, r0
 800664e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006650:	6a21      	ldr	r1, [r4, #32]
 8006652:	4628      	mov	r0, r5
 8006654:	47b0      	blx	r6
 8006656:	1c43      	adds	r3, r0, #1
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	d106      	bne.n	800666a <__sflush_r+0x66>
 800665c:	6829      	ldr	r1, [r5, #0]
 800665e:	291d      	cmp	r1, #29
 8006660:	d82c      	bhi.n	80066bc <__sflush_r+0xb8>
 8006662:	4a2a      	ldr	r2, [pc, #168]	; (800670c <__sflush_r+0x108>)
 8006664:	40ca      	lsrs	r2, r1
 8006666:	07d6      	lsls	r6, r2, #31
 8006668:	d528      	bpl.n	80066bc <__sflush_r+0xb8>
 800666a:	2200      	movs	r2, #0
 800666c:	6062      	str	r2, [r4, #4]
 800666e:	04d9      	lsls	r1, r3, #19
 8006670:	6922      	ldr	r2, [r4, #16]
 8006672:	6022      	str	r2, [r4, #0]
 8006674:	d504      	bpl.n	8006680 <__sflush_r+0x7c>
 8006676:	1c42      	adds	r2, r0, #1
 8006678:	d101      	bne.n	800667e <__sflush_r+0x7a>
 800667a:	682b      	ldr	r3, [r5, #0]
 800667c:	b903      	cbnz	r3, 8006680 <__sflush_r+0x7c>
 800667e:	6560      	str	r0, [r4, #84]	; 0x54
 8006680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006682:	602f      	str	r7, [r5, #0]
 8006684:	2900      	cmp	r1, #0
 8006686:	d0ca      	beq.n	800661e <__sflush_r+0x1a>
 8006688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800668c:	4299      	cmp	r1, r3
 800668e:	d002      	beq.n	8006696 <__sflush_r+0x92>
 8006690:	4628      	mov	r0, r5
 8006692:	f7ff f9eb 	bl	8005a6c <_free_r>
 8006696:	2000      	movs	r0, #0
 8006698:	6360      	str	r0, [r4, #52]	; 0x34
 800669a:	e7c1      	b.n	8006620 <__sflush_r+0x1c>
 800669c:	6a21      	ldr	r1, [r4, #32]
 800669e:	2301      	movs	r3, #1
 80066a0:	4628      	mov	r0, r5
 80066a2:	47b0      	blx	r6
 80066a4:	1c41      	adds	r1, r0, #1
 80066a6:	d1c7      	bne.n	8006638 <__sflush_r+0x34>
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0c4      	beq.n	8006638 <__sflush_r+0x34>
 80066ae:	2b1d      	cmp	r3, #29
 80066b0:	d001      	beq.n	80066b6 <__sflush_r+0xb2>
 80066b2:	2b16      	cmp	r3, #22
 80066b4:	d101      	bne.n	80066ba <__sflush_r+0xb6>
 80066b6:	602f      	str	r7, [r5, #0]
 80066b8:	e7b1      	b.n	800661e <__sflush_r+0x1a>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066c0:	81a3      	strh	r3, [r4, #12]
 80066c2:	e7ad      	b.n	8006620 <__sflush_r+0x1c>
 80066c4:	690f      	ldr	r7, [r1, #16]
 80066c6:	2f00      	cmp	r7, #0
 80066c8:	d0a9      	beq.n	800661e <__sflush_r+0x1a>
 80066ca:	0793      	lsls	r3, r2, #30
 80066cc:	680e      	ldr	r6, [r1, #0]
 80066ce:	bf08      	it	eq
 80066d0:	694b      	ldreq	r3, [r1, #20]
 80066d2:	600f      	str	r7, [r1, #0]
 80066d4:	bf18      	it	ne
 80066d6:	2300      	movne	r3, #0
 80066d8:	eba6 0807 	sub.w	r8, r6, r7
 80066dc:	608b      	str	r3, [r1, #8]
 80066de:	f1b8 0f00 	cmp.w	r8, #0
 80066e2:	dd9c      	ble.n	800661e <__sflush_r+0x1a>
 80066e4:	6a21      	ldr	r1, [r4, #32]
 80066e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066e8:	4643      	mov	r3, r8
 80066ea:	463a      	mov	r2, r7
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b0      	blx	r6
 80066f0:	2800      	cmp	r0, #0
 80066f2:	dc06      	bgt.n	8006702 <__sflush_r+0xfe>
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066fa:	81a3      	strh	r3, [r4, #12]
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006700:	e78e      	b.n	8006620 <__sflush_r+0x1c>
 8006702:	4407      	add	r7, r0
 8006704:	eba8 0800 	sub.w	r8, r8, r0
 8006708:	e7e9      	b.n	80066de <__sflush_r+0xda>
 800670a:	bf00      	nop
 800670c:	20400001 	.word	0x20400001

08006710 <_fflush_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	690b      	ldr	r3, [r1, #16]
 8006714:	4605      	mov	r5, r0
 8006716:	460c      	mov	r4, r1
 8006718:	b913      	cbnz	r3, 8006720 <_fflush_r+0x10>
 800671a:	2500      	movs	r5, #0
 800671c:	4628      	mov	r0, r5
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	b118      	cbz	r0, 800672a <_fflush_r+0x1a>
 8006722:	6983      	ldr	r3, [r0, #24]
 8006724:	b90b      	cbnz	r3, 800672a <_fflush_r+0x1a>
 8006726:	f000 f887 	bl	8006838 <__sinit>
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <_fflush_r+0x6c>)
 800672c:	429c      	cmp	r4, r3
 800672e:	d11b      	bne.n	8006768 <_fflush_r+0x58>
 8006730:	686c      	ldr	r4, [r5, #4]
 8006732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0ef      	beq.n	800671a <_fflush_r+0xa>
 800673a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800673c:	07d0      	lsls	r0, r2, #31
 800673e:	d404      	bmi.n	800674a <_fflush_r+0x3a>
 8006740:	0599      	lsls	r1, r3, #22
 8006742:	d402      	bmi.n	800674a <_fflush_r+0x3a>
 8006744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006746:	f000 f915 	bl	8006974 <__retarget_lock_acquire_recursive>
 800674a:	4628      	mov	r0, r5
 800674c:	4621      	mov	r1, r4
 800674e:	f7ff ff59 	bl	8006604 <__sflush_r>
 8006752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006754:	07da      	lsls	r2, r3, #31
 8006756:	4605      	mov	r5, r0
 8006758:	d4e0      	bmi.n	800671c <_fflush_r+0xc>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	059b      	lsls	r3, r3, #22
 800675e:	d4dd      	bmi.n	800671c <_fflush_r+0xc>
 8006760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006762:	f000 f908 	bl	8006976 <__retarget_lock_release_recursive>
 8006766:	e7d9      	b.n	800671c <_fflush_r+0xc>
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <_fflush_r+0x70>)
 800676a:	429c      	cmp	r4, r3
 800676c:	d101      	bne.n	8006772 <_fflush_r+0x62>
 800676e:	68ac      	ldr	r4, [r5, #8]
 8006770:	e7df      	b.n	8006732 <_fflush_r+0x22>
 8006772:	4b04      	ldr	r3, [pc, #16]	; (8006784 <_fflush_r+0x74>)
 8006774:	429c      	cmp	r4, r3
 8006776:	bf08      	it	eq
 8006778:	68ec      	ldreq	r4, [r5, #12]
 800677a:	e7da      	b.n	8006732 <_fflush_r+0x22>
 800677c:	08006f84 	.word	0x08006f84
 8006780:	08006fa4 	.word	0x08006fa4
 8006784:	08006f64 	.word	0x08006f64

08006788 <std>:
 8006788:	2300      	movs	r3, #0
 800678a:	b510      	push	{r4, lr}
 800678c:	4604      	mov	r4, r0
 800678e:	e9c0 3300 	strd	r3, r3, [r0]
 8006792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006796:	6083      	str	r3, [r0, #8]
 8006798:	8181      	strh	r1, [r0, #12]
 800679a:	6643      	str	r3, [r0, #100]	; 0x64
 800679c:	81c2      	strh	r2, [r0, #14]
 800679e:	6183      	str	r3, [r0, #24]
 80067a0:	4619      	mov	r1, r3
 80067a2:	2208      	movs	r2, #8
 80067a4:	305c      	adds	r0, #92	; 0x5c
 80067a6:	f7ff f8c1 	bl	800592c <memset>
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <std+0x38>)
 80067ac:	6263      	str	r3, [r4, #36]	; 0x24
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <std+0x3c>)
 80067b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80067b2:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <std+0x40>)
 80067b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <std+0x44>)
 80067b8:	6224      	str	r4, [r4, #32]
 80067ba:	6323      	str	r3, [r4, #48]	; 0x30
 80067bc:	bd10      	pop	{r4, pc}
 80067be:	bf00      	nop
 80067c0:	08006b7d 	.word	0x08006b7d
 80067c4:	08006b9f 	.word	0x08006b9f
 80067c8:	08006bd7 	.word	0x08006bd7
 80067cc:	08006bfb 	.word	0x08006bfb

080067d0 <_cleanup_r>:
 80067d0:	4901      	ldr	r1, [pc, #4]	; (80067d8 <_cleanup_r+0x8>)
 80067d2:	f000 b8af 	b.w	8006934 <_fwalk_reent>
 80067d6:	bf00      	nop
 80067d8:	08006711 	.word	0x08006711

080067dc <__sfmoreglue>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	1e4a      	subs	r2, r1, #1
 80067e0:	2568      	movs	r5, #104	; 0x68
 80067e2:	4355      	muls	r5, r2
 80067e4:	460e      	mov	r6, r1
 80067e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067ea:	f7ff f98f 	bl	8005b0c <_malloc_r>
 80067ee:	4604      	mov	r4, r0
 80067f0:	b140      	cbz	r0, 8006804 <__sfmoreglue+0x28>
 80067f2:	2100      	movs	r1, #0
 80067f4:	e9c0 1600 	strd	r1, r6, [r0]
 80067f8:	300c      	adds	r0, #12
 80067fa:	60a0      	str	r0, [r4, #8]
 80067fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006800:	f7ff f894 	bl	800592c <memset>
 8006804:	4620      	mov	r0, r4
 8006806:	bd70      	pop	{r4, r5, r6, pc}

08006808 <__sfp_lock_acquire>:
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <__sfp_lock_acquire+0x8>)
 800680a:	f000 b8b3 	b.w	8006974 <__retarget_lock_acquire_recursive>
 800680e:	bf00      	nop
 8006810:	20000c10 	.word	0x20000c10

08006814 <__sfp_lock_release>:
 8006814:	4801      	ldr	r0, [pc, #4]	; (800681c <__sfp_lock_release+0x8>)
 8006816:	f000 b8ae 	b.w	8006976 <__retarget_lock_release_recursive>
 800681a:	bf00      	nop
 800681c:	20000c10 	.word	0x20000c10

08006820 <__sinit_lock_acquire>:
 8006820:	4801      	ldr	r0, [pc, #4]	; (8006828 <__sinit_lock_acquire+0x8>)
 8006822:	f000 b8a7 	b.w	8006974 <__retarget_lock_acquire_recursive>
 8006826:	bf00      	nop
 8006828:	20000c0b 	.word	0x20000c0b

0800682c <__sinit_lock_release>:
 800682c:	4801      	ldr	r0, [pc, #4]	; (8006834 <__sinit_lock_release+0x8>)
 800682e:	f000 b8a2 	b.w	8006976 <__retarget_lock_release_recursive>
 8006832:	bf00      	nop
 8006834:	20000c0b 	.word	0x20000c0b

08006838 <__sinit>:
 8006838:	b510      	push	{r4, lr}
 800683a:	4604      	mov	r4, r0
 800683c:	f7ff fff0 	bl	8006820 <__sinit_lock_acquire>
 8006840:	69a3      	ldr	r3, [r4, #24]
 8006842:	b11b      	cbz	r3, 800684c <__sinit+0x14>
 8006844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006848:	f7ff bff0 	b.w	800682c <__sinit_lock_release>
 800684c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006850:	6523      	str	r3, [r4, #80]	; 0x50
 8006852:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <__sinit+0x68>)
 8006854:	4a13      	ldr	r2, [pc, #76]	; (80068a4 <__sinit+0x6c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	62a2      	str	r2, [r4, #40]	; 0x28
 800685a:	42a3      	cmp	r3, r4
 800685c:	bf04      	itt	eq
 800685e:	2301      	moveq	r3, #1
 8006860:	61a3      	streq	r3, [r4, #24]
 8006862:	4620      	mov	r0, r4
 8006864:	f000 f820 	bl	80068a8 <__sfp>
 8006868:	6060      	str	r0, [r4, #4]
 800686a:	4620      	mov	r0, r4
 800686c:	f000 f81c 	bl	80068a8 <__sfp>
 8006870:	60a0      	str	r0, [r4, #8]
 8006872:	4620      	mov	r0, r4
 8006874:	f000 f818 	bl	80068a8 <__sfp>
 8006878:	2200      	movs	r2, #0
 800687a:	60e0      	str	r0, [r4, #12]
 800687c:	2104      	movs	r1, #4
 800687e:	6860      	ldr	r0, [r4, #4]
 8006880:	f7ff ff82 	bl	8006788 <std>
 8006884:	68a0      	ldr	r0, [r4, #8]
 8006886:	2201      	movs	r2, #1
 8006888:	2109      	movs	r1, #9
 800688a:	f7ff ff7d 	bl	8006788 <std>
 800688e:	68e0      	ldr	r0, [r4, #12]
 8006890:	2202      	movs	r2, #2
 8006892:	2112      	movs	r1, #18
 8006894:	f7ff ff78 	bl	8006788 <std>
 8006898:	2301      	movs	r3, #1
 800689a:	61a3      	str	r3, [r4, #24]
 800689c:	e7d2      	b.n	8006844 <__sinit+0xc>
 800689e:	bf00      	nop
 80068a0:	08006e78 	.word	0x08006e78
 80068a4:	080067d1 	.word	0x080067d1

080068a8 <__sfp>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	4607      	mov	r7, r0
 80068ac:	f7ff ffac 	bl	8006808 <__sfp_lock_acquire>
 80068b0:	4b1e      	ldr	r3, [pc, #120]	; (800692c <__sfp+0x84>)
 80068b2:	681e      	ldr	r6, [r3, #0]
 80068b4:	69b3      	ldr	r3, [r6, #24]
 80068b6:	b913      	cbnz	r3, 80068be <__sfp+0x16>
 80068b8:	4630      	mov	r0, r6
 80068ba:	f7ff ffbd 	bl	8006838 <__sinit>
 80068be:	3648      	adds	r6, #72	; 0x48
 80068c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	d503      	bpl.n	80068d0 <__sfp+0x28>
 80068c8:	6833      	ldr	r3, [r6, #0]
 80068ca:	b30b      	cbz	r3, 8006910 <__sfp+0x68>
 80068cc:	6836      	ldr	r6, [r6, #0]
 80068ce:	e7f7      	b.n	80068c0 <__sfp+0x18>
 80068d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068d4:	b9d5      	cbnz	r5, 800690c <__sfp+0x64>
 80068d6:	4b16      	ldr	r3, [pc, #88]	; (8006930 <__sfp+0x88>)
 80068d8:	60e3      	str	r3, [r4, #12]
 80068da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068de:	6665      	str	r5, [r4, #100]	; 0x64
 80068e0:	f000 f847 	bl	8006972 <__retarget_lock_init_recursive>
 80068e4:	f7ff ff96 	bl	8006814 <__sfp_lock_release>
 80068e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068f0:	6025      	str	r5, [r4, #0]
 80068f2:	61a5      	str	r5, [r4, #24]
 80068f4:	2208      	movs	r2, #8
 80068f6:	4629      	mov	r1, r5
 80068f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068fc:	f7ff f816 	bl	800592c <memset>
 8006900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006908:	4620      	mov	r0, r4
 800690a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800690c:	3468      	adds	r4, #104	; 0x68
 800690e:	e7d9      	b.n	80068c4 <__sfp+0x1c>
 8006910:	2104      	movs	r1, #4
 8006912:	4638      	mov	r0, r7
 8006914:	f7ff ff62 	bl	80067dc <__sfmoreglue>
 8006918:	4604      	mov	r4, r0
 800691a:	6030      	str	r0, [r6, #0]
 800691c:	2800      	cmp	r0, #0
 800691e:	d1d5      	bne.n	80068cc <__sfp+0x24>
 8006920:	f7ff ff78 	bl	8006814 <__sfp_lock_release>
 8006924:	230c      	movs	r3, #12
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	e7ee      	b.n	8006908 <__sfp+0x60>
 800692a:	bf00      	nop
 800692c:	08006e78 	.word	0x08006e78
 8006930:	ffff0001 	.word	0xffff0001

08006934 <_fwalk_reent>:
 8006934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006938:	4606      	mov	r6, r0
 800693a:	4688      	mov	r8, r1
 800693c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006940:	2700      	movs	r7, #0
 8006942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006946:	f1b9 0901 	subs.w	r9, r9, #1
 800694a:	d505      	bpl.n	8006958 <_fwalk_reent+0x24>
 800694c:	6824      	ldr	r4, [r4, #0]
 800694e:	2c00      	cmp	r4, #0
 8006950:	d1f7      	bne.n	8006942 <_fwalk_reent+0xe>
 8006952:	4638      	mov	r0, r7
 8006954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006958:	89ab      	ldrh	r3, [r5, #12]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d907      	bls.n	800696e <_fwalk_reent+0x3a>
 800695e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006962:	3301      	adds	r3, #1
 8006964:	d003      	beq.n	800696e <_fwalk_reent+0x3a>
 8006966:	4629      	mov	r1, r5
 8006968:	4630      	mov	r0, r6
 800696a:	47c0      	blx	r8
 800696c:	4307      	orrs	r7, r0
 800696e:	3568      	adds	r5, #104	; 0x68
 8006970:	e7e9      	b.n	8006946 <_fwalk_reent+0x12>

08006972 <__retarget_lock_init_recursive>:
 8006972:	4770      	bx	lr

08006974 <__retarget_lock_acquire_recursive>:
 8006974:	4770      	bx	lr

08006976 <__retarget_lock_release_recursive>:
 8006976:	4770      	bx	lr

08006978 <__swhatbuf_r>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	460e      	mov	r6, r1
 800697c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006980:	2900      	cmp	r1, #0
 8006982:	b096      	sub	sp, #88	; 0x58
 8006984:	4614      	mov	r4, r2
 8006986:	461d      	mov	r5, r3
 8006988:	da07      	bge.n	800699a <__swhatbuf_r+0x22>
 800698a:	2300      	movs	r3, #0
 800698c:	602b      	str	r3, [r5, #0]
 800698e:	89b3      	ldrh	r3, [r6, #12]
 8006990:	061a      	lsls	r2, r3, #24
 8006992:	d410      	bmi.n	80069b6 <__swhatbuf_r+0x3e>
 8006994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006998:	e00e      	b.n	80069b8 <__swhatbuf_r+0x40>
 800699a:	466a      	mov	r2, sp
 800699c:	f000 f954 	bl	8006c48 <_fstat_r>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	dbf2      	blt.n	800698a <__swhatbuf_r+0x12>
 80069a4:	9a01      	ldr	r2, [sp, #4]
 80069a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069ae:	425a      	negs	r2, r3
 80069b0:	415a      	adcs	r2, r3
 80069b2:	602a      	str	r2, [r5, #0]
 80069b4:	e7ee      	b.n	8006994 <__swhatbuf_r+0x1c>
 80069b6:	2340      	movs	r3, #64	; 0x40
 80069b8:	2000      	movs	r0, #0
 80069ba:	6023      	str	r3, [r4, #0]
 80069bc:	b016      	add	sp, #88	; 0x58
 80069be:	bd70      	pop	{r4, r5, r6, pc}

080069c0 <__smakebuf_r>:
 80069c0:	898b      	ldrh	r3, [r1, #12]
 80069c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069c4:	079d      	lsls	r5, r3, #30
 80069c6:	4606      	mov	r6, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	d507      	bpl.n	80069dc <__smakebuf_r+0x1c>
 80069cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	2301      	movs	r3, #1
 80069d6:	6163      	str	r3, [r4, #20]
 80069d8:	b002      	add	sp, #8
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	ab01      	add	r3, sp, #4
 80069de:	466a      	mov	r2, sp
 80069e0:	f7ff ffca 	bl	8006978 <__swhatbuf_r>
 80069e4:	9900      	ldr	r1, [sp, #0]
 80069e6:	4605      	mov	r5, r0
 80069e8:	4630      	mov	r0, r6
 80069ea:	f7ff f88f 	bl	8005b0c <_malloc_r>
 80069ee:	b948      	cbnz	r0, 8006a04 <__smakebuf_r+0x44>
 80069f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f4:	059a      	lsls	r2, r3, #22
 80069f6:	d4ef      	bmi.n	80069d8 <__smakebuf_r+0x18>
 80069f8:	f023 0303 	bic.w	r3, r3, #3
 80069fc:	f043 0302 	orr.w	r3, r3, #2
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	e7e3      	b.n	80069cc <__smakebuf_r+0xc>
 8006a04:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <__smakebuf_r+0x7c>)
 8006a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	6020      	str	r0, [r4, #0]
 8006a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	9b00      	ldr	r3, [sp, #0]
 8006a14:	6163      	str	r3, [r4, #20]
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	6120      	str	r0, [r4, #16]
 8006a1a:	b15b      	cbz	r3, 8006a34 <__smakebuf_r+0x74>
 8006a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f923 	bl	8006c6c <_isatty_r>
 8006a26:	b128      	cbz	r0, 8006a34 <__smakebuf_r+0x74>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f023 0303 	bic.w	r3, r3, #3
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	89a0      	ldrh	r0, [r4, #12]
 8006a36:	4305      	orrs	r5, r0
 8006a38:	81a5      	strh	r5, [r4, #12]
 8006a3a:	e7cd      	b.n	80069d8 <__smakebuf_r+0x18>
 8006a3c:	080067d1 	.word	0x080067d1

08006a40 <memcpy>:
 8006a40:	440a      	add	r2, r1
 8006a42:	4291      	cmp	r1, r2
 8006a44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a48:	d100      	bne.n	8006a4c <memcpy+0xc>
 8006a4a:	4770      	bx	lr
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a56:	4291      	cmp	r1, r2
 8006a58:	d1f9      	bne.n	8006a4e <memcpy+0xe>
 8006a5a:	bd10      	pop	{r4, pc}

08006a5c <memmove>:
 8006a5c:	4288      	cmp	r0, r1
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	eb01 0402 	add.w	r4, r1, r2
 8006a64:	d902      	bls.n	8006a6c <memmove+0x10>
 8006a66:	4284      	cmp	r4, r0
 8006a68:	4623      	mov	r3, r4
 8006a6a:	d807      	bhi.n	8006a7c <memmove+0x20>
 8006a6c:	1e43      	subs	r3, r0, #1
 8006a6e:	42a1      	cmp	r1, r4
 8006a70:	d008      	beq.n	8006a84 <memmove+0x28>
 8006a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a7a:	e7f8      	b.n	8006a6e <memmove+0x12>
 8006a7c:	4402      	add	r2, r0
 8006a7e:	4601      	mov	r1, r0
 8006a80:	428a      	cmp	r2, r1
 8006a82:	d100      	bne.n	8006a86 <memmove+0x2a>
 8006a84:	bd10      	pop	{r4, pc}
 8006a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a8e:	e7f7      	b.n	8006a80 <memmove+0x24>

08006a90 <__malloc_lock>:
 8006a90:	4801      	ldr	r0, [pc, #4]	; (8006a98 <__malloc_lock+0x8>)
 8006a92:	f7ff bf6f 	b.w	8006974 <__retarget_lock_acquire_recursive>
 8006a96:	bf00      	nop
 8006a98:	20000c0c 	.word	0x20000c0c

08006a9c <__malloc_unlock>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	; (8006aa4 <__malloc_unlock+0x8>)
 8006a9e:	f7ff bf6a 	b.w	8006976 <__retarget_lock_release_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	20000c0c 	.word	0x20000c0c

08006aa8 <_realloc_r>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	4607      	mov	r7, r0
 8006aac:	4614      	mov	r4, r2
 8006aae:	460e      	mov	r6, r1
 8006ab0:	b921      	cbnz	r1, 8006abc <_realloc_r+0x14>
 8006ab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	f7ff b828 	b.w	8005b0c <_malloc_r>
 8006abc:	b922      	cbnz	r2, 8006ac8 <_realloc_r+0x20>
 8006abe:	f7fe ffd5 	bl	8005a6c <_free_r>
 8006ac2:	4625      	mov	r5, r4
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac8:	f000 f8f2 	bl	8006cb0 <_malloc_usable_size_r>
 8006acc:	42a0      	cmp	r0, r4
 8006ace:	d20f      	bcs.n	8006af0 <_realloc_r+0x48>
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f7ff f81a 	bl	8005b0c <_malloc_r>
 8006ad8:	4605      	mov	r5, r0
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d0f2      	beq.n	8006ac4 <_realloc_r+0x1c>
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	f7ff ffad 	bl	8006a40 <memcpy>
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7fe ffbf 	bl	8005a6c <_free_r>
 8006aee:	e7e9      	b.n	8006ac4 <_realloc_r+0x1c>
 8006af0:	4635      	mov	r5, r6
 8006af2:	e7e7      	b.n	8006ac4 <_realloc_r+0x1c>

08006af4 <_raise_r>:
 8006af4:	291f      	cmp	r1, #31
 8006af6:	b538      	push	{r3, r4, r5, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	460d      	mov	r5, r1
 8006afc:	d904      	bls.n	8006b08 <_raise_r+0x14>
 8006afe:	2316      	movs	r3, #22
 8006b00:	6003      	str	r3, [r0, #0]
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b0a:	b112      	cbz	r2, 8006b12 <_raise_r+0x1e>
 8006b0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b10:	b94b      	cbnz	r3, 8006b26 <_raise_r+0x32>
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 f830 	bl	8006b78 <_getpid_r>
 8006b18:	462a      	mov	r2, r5
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b22:	f000 b817 	b.w	8006b54 <_kill_r>
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d00a      	beq.n	8006b40 <_raise_r+0x4c>
 8006b2a:	1c59      	adds	r1, r3, #1
 8006b2c:	d103      	bne.n	8006b36 <_raise_r+0x42>
 8006b2e:	2316      	movs	r3, #22
 8006b30:	6003      	str	r3, [r0, #0]
 8006b32:	2001      	movs	r0, #1
 8006b34:	e7e7      	b.n	8006b06 <_raise_r+0x12>
 8006b36:	2400      	movs	r4, #0
 8006b38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	4798      	blx	r3
 8006b40:	2000      	movs	r0, #0
 8006b42:	e7e0      	b.n	8006b06 <_raise_r+0x12>

08006b44 <raise>:
 8006b44:	4b02      	ldr	r3, [pc, #8]	; (8006b50 <raise+0xc>)
 8006b46:	4601      	mov	r1, r0
 8006b48:	6818      	ldr	r0, [r3, #0]
 8006b4a:	f7ff bfd3 	b.w	8006af4 <_raise_r>
 8006b4e:	bf00      	nop
 8006b50:	20000010 	.word	0x20000010

08006b54 <_kill_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4d07      	ldr	r5, [pc, #28]	; (8006b74 <_kill_r+0x20>)
 8006b58:	2300      	movs	r3, #0
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	4611      	mov	r1, r2
 8006b60:	602b      	str	r3, [r5, #0]
 8006b62:	f7fb fd05 	bl	8002570 <_kill>
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	d102      	bne.n	8006b70 <_kill_r+0x1c>
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	b103      	cbz	r3, 8006b70 <_kill_r+0x1c>
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	bd38      	pop	{r3, r4, r5, pc}
 8006b72:	bf00      	nop
 8006b74:	20000c14 	.word	0x20000c14

08006b78 <_getpid_r>:
 8006b78:	f7fb bcf2 	b.w	8002560 <_getpid>

08006b7c <__sread>:
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	460c      	mov	r4, r1
 8006b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b84:	f000 f89c 	bl	8006cc0 <_read_r>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	bfab      	itete	ge
 8006b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b90:	181b      	addge	r3, r3, r0
 8006b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b96:	bfac      	ite	ge
 8006b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b9a:	81a3      	strhlt	r3, [r4, #12]
 8006b9c:	bd10      	pop	{r4, pc}

08006b9e <__swrite>:
 8006b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba2:	461f      	mov	r7, r3
 8006ba4:	898b      	ldrh	r3, [r1, #12]
 8006ba6:	05db      	lsls	r3, r3, #23
 8006ba8:	4605      	mov	r5, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	4616      	mov	r6, r2
 8006bae:	d505      	bpl.n	8006bbc <__swrite+0x1e>
 8006bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f000 f868 	bl	8006c8c <_lseek_r>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	4632      	mov	r2, r6
 8006bca:	463b      	mov	r3, r7
 8006bcc:	4628      	mov	r0, r5
 8006bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd2:	f000 b817 	b.w	8006c04 <_write_r>

08006bd6 <__sseek>:
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	460c      	mov	r4, r1
 8006bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bde:	f000 f855 	bl	8006c8c <_lseek_r>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	bf15      	itete	ne
 8006be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bf2:	81a3      	strheq	r3, [r4, #12]
 8006bf4:	bf18      	it	ne
 8006bf6:	81a3      	strhne	r3, [r4, #12]
 8006bf8:	bd10      	pop	{r4, pc}

08006bfa <__sclose>:
 8006bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfe:	f000 b813 	b.w	8006c28 <_close_r>
	...

08006c04 <_write_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d07      	ldr	r5, [pc, #28]	; (8006c24 <_write_r+0x20>)
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	602a      	str	r2, [r5, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f7fb fce3 	bl	80025de <_write>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_write_r+0x1e>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_write_r+0x1e>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	20000c14 	.word	0x20000c14

08006c28 <_close_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d06      	ldr	r5, [pc, #24]	; (8006c44 <_close_r+0x1c>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	f7fb fcef 	bl	8002616 <_close>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_close_r+0x1a>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_close_r+0x1a>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	20000c14 	.word	0x20000c14

08006c48 <_fstat_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d07      	ldr	r5, [pc, #28]	; (8006c68 <_fstat_r+0x20>)
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	602b      	str	r3, [r5, #0]
 8006c56:	f7fb fcea 	bl	800262e <_fstat>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	d102      	bne.n	8006c64 <_fstat_r+0x1c>
 8006c5e:	682b      	ldr	r3, [r5, #0]
 8006c60:	b103      	cbz	r3, 8006c64 <_fstat_r+0x1c>
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	bd38      	pop	{r3, r4, r5, pc}
 8006c66:	bf00      	nop
 8006c68:	20000c14 	.word	0x20000c14

08006c6c <_isatty_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4d06      	ldr	r5, [pc, #24]	; (8006c88 <_isatty_r+0x1c>)
 8006c70:	2300      	movs	r3, #0
 8006c72:	4604      	mov	r4, r0
 8006c74:	4608      	mov	r0, r1
 8006c76:	602b      	str	r3, [r5, #0]
 8006c78:	f7fb fce9 	bl	800264e <_isatty>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_isatty_r+0x1a>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_isatty_r+0x1a>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	20000c14 	.word	0x20000c14

08006c8c <_lseek_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d07      	ldr	r5, [pc, #28]	; (8006cac <_lseek_r+0x20>)
 8006c90:	4604      	mov	r4, r0
 8006c92:	4608      	mov	r0, r1
 8006c94:	4611      	mov	r1, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	602a      	str	r2, [r5, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f7fb fce2 	bl	8002664 <_lseek>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_lseek_r+0x1e>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_lseek_r+0x1e>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	20000c14 	.word	0x20000c14

08006cb0 <_malloc_usable_size_r>:
 8006cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cb4:	1f18      	subs	r0, r3, #4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bfbc      	itt	lt
 8006cba:	580b      	ldrlt	r3, [r1, r0]
 8006cbc:	18c0      	addlt	r0, r0, r3
 8006cbe:	4770      	bx	lr

08006cc0 <_read_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	4d07      	ldr	r5, [pc, #28]	; (8006ce0 <_read_r+0x20>)
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	4611      	mov	r1, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	602a      	str	r2, [r5, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f7fb fc68 	bl	80025a4 <_read>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_read_r+0x1e>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_read_r+0x1e>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	20000c14 	.word	0x20000c14

08006ce4 <_init>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	bf00      	nop
 8006ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cea:	bc08      	pop	{r3}
 8006cec:	469e      	mov	lr, r3
 8006cee:	4770      	bx	lr

08006cf0 <_fini>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	bf00      	nop
 8006cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf6:	bc08      	pop	{r3}
 8006cf8:	469e      	mov	lr, r3
 8006cfa:	4770      	bx	lr
